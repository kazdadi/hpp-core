!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AffordanceConfig_t	include/hpp/core/problem-solver.hh	/^    typedef vector3_t AffordanceConfig_t;$/;"	t	namespace:hpp::core
AffordanceObjects_t	include/hpp/core/problem-solver.hh	/^    typedef std::vector<CollisionObjectPtr_t > AffordanceObjects_t;$/;"	t	namespace:hpp::core
Alphas_t	include/hpp/core/path-projector/global.hh	/^          typedef std::list <LineSearch_t> Alphas_t;$/;"	t	class:hpp::core::pathProjector::Global
ArgsType	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^                                      size_type&> ArgsType;$/;"	t	struct:hpp::core::pathOptimization::JointBoundConstraintStep
ArgsType	src/weighed-distance.cc	/^                                      value_type & > ArgsType;$/;"	t	struct:hpp::core::__anon17::ComputeWeightStep	file:
ArgsType	src/weighed-distance.cc	/^                value_type &> ArgsType;$/;"	t	struct:hpp::core::__anon17::SquaredDistanceStep	file:
Astar	src/astar.hh	/^      Astar (const RoadmapPtr_t& roadmap, const DistancePtr_t distance) :$/;"	f	class:hpp::core::Astar
Astar	src/astar.hh	/^    class HPP_CORE_LOCAL Astar$/;"	c	namespace:hpp::core
BUILD_ROADMAP	include/hpp/core/path-planner/k-prm-star.hh	/^          BUILD_ROADMAP,$/;"	e	enum:hpp::core::pathPlanner::kPrmStar::STATE
Backtracking	include/hpp/core/config-projector.hh	/^        Backtracking,$/;"	e	enum:hpp::core::ConfigProjector::LineSearchType
Base	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^          typedef SplineGradientBasedAbstract<_PolynomeBasis, _SplineOrder> Base;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
Base	include/hpp/core/path-optimization/spline-gradient-based.hh	/^          typedef SplineGradientBasedAbstract<_PolynomeBasis, _SplineOrder> Base;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBased
Basic	src/nearest-neighbor/basic.hh	/^      Basic(const DistancePtr_t& distance) : distance_ (distance)$/;"	f	class:hpp::core::nearestNeighbor::Basic
Basic	src/nearest-neighbor/basic.hh	/^    class Basic : public NearestNeighbor$/;"	c	namespace:hpp::core::nearestNeighbor
BasicConfigurationShooter	include/hpp/core/basic-configuration-shooter.hh	/^      BasicConfigurationShooter (const DevicePtr_t& robot) : robot_ (robot)$/;"	f	class:hpp::core::BasicConfigurationShooter
BasicConfigurationShooter	include/hpp/core/basic-configuration-shooter.hh	/^    class HPP_CORE_DLLAPI BasicConfigurationShooter :$/;"	c	namespace:hpp::core
BasicConfigurationShooterPtr_t	include/hpp/core/fwd.hh	/^    BasicConfigurationShooterPtr_t;$/;"	t	namespace:hpp::core
BasicImplicitFunction	src/implicit-function.hh	/^    typedef ImplicitFunction<true > BasicImplicitFunction;$/;"	t	namespace:hpp::core
BasicPtr_t	include/hpp/core/fwd.hh	/^      typedef Basic* BasicPtr_t;$/;"	t	namespace:hpp::core::nearestNeighbor
BasisFunctionIntegralMatrix_t	include/hpp/core/path/spline.hh	/^          typedef typename sbf_traits::IntegralCoeffs_t BasisFunctionIntegralMatrix_t;$/;"	t	class:hpp::core::path::Spline
BasisFunctionVector_t	include/hpp/core/path/spline.hh	/^          typedef typename sbf_traits::Coeffs_t BasisFunctionVector_t;$/;"	t	class:hpp::core::path::Spline
BasisFunction_t	include/hpp/core/path/spline.hh	/^          typedef internal::spline_basis_function<PolynomeBasis, Order> BasisFunction_t;$/;"	t	class:hpp::core::path::Spline
BernsteinBasis	include/hpp/core/path/spline.hh	/^        BernsteinBasis$/;"	e	enum:hpp::core::path::PolynomeBasisType
BiRRTPlanner	include/hpp/core/bi-rrt-planner.hh	/^    class HPP_CORE_DLLAPI BiRRTPlanner : public PathPlanner$/;"	c	namespace:hpp::core
BiRRTPlanner	src/bi-rrt-planner.cc	/^    BiRRTPlanner::BiRRTPlanner (const Problem& problem):$/;"	f	class:hpp::core::BiRRTPlanner
BiRRTPlanner	src/bi-rrt-planner.cc	/^    BiRRTPlanner::BiRRTPlanner (const Problem& problem, const RoadmapPtr_t& roadmap):$/;"	f	class:hpp::core::BiRRTPlanner
BiRRTPlannerPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <BiRRTPlanner> BiRRTPlannerPtr_t;$/;"	t	namespace:hpp::core
BlockIndex	include/hpp/core/explicit-relative-transformation.hh	/^      typedef Eigen::BlockIndex BlockIndex;$/;"	t	class:hpp::core::ExplicitRelativeTransformation
BlockIndex	include/hpp/core/fwd.hh	/^    typedef Eigen::BlockIndex BlockIndex;$/;"	t	namespace:hpp::core
BlockIndex	src/path-optimization/spline-gradient-based-abstract.cc	/^      typedef Eigen::BlockIndex BlockIndex;$/;"	t	namespace:hpp::core::pathOptimization	file:
BlockIndex	src/path-optimization/spline-gradient-based-constraint.cc	/^      typedef Eigen::BlockIndex BlockIndex;$/;"	t	namespace:hpp::core::pathOptimization	file:
BlockIndex	src/path-optimization/spline-gradient-based.cc	/^      typedef Eigen::BlockIndex BlockIndex;$/;"	t	namespace:hpp::core::pathOptimization	file:
BlockIndex	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      typedef Eigen::BlockIndex BlockIndex;$/;"	t	namespace:hpp::core::pathOptimization	file:
Body	include/hpp/core/fwd.hh	/^    typedef hpp::pinocchio::Body Body;$/;"	t	namespace:hpp::core
BodyPairCollision	src/continuous-collision-checking/body-pair-collision.hh	/^	BodyPairCollision (const JointPtr_t& joint_a,$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
BodyPairCollision	src/continuous-collision-checking/body-pair-collision.hh	/^      class BodyPairCollision$/;"	c	namespace:hpp::core::continuousCollisionChecking
BodyPairCollisionMap_t	src/continuous-collision-checking.cc	/^      typedef std::map<JointIndexPair_t, BodyPairCollisionPtr_t, JointIndexPairCompare_t> BodyPairCollisionMap_t;$/;"	t	namespace:hpp::core::__anon7	file:
BodyPairCollisionPtr_t	include/hpp/core/continuous-collision-checking.hh	/^      typedef boost::shared_ptr <BodyPairCollision> BodyPairCollisionPtr_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
BodyPairCollisionPtr_t	src/continuous-collision-checking/body-pair-collision.hh	/^      typedef boost::shared_ptr <BodyPairCollision> BodyPairCollisionPtr_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
BodyPairCollisions_t	include/hpp/core/continuous-collision-checking.hh	/^      typedef std::vector <BodyPairCollisionPtr_t> BodyPairCollisions_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
BodyPtr_t	include/hpp/core/fwd.hh	/^    typedef hpp::pinocchio::BodyPtr_t BodyPtr_t;$/;"	t	namespace:hpp::core
Bools_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef std::vector <bool> Bools_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
Bools_t	include/hpp/core/path-projector/global.hh	/^          typedef std::vector <bool> Bools_t;$/;"	t	class:hpp::core::pathProjector::Global
CCC	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::CCC(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi)$/;"	f	class:hpp::core::ReedsSheppPath
CCCC	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::CCCC(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi)$/;"	f	class:hpp::core::ReedsSheppPath
CCSC	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::CCSC(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi)$/;"	f	class:hpp::core::ReedsSheppPath
CCSCC	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::CCSCC(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi)$/;"	f	class:hpp::core::ReedsSheppPath
CONNECT_INIT_GOAL	include/hpp/core/path-planner/k-prm-star.hh	/^          CONNECT_INIT_GOAL,$/;"	e	enum:hpp::core::pathPlanner::kPrmStar::STATE
CSC	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::CSC(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi)$/;"	f	class:hpp::core::ReedsSheppPath
CanonicalPolynomeBasis	include/hpp/core/path/spline.hh	/^        CanonicalPolynomeBasis,$/;"	e	enum:hpp::core::path::PolynomeBasisType
CarLike	include/hpp/core/steering-method/car-like.hh	/^      class HPP_CORE_DLLAPI CarLike : public SteeringMethod$/;"	c	namespace:hpp::core::steeringMethod
CarLike	src/steering-method/car-like.cc	/^      CarLike::CarLike (const CarLike& other) :$/;"	f	class:hpp::core::steeringMethod::CarLike
CarLike	src/steering-method/car-like.cc	/^      CarLike::CarLike (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::CarLike
CarLike	src/steering-method/car-like.cc	/^      CarLike::CarLike (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::CarLike
CarLikePtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <CarLike> CarLikePtr_t;$/;"	t	namespace:hpp::core::steeringMethod
CenterOfMassComputationMap_t	include/hpp/core/fwd.hh	/^    CenterOfMassComputationMap_t;$/;"	t	namespace:hpp::core
CenterOfMassComputationPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::CenterOfMassComputationPtr_t CenterOfMassComputationPtr_t;$/;"	t	namespace:hpp::core
CoefficientVelocities_t	src/continuous-collision-checking/path-velocity.hh	/^      typedef std::vector <CoefficientVelocity> CoefficientVelocities_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
CoefficientVelocity	src/continuous-collision-checking/path-velocity.hh	/^	CoefficientVelocity () : value_ (0)$/;"	f	struct:hpp::core::continuousCollisionChecking::CoefficientVelocity
CoefficientVelocity	src/continuous-collision-checking/path-velocity.hh	/^      struct CoefficientVelocity$/;"	s	namespace:hpp::core::continuousCollisionChecking
Coeffs_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Matrix<value_type, NbCoeffs, 1> Coeffs_t;$/;"	t	struct:hpp::core::path::internal::sbf_traits
Coeffs_t	src/path/spline.cc	/^          typedef Eigen::Matrix<value_type, NbCoeffs, 1> Coeffs_t;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
Coeffs_t	src/path/spline.cc	/^          typedef typename traits::Coeffs_t Coeffs_t;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
ColBlockIndices	include/hpp/core/explicit-relative-transformation.hh	/^      typedef Eigen::ColBlockIndices ColBlockIndices;$/;"	t	class:hpp::core::ExplicitRelativeTransformation
CollisionConstraint	src/path-optimization/collision-constraints-result.hh	/^       CollisionConstraint (const DevicePtr_t& robot,$/;"	f	class:hpp::core::pathOptimization::CollisionConstraint
CollisionConstraint	src/path-optimization/collision-constraints-result.hh	/^      class CollisionConstraint : public DifferentiableFunction$/;"	c	namespace:hpp::core::pathOptimization
CollisionConstraintPtr_t	src/path-optimization/collision-constraints-result.hh	/^      typedef boost::shared_ptr <CollisionConstraint> CollisionConstraintPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
CollisionConstraintsResult	src/path-optimization/collision-constraints-result.hh	/^	CollisionConstraintsResult$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
CollisionConstraintsResult	src/path-optimization/collision-constraints-result.hh	/^      struct HPP_CORE_DLLAPI CollisionConstraintsResult$/;"	s	namespace:hpp::core::pathOptimization
CollisionConstraintsResults_t	include/hpp/core/path-optimization/gradient-based.hh	/^      CollisionConstraintsResults_t;$/;"	t	namespace:hpp::core::pathOptimization
CollisionConstraintsResults_t	src/path-optimization/collision-constraints-result.hh	/^      CollisionConstraintsResults_t;$/;"	t	namespace:hpp::core::pathOptimization
CollisionFunction	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       CollisionFunction (const DevicePtr_t& robot,$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
CollisionFunction	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^      class CollisionFunction : public DifferentiableFunction$/;"	c	namespace:hpp::core::pathOptimization
CollisionFunctionPtr_t	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^      typedef boost::shared_ptr <CollisionFunction> CollisionFunctionPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
CollisionFunctions	src/path-optimization/spline-gradient-based-constraint.cc	/^        struct SplineGradientBasedConstraint<_PB, _SO>::CollisionFunctions$/;"	s	class:hpp::core::pathOptimization::SplineGradientBasedConstraint	file:
CollisionFunctions	src/path-optimization/spline-gradient-based.cc	/^      struct SplineGradientBased<_PB, _SO>::CollisionFunctions$/;"	s	class:hpp::core::pathOptimization::SplineGradientBased	file:
CollisionFunctions	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      struct SplineGradientBased<_PB, _SO>::CollisionFunctions$/;"	s	class:hpp::core::pathOptimization::SplineGradientBased	file:
CollisionObjectConstPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::CollisionObjectConstPtr_t CollisionObjectConstPtr_t;$/;"	t	namespace:hpp::core
CollisionObjectPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::CollisionObjectPtr_t CollisionObjectPtr_t;$/;"	t	namespace:hpp::core
CollisionPair_t	include/hpp/core/fwd.hh	/^    CollisionPair_t;$/;"	t	namespace:hpp::core
CollisionPair_t	src/continuous-collision-checking/body-pair-collision.hh	/^        typedef std::pair<CollisionObjectConstPtr_t, CollisionObjectConstPtr_t> CollisionPair_t;$/;"	t	class:hpp::core::continuousCollisionChecking::BodyPairCollision
CollisionPairs_t	include/hpp/core/fwd.hh	/^    typedef std::vector <CollisionPair_t> CollisionPairs_t;$/;"	t	namespace:hpp::core
CollisionPairs_t	src/continuous-collision-checking/body-pair-collision.hh	/^        typedef std::vector<CollisionPair_t> CollisionPairs_t;$/;"	t	class:hpp::core::continuousCollisionChecking::BodyPairCollision
CollisionPathValidationReport	include/hpp/core/collision-path-validation-report.hh	/^      CollisionPathValidationReport (const value_type& param,$/;"	f	struct:hpp::core::CollisionPathValidationReport
CollisionPathValidationReport	include/hpp/core/collision-path-validation-report.hh	/^    CollisionPathValidationReport()$/;"	f	struct:hpp::core::CollisionPathValidationReport
CollisionPathValidationReport	include/hpp/core/collision-path-validation-report.hh	/^    struct HPP_CORE_DLLAPI CollisionPathValidationReport :$/;"	s	namespace:hpp::core
CollisionPathValidationReportPtr_t	include/hpp/core/fwd.hh	/^    CollisionPathValidationReportPtr_t;$/;"	t	namespace:hpp::core
CollisionPathValidationReports_t	include/hpp/core/fwd.hh	/^    CollisionPathValidationReports_t;$/;"	t	namespace:hpp::core
CollisionValidation	include/hpp/core/collision-validation.hh	/^    class HPP_CORE_DLLAPI CollisionValidation : public ConfigValidation$/;"	c	namespace:hpp::core
CollisionValidation	src/collision-validation.cc	/^    CollisionValidation::CollisionValidation (const DevicePtr_t& robot) :$/;"	f	class:hpp::core::CollisionValidation
CollisionValidationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <CollisionValidation> CollisionValidationPtr_t;$/;"	t	namespace:hpp::core
CollisionValidationReport	include/hpp/core/collision-validation-report.hh	/^    struct HPP_CORE_DLLAPI CollisionValidationReport : public ValidationReport$/;"	s	namespace:hpp::core
CollisionValidationReportPtr_t	include/hpp/core/fwd.hh	/^    CollisionValidationReportPtr_t;$/;"	t	namespace:hpp::core
ComparisonType	include/hpp/core/fwd.hh	/^    typedef constraints::ComparisonType ComparisonType;$/;"	t	namespace:hpp::core
ComparisonTypeMap_t	include/hpp/core/fwd.hh	/^    typedef std::map <std::string, ComparisonTypes_t> ComparisonTypeMap_t;$/;"	t	namespace:hpp::core
ComparisonTypes_t	include/hpp/core/fwd.hh	/^    typedef constraints::ComparisonTypes_t ComparisonTypes_t;$/;"	t	namespace:hpp::core
ComputeWeightStep	src/weighed-distance.cc	/^      struct ComputeWeightStep : public se3::fusion::JointModelVisitor<ComputeWeightStep>$/;"	s	namespace:hpp::core::__anon17	file:
ConfigConstIterator_t	include/hpp/core/fwd.hh	/^    typedef Configurations_t::const_iterator ConfigConstIterator_t;$/;"	t	namespace:hpp::core
ConfigIterator_t	include/hpp/core/fwd.hh	/^    typedef Configurations_t::iterator ConfigIterator_t;$/;"	t	namespace:hpp::core
ConfigOptimization	include/hpp/core/path-optimization/config-optimization.hh	/^      class HPP_CORE_DLLAPI ConfigOptimization : public PathOptimizer$/;"	c	namespace:hpp::core::pathOptimization
ConfigOptimization	src/path-optimization/config-optimization.cc	/^      ConfigOptimization::ConfigOptimization (const Problem& problem) :$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
ConfigOptimizationPtr_t	include/hpp/core/fwd.hh	/^        ConfigOptimizationPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
ConfigOptimizationTraits	include/hpp/core/path-optimization/config-optimization.hh	/^      struct ConfigOptimizationTraits {$/;"	s	namespace:hpp::core::pathOptimization
ConfigProjector	include/hpp/core/config-projector.hh	/^    class HPP_CORE_DLLAPI ConfigProjector : public Constraint$/;"	c	namespace:hpp::core
ConfigProjector	src/config-projector.cc	/^    ConfigProjector::ConfigProjector (const ConfigProjector& cp) :$/;"	f	class:hpp::core::ConfigProjector
ConfigProjector	src/config-projector.cc	/^    ConfigProjector::ConfigProjector (const DevicePtr_t& robot,$/;"	f	class:hpp::core::ConfigProjector
ConfigProjectorPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConfigProjector> ConfigProjectorPtr_t;$/;"	t	namespace:hpp::core
ConfigValidation	include/hpp/core/config-validation.hh	/^      ConfigValidation ()$/;"	f	class:hpp::core::ConfigValidation
ConfigValidation	include/hpp/core/config-validation.hh	/^    class HPP_CORE_DLLAPI ConfigValidation$/;"	c	namespace:hpp::core
ConfigValidationBuilder_t	include/hpp/core/problem-solver.hh	/^      ConfigValidationBuilder_t;$/;"	t	namespace:hpp::core
ConfigValidationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConfigValidation> ConfigValidationPtr_t;$/;"	t	namespace:hpp::core
ConfigValidationTypes_t	include/hpp/core/problem-solver.hh	/^      typedef std::vector <std::string> ConfigValidationTypes_t;$/;"	t	class:hpp::core::ProblemSolver
ConfigValidations	include/hpp/core/config-validations.hh	/^    class HPP_CORE_DLLAPI ConfigValidations : public ConfigValidation$/;"	c	namespace:hpp::core
ConfigValidations	src/config-validations.cc	/^    ConfigValidations::ConfigValidations () : validations_ ()$/;"	f	class:hpp::core::ConfigValidations
ConfigValidationsPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConfigValidations> ConfigValidationsPtr_t;$/;"	t	namespace:hpp::core
Configs_t	include/hpp/core/path-projector/global.hh	/^                  Eigen::aligned_allocator <Configuration_t> > Configs_t;$/;"	t	class:hpp::core::pathProjector::Global
ConfigurationFactory	include/hpp/core/parser/roadmap-factory.hh	/^      typedef hpp::util::parser::SequenceFactory<double> ConfigurationFactory;$/;"	t	namespace:hpp::core::parser
ConfigurationIn_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::ConfigurationIn_t ConfigurationIn_t;$/;"	t	namespace:hpp::core
ConfigurationOut_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::ConfigurationOut_t ConfigurationOut_t;$/;"	t	namespace:hpp::core
ConfigurationPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::ConfigurationPtr_t ConfigurationPtr_t;$/;"	t	namespace:hpp::core
ConfigurationShooter	include/hpp/core/configuration-shooter.hh	/^      ConfigurationShooter ()$/;"	f	class:hpp::core::ConfigurationShooter
ConfigurationShooter	include/hpp/core/configuration-shooter.hh	/^    class HPP_CORE_DLLAPI ConfigurationShooter$/;"	c	namespace:hpp::core
ConfigurationShooterBuilder_t	include/hpp/core/problem-solver.hh	/^      ConfigurationShooterBuilder_t;$/;"	t	namespace:hpp::core
ConfigurationShooterPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConfigurationShooter> ConfigurationShooterPtr_t;$/;"	t	namespace:hpp::core
Configuration_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::Configuration_t Configuration_t;$/;"	t	namespace:hpp::core
Configurations_t	include/hpp/core/fwd.hh	/^    typedef std::vector <ConfigurationPtr_t> Configurations_t;$/;"	t	namespace:hpp::core
ConnectedComponent	include/hpp/core/connected-component.hh	/^      ConnectedComponent () : nodes_ (), explored_ (false), weak_ ()$/;"	f	class:hpp::core::ConnectedComponent
ConnectedComponent	include/hpp/core/connected-component.hh	/^    class HPP_CORE_DLLAPI ConnectedComponent {$/;"	c	namespace:hpp::core
ConnectedComponentPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConnectedComponent> ConnectedComponentPtr_t;$/;"	t	namespace:hpp::core
ConnectedComponents_t	include/hpp/core/fwd.hh	/^    typedef std::set <ConnectedComponentPtr_t> ConnectedComponents_t;$/;"	t	namespace:hpp::core
ConstHalfJacobian_t	src/explicit-relative-transformation.cc	/^      typedef JointJacobian_t::ConstNRowsBlockXpr<3>::Type ConstHalfJacobian_t;$/;"	t	namespace:hpp::core::__anon23	file:
ConstObjectStdVector_t	include/hpp/core/fwd.hh	/^    typedef std::vector<CollisionObjectConstPtr_t> ConstObjectStdVector_t;$/;"	t	namespace:hpp::core
ConstParameterVector_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Map<const vector_t, Eigen::Aligned> ConstParameterVector_t;$/;"	t	class:hpp::core::path::Spline
ConstVectorMap_t	src/path-optimization/spline-gradient-based-abstract.cc	/^      typedef Eigen::Map<const vector_t> ConstVectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
ConstVectorMap_t	src/path-optimization/spline-gradient-based-constraint.cc	/^      typedef Eigen::Map<const vector_t> ConstVectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
ConstVectorMap_t	src/path-optimization/spline-gradient-based.cc	/^      typedef Eigen::Map<const vector_t> ConstVectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
ConstVectorMap_t	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      typedef Eigen::Map<const vector_t> ConstVectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
Constant	include/hpp/core/config-projector.hh	/^        Constant$/;"	e	enum:hpp::core::ConfigProjector::LineSearchType
ConstantCurvature	include/hpp/core/steering-method/constant-curvature.hh	/^      class ConstantCurvature : public Path {$/;"	c	namespace:hpp::core::steeringMethod
ConstantCurvature	src/steering-method/constant-curvature.cc	/^      ConstantCurvature::ConstantCurvature (const ConstantCurvature& other) :$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
ConstantCurvature	src/steering-method/constant-curvature.cc	/^      ConstantCurvature::ConstantCurvature$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
ConstantCurvaturePtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <ConstantCurvature> ConstantCurvaturePtr_t;$/;"	t	namespace:hpp::core::steeringMethod
Constrained	include/hpp/core/relative-motion.hh	/^        Constrained,$/;"	e	enum:hpp::core::RelativeMotion::RelativeMotionType
Constraint	include/hpp/core/constraint.hh	/^      Constraint (const Constraint& constraint) : name_ (constraint.name_),$/;"	f	class:hpp::core::Constraint
Constraint	include/hpp/core/constraint.hh	/^      Constraint (const std::string& name) : name_ (name), weak_ ()$/;"	f	class:hpp::core::Constraint
Constraint	include/hpp/core/constraint.hh	/^    class HPP_CORE_DLLAPI Constraint$/;"	c	namespace:hpp::core
ConstraintPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <Constraint> ConstraintPtr_t;$/;"	t	namespace:hpp::core
ConstraintSet	include/hpp/core/constraint-set.hh	/^    class HPP_CORE_DLLAPI ConstraintSet : public Constraint$/;"	c	namespace:hpp::core
ConstraintSet	src/constraint-set.cc	/^    ConstraintSet::ConstraintSet (const ConstraintSet& other) :$/;"	f	class:hpp::core::ConstraintSet
ConstraintSet	src/constraint-set.cc	/^    ConstraintSet::ConstraintSet (const DevicePtr_t& robot,$/;"	f	class:hpp::core::ConstraintSet
ConstraintSetConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const ConstraintSet> ConstraintSetConstPtr_t;$/;"	t	namespace:hpp::core
ConstraintSetPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ConstraintSet> ConstraintSetPtr_t;$/;"	t	namespace:hpp::core
Constraints_t	include/hpp/core/fwd.hh	/^    typedef std::deque <ConstraintPtr_t> Constraints_t;$/;"	t	namespace:hpp::core
Container	include/hpp/core/container.hh	/^    template <typename Types, typename Key = std::string > struct Container$/;"	s	namespace:hpp::core
ContinuousCollisionChecking	include/hpp/core/continuous-collision-checking.hh	/^    class HPP_CORE_DLLAPI ContinuousCollisionChecking : public PathValidation$/;"	c	namespace:hpp::core
ContinuousCollisionChecking	src/continuous-collision-checking.cc	/^    ContinuousCollisionChecking::ContinuousCollisionChecking$/;"	f	class:hpp::core::ContinuousCollisionChecking
ContinuousCollisionCheckingPtr_t	include/hpp/core/fwd.hh	/^    ContinuousCollisionCheckingPtr_t;$/;"	t	namespace:hpp::core
Cost	include/hpp/core/path-optimization/cost.hh	/^	Cost (size_type inputSize, size_type inputDerivativeSize,$/;"	f	class:hpp::core::pathOptimization::Cost
Cost	include/hpp/core/path-optimization/cost.hh	/^      class HPP_CORE_DLLAPI Cost : public DifferentiableFunction$/;"	c	namespace:hpp::core::pathOptimization
CostPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Cost> CostPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
DIRDATA	src/dubins.hh	/^const int DIRDATA[][3] = {$/;"	v
DUBINS_H	src/dubins.hh	21;"	d
Data	include/hpp/core/path-projector/global.hh	/^          struct Data {$/;"	s	class:hpp::core::pathProjector::Global
Datas_t	include/hpp/core/path-projector/global.hh	/^          typedef std::list<Data> Datas_t;$/;"	t	class:hpp::core::pathProjector::Global
Decomposition_t	include/hpp/core/path-optimization/quadratic-program.hh	/^        typedef Eigen::JacobiSVD < matrix_t > Decomposition_t;$/;"	t	struct:hpp::core::pathOptimization::QuadraticProgram
Decomposition_t	src/path-optimization/spline-gradient-based-constraint.cc	/^          typedef Eigen::JacobiSVD < matrix_t > Decomposition_t;$/;"	t	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
Decomposition_t	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        typedef Eigen::JacobiSVD < matrix_t > Decomposition_t;$/;"	t	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
DelayedEdge_t	include/hpp/core/visibility-prm-planner.hh	/^	DelayedEdge_t;$/;"	t	class:hpp::core::VisibilityPrmPlanner
DelayedEdges_t	include/hpp/core/visibility-prm-planner.hh	/^      typedef std::vector <DelayedEdge_t> DelayedEdges_t;$/;"	t	class:hpp::core::VisibilityPrmPlanner
DevicePtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::DevicePtr_t DevicePtr_t;$/;"	t	namespace:hpp::core
DeviceWkPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::DeviceWkPtr_t DeviceWkPtr_t;$/;"	t	namespace:hpp::core
Device_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::Device Device_t;$/;"	t	namespace:hpp::core
Devices_t	include/hpp/core/fwd.hh	/^    typedef std::deque <DevicePtr_t> Devices_t;$/;"	t	namespace:hpp::core
Dichotomy	include/hpp/core/continuous-collision-checking/dichotomy.hh	/^      class HPP_CORE_DLLAPI Dichotomy : public ContinuousCollisionChecking$/;"	c	namespace:hpp::core::continuousCollisionChecking
Dichotomy	include/hpp/core/path-projector/dichotomy.hh	/^      class HPP_CORE_DLLAPI Dichotomy : public PathProjector$/;"	c	namespace:hpp::core::pathProjector
Dichotomy	src/continuous-collision-checking/dichotomy.cc	/^      Dichotomy::Dichotomy$/;"	f	class:hpp::core::continuousCollisionChecking::Dichotomy
Dichotomy	src/path-projector/dichotomy.cc	/^      Dichotomy::Dichotomy (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::Dichotomy
DichotomyPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Dichotomy> DichotomyPtr_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
DichotomyPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Dichotomy> DichotomyPtr_t;$/;"	t	namespace:hpp::core::pathProjector
DifferentiableFunction	include/hpp/core/fwd.hh	/^    typedef constraints::DifferentiableFunction DifferentiableFunction;$/;"	t	namespace:hpp::core
DifferentiableFunctionPtr_t	include/hpp/core/fwd.hh	/^    DifferentiableFunctionPtr_t;$/;"	t	namespace:hpp::core
DiffusingPlanner	include/hpp/core/diffusing-planner.hh	/^    class HPP_CORE_DLLAPI DiffusingPlanner : public PathPlanner$/;"	c	namespace:hpp::core
DiffusingPlanner	src/diffusing-planner.cc	/^    DiffusingPlanner::DiffusingPlanner (const Problem& problem):$/;"	f	class:hpp::core::DiffusingPlanner
DiffusingPlanner	src/diffusing-planner.cc	/^    DiffusingPlanner::DiffusingPlanner (const Problem& problem,$/;"	f	class:hpp::core::DiffusingPlanner
DiffusingPlannerPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <DiffusingPlanner> DiffusingPlannerPtr_t;$/;"	t	namespace:hpp::core
DiscretizedCollisionChecking	include/hpp/core/discretized-collision-checking.hh	/^    class HPP_CORE_DLLAPI DiscretizedCollisionChecking :$/;"	c	namespace:hpp::core
DiscretizedCollisionChecking	src/discretized-collision-checking.cc	/^    DiscretizedCollisionChecking::DiscretizedCollisionChecking$/;"	f	class:hpp::core::DiscretizedCollisionChecking
DiscretizedCollisionCheckingPtr_t	include/hpp/core/fwd.hh	/^    DiscretizedCollisionCheckingPtr_t;$/;"	t	namespace:hpp::core
DiscretizedPathValidation	include/hpp/core/discretized-path-validation.hh	/^    class HPP_CORE_DLLAPI DiscretizedPathValidation : public PathValidation$/;"	c	namespace:hpp::core
DiscretizedPathValidation	src/discretized-path-validation.cc	/^    DiscretizedPathValidation::DiscretizedPathValidation$/;"	f	class:hpp::core::DiscretizedPathValidation
DiscretizedPathValidationPtr_t	include/hpp/core/fwd.hh	/^    DiscretizedPathValidationPtr_t;$/;"	t	namespace:hpp::core
DistAndNodeComp_t	src/nearest-neighbor/basic.cc	/^        struct DistAndNodeComp_t {$/;"	s	namespace:hpp::core::nearestNeighbor::__anon21	file:
DistAndNode_t	src/nearest-neighbor/basic.cc	/^        typedef std::pair <value_type, NodePtr_t> DistAndNode_t;$/;"	t	namespace:hpp::core::nearestNeighbor::__anon21	file:
Distance	include/hpp/core/distance.hh	/^      Distance ()$/;"	f	class:hpp::core::Distance
Distance	include/hpp/core/distance.hh	/^    class HPP_CORE_DLLAPI Distance {$/;"	c	namespace:hpp::core
DistanceBetweenObjects	include/hpp/core/distance-between-objects.hh	/^    class DistanceBetweenObjects$/;"	c	namespace:hpp::core
DistanceBetweenObjects	src/distance-between-objects.cc	/^    DistanceBetweenObjects::DistanceBetweenObjects  (const DevicePtr_t& robot) :$/;"	f	class:hpp::core::DistanceBetweenObjects
DistanceBetweenObjectsPtr_t	include/hpp/core/fwd.hh	/^    DistanceBetweenObjectsPtr_t;$/;"	t	namespace:hpp::core
DistanceBuilder_t	include/hpp/core/problem-solver.hh	/^    DistanceBuilder_t;$/;"	t	namespace:hpp::core
DistancePtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <Distance> DistancePtr_t;$/;"	t	namespace:hpp::core
DistanceResults_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::DistanceResults_t DistanceResults_t;$/;"	t	namespace:hpp::core
Dubins	include/hpp/core/steering-method/dubins.hh	/^      class HPP_CORE_DLLAPI Dubins : public CarLike$/;"	c	namespace:hpp::core::steeringMethod
Dubins	src/steering-method/dubins.cc	/^      Dubins::Dubins  (const Dubins& other) :$/;"	f	class:hpp::core::steeringMethod::Dubins
Dubins	src/steering-method/dubins.cc	/^      Dubins::Dubins  (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::Dubins
Dubins	src/steering-method/dubins.cc	/^      Dubins::Dubins (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::Dubins
DubinsPath	include/hpp/core/dubins-path.hh	/^    class DubinsPath : public Path$/;"	c	namespace:hpp::core
DubinsPath	src/dubins-path.cc	/^    DubinsPath::DubinsPath (const DevicePtr_t& robot, ConfigurationIn_t init,$/;"	f	class:hpp::core::DubinsPath
DubinsPath	src/dubins-path.cc	/^    DubinsPath::DubinsPath (const DubinsPath& path) :$/;"	f	class:hpp::core::DubinsPath
DubinsPath	src/dubins-path.cc	/^    DubinsPath::DubinsPath (const DubinsPath& path,$/;"	f	class:hpp::core::DubinsPath
DubinsPathConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const DubinsPath> DubinsPathConstPtr_t;$/;"	t	namespace:hpp::core
DubinsPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <DubinsPath> DubinsPathPtr_t;$/;"	t	namespace:hpp::core
DubinsPtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <Dubins> DubinsPtr_t;$/;"	t	namespace:hpp::core::steeringMethod
DubinsWord	src/dubins.hh	/^typedef int (*DubinsWord)(double, double, double, double* );$/;"	t
EDUBBADRHO	src/dubins.hh	40;"	d
EDUBCOCONFIGS	src/dubins.hh	38;"	d
EDUBNOPATH	src/dubins.hh	41;"	d
EDUBOK	src/dubins.hh	37;"	d
EDUBPARAM	src/dubins.hh	39;"	d
Edge	include/hpp/core/edge.hh	/^      Edge (NodePtr_t n1, NodePtr_t n2, const PathPtr_t& path) :$/;"	f	class:hpp::core::Edge
Edge	include/hpp/core/edge.hh	/^    class HPP_CORE_DLLAPI Edge$/;"	c	namespace:hpp::core
EdgePtr_t	include/hpp/core/fwd.hh	/^    typedef Edge* EdgePtr_t;$/;"	t	namespace:hpp::core
Edges_t	include/hpp/core/fwd.hh	/^    typedef std::list <Edge*> Edges_t;$/;"	t	namespace:hpp::core
Edges_t	include/hpp/core/node.hh	/^      typedef std::list <EdgePtr_t> Edges_t;$/;"	t	class:hpp::core::Node
Edges_t	include/hpp/core/parser/roadmap-factory.hh	/^          typedef std::vector <EdgePtr_t> Edges_t;$/;"	t	class:hpp::core::parser::RoadmapFactory
Edges_t	src/astar.hh	/^      typedef std::list <EdgePtr_t> Edges_t;$/;"	t	class:hpp::core::Astar
Eigen	include/hpp/core/relative-motion.hh	/^namespace Eigen {$/;"	n
Eigen	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^namespace Eigen {$/;"	n
Equation	include/hpp/core/equation.hh	/^    class HPP_CORE_DLLAPI Equation {$/;"	c	namespace:hpp::core
Equation	src/equation.cc	/^    Equation::Equation (const ComparisonTypes_t& comp, vectorIn_t rhs) :$/;"	f	class:hpp::core::Equation
Equation	src/equation.cc	/^    Equation::Equation (const Equation& other) :$/;"	f	class:hpp::core::Equation
EquationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <Equation> EquationPtr_t;$/;"	t	namespace:hpp::core
ErrorNormBased	include/hpp/core/config-projector.hh	/^        ErrorNormBased,$/;"	e	enum:hpp::core::ConfigProjector::LineSearchType
ExplicitNumericalConstraint	include/hpp/core/explicit-numerical-constraint.hh	/^    class HPP_CORE_DLLAPI ExplicitNumericalConstraint :$/;"	c	namespace:hpp::core
ExplicitNumericalConstraint	src/explicit-numerical-constraint.cc	/^    ExplicitNumericalConstraint::ExplicitNumericalConstraint$/;"	f	class:hpp::core::ExplicitNumericalConstraint
ExplicitNumericalConstraintPtr_t	include/hpp/core/fwd.hh	/^    ExplicitNumericalConstraintPtr_t;$/;"	t	namespace:hpp::core
ExplicitRelativeTransformation	include/hpp/core/explicit-relative-transformation.hh	/^      ExplicitRelativeTransformation$/;"	f	class:hpp::core::ExplicitRelativeTransformation
ExplicitRelativeTransformation	include/hpp/core/explicit-relative-transformation.hh	/^    class HPP_CORE_DLLAPI ExplicitRelativeTransformation :$/;"	c	namespace:hpp::core
ExplicitRelativeTransformation	src/explicit-relative-transformation.cc	/^    ExplicitRelativeTransformation::ExplicitRelativeTransformation ($/;"	f	class:hpp::core::ExplicitRelativeTransformation
ExplicitRelativeTransformationPtr_t	include/hpp/core/fwd.hh	/^    ExplicitRelativeTransformationPtr_t;$/;"	t	namespace:hpp::core
ExplicitSolver	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef constraints::ExplicitSolver ExplicitSolver;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
ExtractedPath	src/extracted-path.hh	/^      ExtractedPath (const ExtractedPath& path) : Path (path),$/;"	f	class:hpp::core::ExtractedPath
ExtractedPath	src/extracted-path.hh	/^      ExtractedPath (const ExtractedPath& path,$/;"	f	class:hpp::core::ExtractedPath
ExtractedPath	src/extracted-path.hh	/^      ExtractedPath (const PathPtr_t& original, const interval_t& subInterval) :$/;"	f	class:hpp::core::ExtractedPath
ExtractedPath	src/extracted-path.hh	/^    class ExtractedPath : public Path$/;"	c	namespace:hpp::core
ExtractedPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ExtractedPath> ExtractedPathPtr_t;$/;"	t	namespace:hpp::core
F1inJ1_invF2inJ2_	include/hpp/core/explicit-relative-transformation.hh	/^      Transform3f F1inJ1_invF2inJ2_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
FAILURE	include/hpp/core/path-planner/k-prm-star.hh	/^          FAILURE$/;"	e	enum:hpp::core::pathPlanner::kPrmStar::STATE
Factorials_t	src/path/spline.cc	/^          typedef Eigen::Matrix<size_type, NbCoeffs, 1> Factorials_t;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
Factory	src/problem-solver.cc	/^    template <typename Derived> struct Factory {$/;"	s	namespace:hpp::core	file:
FactoryPP	src/problem-solver.cc	/^    template <typename Derived> struct FactoryPP {$/;"	s	namespace:hpp::core	file:
FclCollisionObject	include/hpp/core/fwd.hh	/^    typedef pinocchio::FclCollisionObject FclCollisionObject;$/;"	t	namespace:hpp::core
FindCollisionObject	src/problem-solver.cc	/^        FindCollisionObject (const GeomIndex& i) : geomIdx_ (i) {}$/;"	f	struct:hpp::core::__anon22::FindCollisionObject
FindCollisionObject	src/problem-solver.cc	/^      struct FindCollisionObject {$/;"	s	namespace:hpp::core::__anon22	file:
FixedSequence	include/hpp/core/config-projector.hh	/^        FixedSequence,$/;"	e	enum:hpp::core::ConfigProjector::LineSearchType
GData	src/implicit-function.hh	/^      typedef typename boost::conditional<GisIdentity, IdentityData, GenericGData>::type GData;$/;"	t	class:hpp::core::ImplicitFunction
GenericGData	src/implicit-function.hh	/^        GenericGData (const DifferentiableFunctionPtr_t& g)$/;"	f	struct:hpp::core::ImplicitFunction::GenericGData
GenericGData	src/implicit-function.hh	/^      struct GenericGData {$/;"	s	class:hpp::core::ImplicitFunction
GenericImplicitFunction	src/implicit-function.hh	/^    typedef ImplicitFunction<false> GenericImplicitFunction;$/;"	t	namespace:hpp::core
Global	include/hpp/core/path-projector/global.hh	/^      class HPP_CORE_DLLAPI Global : public PathProjector$/;"	c	namespace:hpp::core::pathProjector
Global	src/path-projector/global.cc	/^      Global::Global (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::Global
GlobalPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Global> GlobalPtr_t;$/;"	t	namespace:hpp::core::pathProjector
GoalConfigurations	include/hpp/core/problem-target/goal-configurations.hh	/^          GoalConfigurations (const ProblemPtr_t& problem)$/;"	f	class:hpp::core::problemTarget::GoalConfigurations
GoalConfigurations	include/hpp/core/problem-target/goal-configurations.hh	/^      class HPP_CORE_DLLAPI GoalConfigurations : public ProblemTarget {$/;"	c	namespace:hpp::core::problemTarget
GoalConfigurationsPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <GoalConfigurations> GoalConfigurationsPtr_t;$/;"	t	namespace:hpp::core::problemTarget
GradientBased	include/hpp/core/path-optimization/gradient-based.hh	/^      class HPP_CORE_DLLAPI GradientBased : public PathOptimizer$/;"	c	namespace:hpp::core::pathOptimization
GradientBased	src/path-optimization/gradient-based.cc	/^      GradientBased::GradientBased (const Problem& problem) :$/;"	f	class:hpp::core::pathOptimization::GradientBased
GradientBasedPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <GradientBased> GradientBasedPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
H	include/hpp/core/path-optimization/quadratic-program.hh	/^        matrix_t H;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
H	src/path-optimization/spline-gradient-based-constraint.cc	/^          matrix_t H;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
H	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        matrix_t H;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
HPP_CORE_ASTAR_HH	src/astar.hh	20;"	d
HPP_CORE_BASIC_CONFIGURATION_SHOOTER_HH	include/hpp/core/basic-configuration-shooter.hh	20;"	d
HPP_CORE_BIRRT_PLANNER_HH	include/hpp/core/bi-rrt-planner.hh	20;"	d
HPP_CORE_COLLISION_PATH_VALIDATION_REPORT_HH	include/hpp/core/collision-path-validation-report.hh	20;"	d
HPP_CORE_COLLISION_VALIDATION_HH	include/hpp/core/collision-validation.hh	20;"	d
HPP_CORE_COLLISION_VALIDATION_REPORT_HH	include/hpp/core/collision-validation-report.hh	20;"	d
HPP_CORE_CONFIGURATION_SHOOTER_HH	include/hpp/core/configuration-shooter.hh	20;"	d
HPP_CORE_CONFIG_PROJECTOR_HH	include/hpp/core/config-projector.hh	20;"	d
HPP_CORE_CONFIG_VALIDATIONS_HH	include/hpp/core/config-validations.hh	20;"	d
HPP_CORE_CONFIG_VALIDATION_HH	include/hpp/core/config-validation.hh	20;"	d
HPP_CORE_CONNECTED_COMPONENT_HH	include/hpp/core/connected-component.hh	20;"	d
HPP_CORE_CONSTRAINT_HH	include/hpp/core/constraint.hh	20;"	d
HPP_CORE_CONSTRAINT_SET_HH	include/hpp/core/constraint-set.hh	20;"	d
HPP_CORE_CONTAINER_HH	include/hpp/core/container.hh	18;"	d
HPP_CORE_CONTINUOUS_COLLISION_CHECKING_DICHOTOMY_HH	include/hpp/core/continuous-collision-checking/dichotomy.hh	20;"	d
HPP_CORE_CONTINUOUS_COLLISION_CHECKING_HH	include/hpp/core/continuous-collision-checking.hh	20;"	d
HPP_CORE_CONTINUOUS_COLLISION_CHECKING_INTERVALS_HH	src/continuous-collision-checking/intervals.hh	20;"	d
HPP_CORE_CONTINUOUS_COLLISION_CHECKING_PATH_VELOCITY_HH	src/continuous-collision-checking/path-velocity.hh	20;"	d
HPP_CORE_CONTINUOUS_COLLISION_CHECKING_PROGRESSIVE_HH	include/hpp/core/continuous-collision-checking/progressive.hh	20;"	d
HPP_CORE_CONT_COLLISION_CHECKING_BODY_PAIR_COLLISION_HH	src/continuous-collision-checking/body-pair-collision.hh	20;"	d
HPP_CORE_DEPRECATED	include/hpp/core/config-projector.hh	/^          const value_type& alpha) HPP_CORE_DEPRECATED;$/;"	m	class:hpp::core::ConfigProjector
HPP_CORE_DEPRECATED	include/hpp/core/path-vector.hh	/^      void concatenate (const PathVector& path) HPP_CORE_DEPRECATED;$/;"	m	class:hpp::core::PathVector
HPP_CORE_DEPRECATED	include/hpp/core/problem-solver.hh	/^        HPP_CORE_DEPRECATED;$/;"	m	class:hpp::core::ProblemSolver
HPP_CORE_DIFFUSING_PLANNER_HH	include/hpp/core/diffusing-planner.hh	20;"	d
HPP_CORE_DISCRETIZED_COLLISION_CHECKING	include/hpp/core/discretized-collision-checking.hh	20;"	d
HPP_CORE_DISCRETIZED_PATH_VALIDATION_HH	include/hpp/core/discretized-path-validation.hh	20;"	d
HPP_CORE_DISTANCE_BETWEEN_OBJECTS_HH	include/hpp/core/distance-between-objects.hh	20;"	d
HPP_CORE_DISTANCE_HH	include/hpp/core/distance.hh	20;"	d
HPP_CORE_DISTANCE_REEDS_SHEPP_HH	include/hpp/core/distance/reeds-shepp.hh	20;"	d
HPP_CORE_DOF_EXTRACTED_PATH_HH	include/hpp/core/subchain-path.hh	20;"	d
HPP_CORE_DUBINS_PATH_HH	include/hpp/core/dubins-path.hh	20;"	d
HPP_CORE_EDGE_HH	include/hpp/core/edge.hh	20;"	d
HPP_CORE_EQUATION_HH	include/hpp/core/equation.hh	19;"	d
HPP_CORE_EXPLICIT_NUMERICAL_CONSTRAINT_HH	include/hpp/core/explicit-numerical-constraint.hh	18;"	d
HPP_CORE_EXPLICIT_RELATIVE_TRANSFORM_HH	include/hpp/core/explicit-relative-transformation.hh	18;"	d
HPP_CORE_EXTRACTED_PATH_HH	src/extracted-path.hh	20;"	d
HPP_CORE_FWD_HH	include/hpp/core/fwd.hh	20;"	d
HPP_CORE_INTERPOLATED_PATH_HH	include/hpp/core/interpolated-path.hh	19;"	d
HPP_CORE_JOINT_BOUND_VALIDATION_HH	include/hpp/core/joint-bound-validation.hh	20;"	d
HPP_CORE_LOCKED_JOINT_HH	include/hpp/core/locked-joint.hh	19;"	d
HPP_CORE_NEAREST_NEIGHBOR_BASIC_HH	src/nearest-neighbor/basic.hh	20;"	d
HPP_CORE_NEAREST_NEIGHBOR_HH	include/hpp/core/nearest-neighbor.hh	20;"	d
HPP_CORE_NEAREST_NEIGHBOR_K_D_TREE_HH	src/nearest-neighbor/k-d-tree.hh	20;"	d
HPP_CORE_NODE_HH	include/hpp/core/node.hh	20;"	d
HPP_CORE_NUMERICALCONSTRAINT_HH	include/hpp/core/numerical-constraint.hh	19;"	d
HPP_CORE_PARSER_ROADMAP_FACTORY_HH	include/hpp/core/parser/roadmap-factory.hh	19;"	d
HPP_CORE_PATHPROJECTOR_DICHOTOMY_HH	include/hpp/core/path-projector/dichotomy.hh	18;"	d
HPP_CORE_PATHPROJECTOR_GLOBAL_HH	include/hpp/core/path-projector/global.hh	19;"	d
HPP_CORE_PATHPROJECTOR_HH	include/hpp/core/path-projector.hh	18;"	d
HPP_CORE_PATHPROJECTOR_PROGRESSIVE_HH	include/hpp/core/path-projector/progressive.hh	18;"	d
HPP_CORE_PATHPROJECTOR_RECURSIVE_HERMITE_HH	include/hpp/core/path-projector/recursive-hermite.hh	18;"	d
HPP_CORE_PATH_HERMITE_HH	include/hpp/core/path/hermite.hh	19;"	d
HPP_CORE_PATH_HH	include/hpp/core/path.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_COLLISION_CONSTRAINTS_RESULT_HH	src/path-optimization/collision-constraints-result.hh	21;"	d
HPP_CORE_PATH_OPTIMIZATION_CONFIG_OPTIMIZATION_HH	include/hpp/core/path-optimization/config-optimization.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_COST_HH	include/hpp/core/path-optimization/cost.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_GRADIENT_BASED_HH	include/hpp/core/path-optimization/gradient-based.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_PARTIAL_SHORTCUT_HH	include/hpp/core/path-optimization/partial-shortcut.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_PATH_LENGTH_HH	include/hpp/core/path-optimization/path-length.hh	20;"	d
HPP_CORE_PATH_OPTIMIZATION_QUADRATIC_PROGRAM_HH	include/hpp/core/path-optimization/quadratic-program.hh	18;"	d
HPP_CORE_PATH_OPTIMIZATION_SIMPLE_TIME_PARAMETERIZATION_HH	include/hpp/core/path-optimization/simple-time-parameterization.hh	18;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_ABSTRACT_HH	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	19;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_COLLISION_CONSTRAINTS_HH	src/path-optimization/spline-gradient-based/collision-constraint.hh	21;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_CONSTRAINT_HH	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	19;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_COST_HH	src/path-optimization/spline-gradient-based/cost.hh	18;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_HH	include/hpp/core/path-optimization/spline-gradient-based.hh	19;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_JOINT_BOUNDS_HH	src/path-optimization/spline-gradient-based/joint-bounds.hh	18;"	d
HPP_CORE_PATH_OPTIMIZATION_SPLINE_GRADIENT_BASED_LINEAR_CONSTRAINT_HH	include/hpp/core/path-optimization/linear-constraint.hh	18;"	d
HPP_CORE_PATH_OPTIMIZER_HH	include/hpp/core/path-optimizer.hh	20;"	d
HPP_CORE_PATH_PLANNER_HH	include/hpp/core/path-planner.hh	20;"	d
HPP_CORE_PATH_PLANNER_K_PRM_STAR_HH	include/hpp/core/path-planner/k-prm-star.hh	20;"	d
HPP_CORE_PATH_SPLINE_HH	include/hpp/core/path/spline.hh	19;"	d
HPP_CORE_PATH_VALIDATIONS_HH	include/hpp/core/path-validations.hh	20;"	d
HPP_CORE_PATH_VALIDATION_HH	include/hpp/core/path-validation.hh	20;"	d
HPP_CORE_PATH_VALIDATION_REPORT_HH	include/hpp/core/path-validation-report.hh	20;"	d
HPP_CORE_PATH_VECTOR_HH	include/hpp/core/path-vector.hh	20;"	d
HPP_CORE_PLAN_AND_OPTIMIZE_HH	include/hpp/core/plan-and-optimize.hh	20;"	d
HPP_CORE_PROBLEM_HH	include/hpp/core/problem.hh	21;"	d
HPP_CORE_PROBLEM_SOLVER_HH	include/hpp/core/problem-solver.hh	20;"	d
HPP_CORE_PROBLEM_TARGET_GOAL_CONFIGURATIONS_HH	include/hpp/core/problem-target/goal-configurations.hh	20;"	d
HPP_CORE_PROBLEM_TARGET_HH	include/hpp/core/problem-target.hh	20;"	d
HPP_CORE_PROBLEM_TARGET_TASK_TARGET_HH	include/hpp/core/problem-target/task-target.hh	20;"	d
HPP_CORE_PROJECTION_ERROR_HH	include/hpp/core/projection-error.hh	19;"	d
HPP_CORE_RANDOM_SHORTCUT_HH	include/hpp/core/random-shortcut.hh	20;"	d
HPP_CORE_REEDS_SHEPP_PATH_HH	include/hpp/core/reeds-shepp-path.hh	20;"	d
HPP_CORE_RELATIVE_MOTION_HH	include/hpp/core/relative-motion.hh	20;"	d
HPP_CORE_ROADMAP_HH	include/hpp/core/roadmap.hh	20;"	d
HPP_CORE_SRC_IMPLICIT_FUNCTION_HH	src/implicit-function.hh	18;"	d
HPP_CORE_SRC_TIMES_FRAME_FUNCTION_HH	src/times-frame-function.hh	18;"	d
HPP_CORE_STEERING_METHOD_CAR_LIKE_HH	include/hpp/core/steering-method/car-like.hh	20;"	d
HPP_CORE_STEERING_METHOD_CONSTANT_CURVATURE_HH	include/hpp/core/steering-method/constant-curvature.hh	20;"	d
HPP_CORE_STEERING_METHOD_DUBINS_HH	include/hpp/core/steering-method/dubins.hh	20;"	d
HPP_CORE_STEERING_METHOD_FWD_HH	include/hpp/core/steering-method/fwd.hh	20;"	d
HPP_CORE_STEERING_METHOD_HERMITE_HH	include/hpp/core/steering-method/hermite.hh	19;"	d
HPP_CORE_STEERING_METHOD_HH	include/hpp/core/steering-method.hh	20;"	d
HPP_CORE_STEERING_METHOD_INTERPOLATED_HH	include/hpp/core/steering-method/interpolated-steering-method.hh	19;"	d
HPP_CORE_STEERING_METHOD_REEDS_SHEPP_HH	include/hpp/core/steering-method/reeds-shepp.hh	20;"	d
HPP_CORE_STEERING_METHOD_SNIBUD_HH	include/hpp/core/steering-method/snibud.hh	20;"	d
HPP_CORE_STEERING_METHOD_SPLINE_HH	include/hpp/core/steering-method/spline.hh	20;"	d
HPP_CORE_STEERING_METHOD_STRAIGHT_DEPRECATED_HH	include/hpp/core/steering-method-straight.hh	20;"	d
HPP_CORE_STEERING_METHOD_STRAIGHT_HH	include/hpp/core/steering-method/straight.hh	20;"	d
HPP_CORE_STRAIGHT_PATH_HH	include/hpp/core/straight-path.hh	20;"	d
HPP_CORE_TIME_PARAMETERIZATION_HH	include/hpp/core/time-parameterization.hh	18;"	d
HPP_CORE_TIME_PARAMETERIZATION_POLYNOMIAL_HH	include/hpp/core/time-parameterization/polynomial.hh	18;"	d
HPP_CORE_VALIDATION_REPORT_HH	include/hpp/core/validation-report.hh	20;"	d
HPP_CORE_VISIBILITY_PRM_PLANNER_HH	include/hpp/core/visibility-prm-planner.hh	20;"	d
HPP_CORE_WEIGHED_DISTANCE_HH	include/hpp/core/weighed-distance.hh	20;"	d
H_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable matrix_t H_, Hinverse_, J_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
HalfJointJacobian_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::HalfJointJacobian_t HalfJointJacobian_t;$/;"	t	namespace:hpp::core
Hermite	include/hpp/core/path-projector/recursive-hermite.hh	/^          typedef hpp::core::path::Hermite Hermite;$/;"	t	class:hpp::core::pathProjector::RecursiveHermite
Hermite	include/hpp/core/path/hermite.hh	/^      class HPP_CORE_DLLAPI Hermite : public Spline<BernsteinBasis, 3>$/;"	c	namespace:hpp::core::path
Hermite	include/hpp/core/steering-method/hermite.hh	/^          Hermite (const Hermite& other) :$/;"	f	class:hpp::core::steeringMethod::Hermite
Hermite	include/hpp/core/steering-method/hermite.hh	/^          Hermite (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::Hermite
Hermite	include/hpp/core/steering-method/hermite.hh	/^      class HPP_CORE_DLLAPI Hermite : public SteeringMethod$/;"	c	namespace:hpp::core::steeringMethod
Hermite	src/path/hermite.cc	/^      Hermite::Hermite (const DevicePtr_t& device,$/;"	f	class:hpp::core::path::Hermite
Hermite	src/path/hermite.cc	/^      Hermite::Hermite (const Hermite& path) :$/;"	f	class:hpp::core::path::Hermite
Hermite	src/path/hermite.cc	/^      Hermite::Hermite (const Hermite& path,$/;"	f	class:hpp::core::path::Hermite
HermiteConstPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <const Hermite> HermiteConstPtr_t;$/;"	t	namespace:hpp::core::path
HermitePtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Hermite> HermitePtr_t;$/;"	t	namespace:hpp::core::path
HermitePtr_t	include/hpp/core/path-projector/recursive-hermite.hh	/^          typedef hpp::core::path::HermitePtr_t HermitePtr_t;$/;"	t	class:hpp::core::pathProjector::RecursiveHermite
HermitePtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <Hermite> HermitePtr_t;$/;"	t	namespace:hpp::core::steeringMethod
Hinverse_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable matrix_t H_, Hinverse_, J_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
HybridSolver	include/hpp/core/config-projector.hh	/^    typedef constraints::HybridSolver HybridSolver;$/;"	t	namespace:hpp::core
Hz_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable matrix_t Hz_, gz_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
IdSequence	include/hpp/core/parser/roadmap-factory.hh	/^      typedef hpp::util::parser::SequenceFactory<unsigned int> IdSequence;$/;"	t	namespace:hpp::core::parser
IdentityData	src/implicit-function.hh	/^        IdentityData (const DifferentiableFunctionPtr_t&) {}$/;"	f	struct:hpp::core::ImplicitFunction::IdentityData
IdentityData	src/implicit-function.hh	/^      struct IdentityData {$/;"	s	class:hpp::core::ImplicitFunction
ImplicitFunction	src/implicit-function.hh	/^      ImplicitFunction (const DevicePtr_t& robot,$/;"	f	class:hpp::core::ImplicitFunction
ImplicitFunction	src/implicit-function.hh	/^    class ImplicitFunction : public DifferentiableFunction$/;"	c	namespace:hpp::core
Indices_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef std::vector <size_type> Indices_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
IntegralCoeffs_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Matrix<value_type, NbCoeffs, NbCoeffs> IntegralCoeffs_t;$/;"	t	struct:hpp::core::path::internal::sbf_traits
IntegralCoeffs_t	src/path/spline.cc	/^          typedef Eigen::Matrix<value_type, NbCoeffs, NbCoeffs> IntegralCoeffs_t;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
IntegralCoeffs_t	src/path/spline.cc	/^          typedef typename traits::IntegralCoeffs_t IntegralCoeffs_t;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
Interpolated	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          Interpolated (const DevicePtr_t& device) :$/;"	f	class:hpp::core::steeringMethod::Interpolated
Interpolated	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          Interpolated (const DevicePtr_t& device,$/;"	f	class:hpp::core::steeringMethod::Interpolated
Interpolated	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          Interpolated (const Interpolated& other) :$/;"	f	class:hpp::core::steeringMethod::Interpolated
Interpolated	include/hpp/core/steering-method/interpolated-steering-method.hh	/^      class HPP_CORE_DLLAPI Interpolated : public SteeringMethod$/;"	c	namespace:hpp::core::steeringMethod
InterpolatedPath	include/hpp/core/interpolated-path.hh	/^    class HPP_CORE_DLLAPI InterpolatedPath : public Path$/;"	c	namespace:hpp::core
InterpolatedPath	src/interpolated-path.cc	/^    InterpolatedPath::InterpolatedPath (const DevicePtr_t& device,$/;"	f	class:hpp::core::InterpolatedPath
InterpolatedPath	src/interpolated-path.cc	/^    InterpolatedPath::InterpolatedPath (const InterpolatedPath& path) :$/;"	f	class:hpp::core::InterpolatedPath
InterpolatedPath	src/interpolated-path.cc	/^    InterpolatedPath::InterpolatedPath (const InterpolatedPath& path,$/;"	f	class:hpp::core::InterpolatedPath
InterpolatedPath	src/interpolated-path.cc	/^    InterpolatedPath::InterpolatedPath (const PathPtr_t& path,$/;"	f	class:hpp::core::InterpolatedPath
InterpolatedPathConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const InterpolatedPath> InterpolatedPathConstPtr_t;$/;"	t	namespace:hpp::core
InterpolatedPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <InterpolatedPath> InterpolatedPathPtr_t;$/;"	t	namespace:hpp::core
InterpolatedPtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <Interpolated> InterpolatedPtr_t;$/;"	t	namespace:hpp::core::steeringMethod
InterpolationPoint_t	include/hpp/core/interpolated-path.hh	/^      typedef std::pair <value_type, Configuration_t> InterpolationPoint_t;$/;"	t	class:hpp::core::InterpolatedPath
InterpolationPoints_t	include/hpp/core/interpolated-path.hh	/^        Eigen::aligned_allocator <InterpolationPoint_t> > InterpolationPoints_t;$/;"	t	class:hpp::core::InterpolatedPath
Intervals	src/continuous-collision-checking/intervals.hh	/^      class Intervals$/;"	c	namespace:hpp::core::continuousCollisionChecking
J	include/hpp/core/path-optimization/linear-constraint.hh	/^        matrix_t J;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
J	src/path-optimization/spline-gradient-based-constraint.cc	/^          mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
J	src/path-optimization/spline-gradient-based.cc	/^        mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
J	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
J2_parent_minus_J1_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable matrix_t tmpJac_, J2_parent_minus_J1_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
J_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable matrix_t H_, Hinverse_, J_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
J_	src/path-optimization/collision-constraints-result.hh	/^	matrix_t J_;$/;"	m	class:hpp::core::pathOptimization::CollisionConstraint
J_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	matrix_t J_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
Jac	include/hpp/core/time-parameterization/polynomial.hh	/^          value_type Jac (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Polynomial
Jacobi_t	include/hpp/core/path-optimization/gradient-based.hh	/^	typedef Eigen::JacobiSVD < matrix_t > Jacobi_t;$/;"	t	class:hpp::core::pathOptimization::GradientBased
JacobianVisitor	src/implicit-function.hh	/^      JacobianVisitor (vectorIn_t qOut, vectorIn_t f_qIn,$/;"	f	struct:hpp::core::JacobianVisitor
JacobianVisitor	src/implicit-function.hh	/^    struct JacobianVisitor : public boost::static_visitor <>$/;"	s	namespace:hpp::core
JacobianVisitorImpl	src/implicit-function.hh	/^    template <bool GisIdentity, typename LgT> struct JacobianVisitorImpl$/;"	s	namespace:hpp::core
JacobianVisitorImpl	src/implicit-function.hh	/^    template <bool GisIdentity> struct JacobianVisitorImpl <GisIdentity, R3xSO3>$/;"	s	namespace:hpp::core
JacobianVisitorImpl	src/implicit-function.hh	/^    template <bool GisIdentity> struct JacobianVisitorImpl <GisIdentity, SE3>$/;"	s	namespace:hpp::core
Jcompressed_	src/path-optimization/collision-constraints-result.hh	/^	mutable matrix_t Jcompressed_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
Jconstraint_	src/path-optimization/collision-constraints-result.hh	/^	mutable matrix_t Jconstraint_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
Jf_	src/implicit-function.hh	/^      matrixIn_t Jg_, Jf_;$/;"	m	struct:hpp::core::JacobianVisitor
Jf_	src/implicit-function.hh	/^      mutable matrix_t Jf_;$/;"	m	class:hpp::core::ImplicitFunction
Jg_	src/implicit-function.hh	/^        mutable matrix_t Jg_;$/;"	m	struct:hpp::core::ImplicitFunction::GenericGData
Jg_	src/implicit-function.hh	/^        mutable matrix_t Jg_;$/;"	m	struct:hpp::core::ImplicitFunction::IdentityData
Jg_	src/implicit-function.hh	/^      matrixIn_t Jg_, Jf_;$/;"	m	struct:hpp::core::JacobianVisitor
Joint	include/hpp/core/fwd.hh	/^    typedef pinocchio::Joint Joint;$/;"	t	namespace:hpp::core
JointAndShape_t	include/hpp/core/fwd.hh	/^    typedef std::pair <JointPtr_t, Shape_t> JointAndShape_t;$/;"	t	namespace:hpp::core
JointAndShapes_t	include/hpp/core/fwd.hh	/^    typedef std::list <JointAndShape_t> JointAndShapes_t;$/;"	t	namespace:hpp::core
JointBoundConstraintAlgo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      struct JointBoundConstraintAlgo {};$/;"	s	namespace:hpp::core::pathOptimization
JointBoundConstraintAlgo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      struct JointBoundConstraintAlgo<CartesianProductOperation <LieGroup1, LieGroup2> >$/;"	s	namespace:hpp::core::pathOptimization
JointBoundConstraintAlgo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      struct JointBoundConstraintAlgo<SpecialOrthogonalOperation<N> >$/;"	s	namespace:hpp::core::pathOptimization
JointBoundConstraintAlgo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      struct JointBoundConstraintAlgo<VectorSpaceOperation<Size, rot> >$/;"	s	namespace:hpp::core::pathOptimization
JointBoundConstraintStep	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      struct JointBoundConstraintStep : public se3::fusion::JointModelVisitor<JointBoundConstraintStep>$/;"	s	namespace:hpp::core::pathOptimization
JointBoundValidation	include/hpp/core/joint-bound-validation.hh	/^    class HPP_CORE_DLLAPI JointBoundValidation : public ConfigValidation$/;"	c	namespace:hpp::core
JointBoundValidation	src/joint-bound-validation.cc	/^    JointBoundValidation::JointBoundValidation (const DevicePtr_t& robot) :$/;"	f	class:hpp::core::JointBoundValidation
JointBoundValidationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <JointBoundValidation> JointBoundValidationPtr_t;$/;"	t	namespace:hpp::core
JointBoundValidationReport	include/hpp/core/joint-bound-validation.hh	/^      JointBoundValidationReport (const JointConstPtr_t& joint, size_type rank,$/;"	f	class:hpp::core::JointBoundValidationReport
JointBoundValidationReport	include/hpp/core/joint-bound-validation.hh	/^    class HPP_CORE_DLLAPI JointBoundValidationReport : public ValidationReport$/;"	c	namespace:hpp::core
JointBoundValidationReportPtr_t	include/hpp/core/fwd.hh	/^    JointBoundValidationReportPtr_t;$/;"	t	namespace:hpp::core
JointConfigurationPtr_t	src/joint-bound-validation.cc	/^    typedef pinocchio::JointConfiguration* JointConfigurationPtr_t;$/;"	t	namespace:hpp::core	file:
JointConstPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::JointConstPtr_t JointConstPtr_t;$/;"	t	namespace:hpp::core
JointIndex	src/continuous-collision-checking/body-pair-collision.hh	/^	typedef se3::JointIndex JointIndex;$/;"	t	class:hpp::core::continuousCollisionChecking::BodyPairCollision
JointIndexPairCompare_t	src/continuous-collision-checking.cc	/^      struct JointIndexPairCompare_t {$/;"	s	namespace:hpp::core::__anon7	file:
JointIndexPairCompare_t	src/continuous-collision-checking/progressive.cc	/^        struct JointIndexPairCompare_t {$/;"	s	namespace:hpp::core::continuousCollisionChecking::__anon18	file:
JointIndexPairSet_t	src/continuous-collision-checking/progressive.cc	/^        typedef std::set<JointIndexPair_t, JointIndexPairCompare_t> JointIndexPairSet_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking::__anon18	file:
JointIndexPair_t	src/continuous-collision-checking.cc	/^      typedef std::pair<se3::JointIndex, se3::JointIndex> JointIndexPair_t;$/;"	t	namespace:hpp::core::__anon7	file:
JointIndexPair_t	src/continuous-collision-checking/progressive.cc	/^        typedef std::pair<se3::JointIndex, se3::JointIndex> JointIndexPair_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking::__anon18	file:
JointJacobian_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::JointJacobian_t JointJacobian_t;$/;"	t	namespace:hpp::core
JointPtr_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::JointPtr_t JointPtr_t;$/;"	t	namespace:hpp::core
JointStdVector_t	include/hpp/core/path-optimization/partial-shortcut.hh	/^    typedef std::vector <JointConstPtr_t> JointStdVector_t;$/;"	t	namespace:hpp::core::pathOptimization
JointVector_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::JointVector_t JointVector_t;$/;"	t	namespace:hpp::core
Js	src/path-optimization/spline-gradient-based-constraint.cc	/^          mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
Js	src/path-optimization/spline-gradient-based.cc	/^        mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
Js	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        mutable matrix_t J, Js;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
KDTree	src/nearest-neighbor/k-d-tree.cc	/^    KDTree::KDTree (const DevicePtr_t& robot, const DistancePtr_t& distance,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
KDTree	src/nearest-neighbor/k-d-tree.cc	/^    KDTree::KDTree (const KDTreePtr_t mother, size_type splitDim) :$/;"	f	class:hpp::core::nearestNeighbor::KDTree
KDTree	src/nearest-neighbor/k-d-tree.hh	/^    class KDTree : public NearestNeighbor$/;"	c	namespace:hpp::core::nearestNeighbor
KDTreePtr_t	include/hpp/core/fwd.hh	/^      typedef KDTree* KDTreePtr_t;$/;"	t	namespace:hpp::core::nearestNeighbor
KDTreePtr_t	include/hpp/core/fwd.hh	/^    typedef KDTree* KDTreePtr_t;$/;"	t	namespace:hpp::core
KnearestSearch	src/nearest-neighbor/basic.cc	/^      Nodes_t Basic::KnearestSearch (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::nearestNeighbor::Basic
KnearestSearch	src/nearest-neighbor/basic.cc	/^      Nodes_t Basic::KnearestSearch (const NodePtr_t& node,$/;"	f	class:hpp::core::nearestNeighbor::Basic
KnearestSearch	src/nearest-neighbor/k-d-tree.cc	/^    Nodes_t KDTree::KnearestSearch (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
KnearestSearch	src/nearest-neighbor/k-d-tree.cc	/^    Nodes_t KDTree::KnearestSearch (const ConfigurationPtr_t&,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
KnearestSearch	src/nearest-neighbor/k-d-tree.cc	/^    Nodes_t KDTree::KnearestSearch (const NodePtr_t&,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
L	include/hpp/core/dubins-path.hh	/^        value_type L, R, S; \/\/ Left, Right and Straight turn$/;"	m	struct:hpp::core::DubinsPath::Wheels_t
LLT_t	include/hpp/core/path-optimization/quadratic-program.hh	/^        typedef Eigen::LLT <matrix_t, Eigen::Lower> LLT_t;$/;"	t	struct:hpp::core::pathOptimization::QuadraticProgram
LLT_t	src/path-optimization/spline-gradient-based-constraint.cc	/^          typedef Eigen::LLT <matrix_t, Eigen::Lower> LLT_t;$/;"	t	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
LLT_t	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        typedef Eigen::LLT <matrix_t, Eigen::Lower> LLT_t;$/;"	t	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
LRL	src/dubins.hh	29;"	d
LSL	src/dubins.hh	24;"	d
LSR	src/dubins.hh	25;"	d
L_SEG	src/dubins.hh	32;"	d
Lengths_t	include/hpp/core/dubins-path.hh	/^      typedef Eigen::Matrix<value_type, 3, 1> Lengths_t;$/;"	t	class:hpp::core::DubinsPath
Lengths_t	include/hpp/core/path-projector/global.hh	/^          typedef std::list <value_type> Lengths_t;$/;"	t	class:hpp::core::pathProjector::Global
Lengths_t	include/hpp/core/reeds-shepp-path.hh	/^      typedef Eigen::Matrix<value_type, 5, 1> Lengths_t;$/;"	t	class:hpp::core::ReedsSheppPath
LiegroupElement	include/hpp/core/fwd.hh	/^    typedef constraints::LiegroupElement LiegroupElement;$/;"	t	namespace:hpp::core
LiegroupSpace	include/hpp/core/fwd.hh	/^    typedef constraints::LiegroupSpace LiegroupSpace;$/;"	t	namespace:hpp::core
LiegroupSpacePtr_t	include/hpp/core/fwd.hh	/^    typedef constraints::LiegroupSpacePtr_t LiegroupSpacePtr_t;$/;"	t	namespace:hpp::core
LiegroupType	src/implicit-function.hh	/^    typedef hpp::pinocchio::LiegroupType LiegroupType;$/;"	t	namespace:hpp::core
LineSearchType	include/hpp/core/config-projector.hh	/^      enum LineSearchType {$/;"	g	class:hpp::core::ConfigProjector
LineSearch_t	include/hpp/core/path-projector/global.hh	/^          typedef constraints::lineSearch::FixedSequence LineSearch_t;$/;"	t	class:hpp::core::pathProjector::Global
LinearConstraint	include/hpp/core/path-optimization/linear-constraint.hh	/^        LinearConstraint (size_type inputSize, size_type outputSize) :$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
LinearConstraint	include/hpp/core/path-optimization/linear-constraint.hh	/^      struct LinearConstraint$/;"	s	namespace:hpp::core::pathOptimization
LockedJoint	include/hpp/core/locked-joint.hh	/^    class HPP_CORE_DLLAPI LockedJoint : public ExplicitNumericalConstraint$/;"	c	namespace:hpp::core
LockedJoint	src/locked-joint.cc	/^    LockedJoint::LockedJoint (const DevicePtr_t& dev, const size_type index,$/;"	f	class:hpp::core::LockedJoint
LockedJoint	src/locked-joint.cc	/^    LockedJoint::LockedJoint (const JointPtr_t& joint, const size_type index,$/;"	f	class:hpp::core::LockedJoint
LockedJoint	src/locked-joint.cc	/^    LockedJoint::LockedJoint (const JointPtr_t& joint,$/;"	f	class:hpp::core::LockedJoint
LockedJoint	src/locked-joint.cc	/^    LockedJoint::LockedJoint (const LockedJoint& other) :$/;"	f	class:hpp::core::LockedJoint
LockedJointConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const LockedJoint> LockedJointConstPtr_t;$/;"	t	namespace:hpp::core
LockedJointPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <LockedJoint> LockedJointPtr_t;$/;"	t	namespace:hpp::core
LockedJoints_t	include/hpp/core/fwd.hh	/^    typedef std::list <LockedJointPtr_t> LockedJoints_t;$/;"	t	namespace:hpp::core
LpRmL	src/reeds-shepp-path.cc	/^    inline bool LpRmL(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpRmSLmRp	src/reeds-shepp-path.cc	/^    inline bool LpRmSLmRp(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpRmSmLm	src/reeds-shepp-path.cc	/^    inline bool LpRmSmLm(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpRmSmRm	src/reeds-shepp-path.cc	/^    inline bool LpRmSmRm(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpRumLumRp	src/reeds-shepp-path.cc	/^    inline bool LpRumLumRp(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpRupLumRm	src/reeds-shepp-path.cc	/^    inline bool LpRupLumRm(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpSpLp	src/reeds-shepp-path.cc	/^    inline bool LpSpLp(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
LpSpRp	src/reeds-shepp-path.cc	/^    inline bool LpSpRp(const vector2_t& xy, const vector2_t& csPhi, const value_type& phi, value_type &t, value_type &u, value_type &v)$/;"	f	namespace:hpp::core
M_	include/hpp/core/path-projector/recursive-hermite.hh	/^          value_type M_, beta_;$/;"	m	class:hpp::core::pathProjector::RecursiveHermite
Map_t	include/hpp/core/container.hh	/^      typedef std::map <Key, Types> Map_t;$/;"	t	struct:hpp::core::Container
NbCoeffs	include/hpp/core/path/spline.hh	/^            NbCoeffs = _Order + 1,$/;"	e	enum:hpp::core::path::Spline::__anon5
NbCoeffs	include/hpp/core/path/spline.hh	/^          enum { NbCoeffs = Degree + 1 };$/;"	e	enum:hpp::core::path::internal::sbf_traits::__anon4
NbCoeffs	src/path/spline.cc	/^          enum { NbCoeffs = Degree + 1 };$/;"	e	enum:hpp::core::path::internal::spline_basis_function::__anon15	file:
NbCoeffs	src/path/spline.cc	/^          enum { NbCoeffs = traits::NbCoeffs };$/;"	e	enum:hpp::core::path::internal::spline_basis_function::__anon14	file:
NbPowerOfT	include/hpp/core/path/spline.hh	/^            NbPowerOfT = 2 * NbCoeffs + 1$/;"	e	enum:hpp::core::path::Spline::__anon5
NearestNeighbor	include/hpp/core/nearest-neighbor.hh	/^    class NearestNeighbor$/;"	c	namespace:hpp::core
NearestNeighborPtr_t	include/hpp/core/fwd.hh	/^    typedef NearestNeighbor* NearestNeighborPtr_t;$/;"	t	namespace:hpp::core
Niter	include/hpp/core/path-projector/global.hh	/^            std::size_t Niter;$/;"	m	struct:hpp::core::pathProjector::Global::Data
Node	include/hpp/core/node.hh	/^    class HPP_CORE_DLLAPI Node {$/;"	c	namespace:hpp::core
Node	src/node.cc	/^    Node::Node (const ConfigurationPtr_t& configuration) :$/;"	f	class:hpp::core::Node
Node	src/node.cc	/^    Node::Node (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::Node
NodePtr_t	include/hpp/core/fwd.hh	/^    typedef Node* NodePtr_t;$/;"	t	namespace:hpp::core
NodeVector_t	include/hpp/core/fwd.hh	/^    typedef std::vector <NodePtr_t> NodeVector_t;$/;"	t	namespace:hpp::core
NodesMap_t	src/nearest-neighbor/k-d-tree.hh	/^      typedef std::map <ConnectedComponentPtr_t, Nodes_t> NodesMap_t;$/;"	t	class:hpp::core::nearestNeighbor::KDTree
Nodes_t	include/hpp/core/fwd.hh	/^    typedef std::list <NodePtr_t> Nodes_t;$/;"	t	namespace:hpp::core
Nodes_t	include/hpp/core/parser/roadmap-factory.hh	/^          typedef std::vector <NodePtr_t> Nodes_t;$/;"	t	class:hpp::core::parser::RoadmapFactory
Nodes_t	src/astar.hh	/^      typedef std::list < NodePtr_t > Nodes_t;$/;"	t	class:hpp::core::Astar
NonePathProjector	src/problem-solver.cc	/^    struct NonePathProjector$/;"	s	namespace:hpp::core	file:
NumTraits	include/hpp/core/relative-motion.hh	/^  template<> struct NumTraits<hpp::core::RelativeMotion::RelativeMotionType>$/;"	s	namespace:Eigen
NumericalConstraint	include/hpp/core/numerical-constraint.hh	/^    class HPP_CORE_DLLAPI NumericalConstraint : public Equation {$/;"	c	namespace:hpp::core
NumericalConstraint	src/numerical-constraint.cc	/^    NumericalConstraint::NumericalConstraint (const DifferentiableFunctionPtr_t& function,$/;"	f	class:hpp::core::NumericalConstraint
NumericalConstraint	src/numerical-constraint.cc	/^    NumericalConstraint::NumericalConstraint (const NumericalConstraint& other):$/;"	f	class:hpp::core::NumericalConstraint
NumericalConstraintMap_t	include/hpp/core/fwd.hh	/^    NumericalConstraintMap_t;$/;"	t	namespace:hpp::core
NumericalConstraintPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <NumericalConstraint> NumericalConstraintPtr_t;$/;"	t	namespace:hpp::core
NumericalConstraints_t	include/hpp/core/fwd.hh	/^    typedef std::vector < NumericalConstraintPtr_t > NumericalConstraints_t;$/;"	t	namespace:hpp::core
ObjectStdVector_t	include/hpp/core/fwd.hh	/^    typedef std::vector<CollisionObjectPtr_t> ObjectStdVector_t;$/;"	t	namespace:hpp::core
ObjectVector_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::ObjectVector_t ObjectVector_t;$/;"	t	namespace:hpp::core
Optimizer	include/hpp/core/path-optimization/config-optimization.hh	/^          struct Optimizer {$/;"	s	class:hpp::core::pathOptimization::ConfigOptimization
Optimizers_t	include/hpp/core/path-optimization/config-optimization.hh	/^          typedef std::vector <Optimizer> Optimizers_t;$/;"	t	class:hpp::core::pathOptimization::ConfigOptimization
Optimizers_t	include/hpp/core/plan-and-optimize.hh	/^      typedef std::vector <PathOptimizerPtr_t> Optimizers_t;$/;"	t	class:hpp::core::PlanAndOptimize
Order	include/hpp/core/path/spline.hh	/^            Order = _Order,$/;"	e	enum:hpp::core::path::Spline::__anon5
PACK_OUTPUTS	src/dubins.hh	60;"	d
PK	include/hpp/core/path-optimization/linear-constraint.hh	/^        matrix_t PK;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
ParameterMatrix_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Matrix<value_type, NbCoeffs, Eigen::Dynamic, Eigen::RowMajor> ParameterMatrix_t;$/;"	t	class:hpp::core::path::Spline
ParameterVector_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Map<      vector_t, Eigen::Aligned>      ParameterVector_t;$/;"	t	class:hpp::core::path::Spline
Parameterized	include/hpp/core/relative-motion.hh	/^        Parameterized,$/;"	e	enum:hpp::core::RelativeMotion::RelativeMotionType
Parameters	include/hpp/core/path-optimization/config-optimization.hh	/^          struct Parameters {$/;"	s	class:hpp::core::pathOptimization::ConfigOptimization
Parameters	include/hpp/core/path-optimization/partial-shortcut.hh	/^          struct Parameters {$/;"	s	class:hpp::core::pathOptimization::PartialShortcut
Parameters	src/path-optimization/config-optimization.cc	/^      ConfigOptimization::Parameters::Parameters () :$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization::Parameters
Parameters	src/path-optimization/partial-shortcut.cc	/^      PartialShortcut::Parameters::Parameters () :$/;"	f	class:hpp::core::pathOptimization::PartialShortcut::Parameters
Parent_t	include/hpp/core/parser/roadmap-factory.hh	/^          typedef ::hpp::util::parser::ObjectFactory Parent_t;$/;"	t	class:hpp::core::parser::RoadmapFactory
Parent_t	include/hpp/core/path-planner/k-prm-star.hh	/^        typedef PathPlanner Parent_t;$/;"	t	class:hpp::core::pathPlanner::kPrmStar
Parent_t	src/astar.hh	/^      typedef std::map <NodePtr_t, EdgePtr_t> Parent_t;$/;"	t	class:hpp::core::Astar
PartialShortcut	include/hpp/core/path-optimization/partial-shortcut.hh	/^      class HPP_CORE_DLLAPI PartialShortcut : public PathOptimizer$/;"	c	namespace:hpp::core::pathOptimization
PartialShortcut	src/path-optimization/partial-shortcut.cc	/^      PartialShortcut::PartialShortcut (const Problem& problem) :$/;"	f	class:hpp::core::pathOptimization::PartialShortcut
PartialShortcutPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <PartialShortcut> PartialShortcutPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
PartialShortcutTraits	include/hpp/core/path-optimization/partial-shortcut.hh	/^      struct PartialShortcutTraits {$/;"	s	namespace:hpp::core::pathOptimization
Path	include/hpp/core/path-projector.hh	/^        typedef hpp::core::Path Path;$/;"	t	class:hpp::core::PathProjector
Path	include/hpp/core/path.hh	/^    class HPP_CORE_DLLAPI Path$/;"	c	namespace:hpp::core
Path	src/path.cc	/^    Path::Path (const Path& path) :$/;"	f	class:hpp::core::Path
Path	src/path.cc	/^    Path::Path (const Path& path, const ConstraintSetPtr_t& constraints) :$/;"	f	class:hpp::core::Path
Path	src/path.cc	/^    Path::Path (const interval_t& interval, size_type outputSize,$/;"	f	class:hpp::core::Path
PathConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const Path> PathConstPtr_t;$/;"	t	namespace:hpp::core
PathLength	include/hpp/core/path-optimization/path-length.hh	/^      class HPP_CORE_DLLAPI PathLength : public Cost$/;"	c	namespace:hpp::core::pathOptimization
PathLength	src/path-optimization/path-length.cc	/^      PathLength::PathLength (const WeighedDistancePtr_t& distance,$/;"	f	class:hpp::core::pathOptimization::PathLength
PathLength	src/random-shortcut.cc	/^    template <bool reEstimateLength = false> struct PathLength {$/;"	s	namespace:hpp::core	file:
PathLengthPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <PathLength> PathLengthPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
PathOptimizer	include/hpp/core/path-optimizer.hh	/^      PathOptimizer (const Problem& problem) :$/;"	f	class:hpp::core::PathOptimizer
PathOptimizer	include/hpp/core/path-optimizer.hh	/^    class HPP_CORE_DLLAPI PathOptimizer$/;"	c	namespace:hpp::core
PathOptimizerBuilder_t	include/hpp/core/problem-solver.hh	/^      PathOptimizerBuilder_t;$/;"	t	namespace:hpp::core
PathOptimizerPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathOptimizer> PathOptimizerPtr_t;$/;"	t	namespace:hpp::core
PathOptimizerTypes_t	include/hpp/core/problem-solver.hh	/^      typedef std::vector <std::string> PathOptimizerTypes_t;$/;"	t	class:hpp::core::ProblemSolver
PathOptimizers_t	include/hpp/core/problem-solver.hh	/^      typedef std::vector <PathOptimizerPtr_t> PathOptimizers_t;$/;"	t	class:hpp::core::ProblemSolver
PathPlanner	include/hpp/core/path-planner.hh	/^    class HPP_CORE_DLLAPI PathPlanner {$/;"	c	namespace:hpp::core
PathPlanner	src/path-planner.cc	/^    PathPlanner::PathPlanner (const Problem& problem) :$/;"	f	class:hpp::core::PathPlanner
PathPlanner	src/path-planner.cc	/^    PathPlanner::PathPlanner (const Problem& problem,$/;"	f	class:hpp::core::PathPlanner
PathPlannerBuilder_t	include/hpp/core/problem-solver.hh	/^      PathPlannerBuilder_t;$/;"	t	namespace:hpp::core
PathPlannerPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathPlanner> PathPlannerPtr_t;$/;"	t	namespace:hpp::core
PathProjector	include/hpp/core/path-projector.hh	/^    class HPP_CORE_DLLAPI PathProjector$/;"	c	namespace:hpp::core
PathProjector	src/path-projector.cc	/^    PathProjector::PathProjector (const DistancePtr_t& distance,$/;"	f	class:hpp::core::PathProjector
PathProjectorBuilder_t	include/hpp/core/problem-solver.hh	/^      PathProjectorBuilder_t;$/;"	t	namespace:hpp::core
PathProjectorPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathProjector> PathProjectorPtr_t;$/;"	t	namespace:hpp::core
PathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <Path> PathPtr_t;$/;"	t	namespace:hpp::core
PathPtr_t	include/hpp/core/path-projector.hh	/^        typedef hpp::core::PathPtr_t PathPtr_t;$/;"	t	class:hpp::core::PathProjector
PathValidation	include/hpp/core/path-validation.hh	/^      PathValidation ()$/;"	f	class:hpp::core::PathValidation
PathValidation	include/hpp/core/path-validation.hh	/^    class HPP_CORE_DLLAPI PathValidation$/;"	c	namespace:hpp::core
PathValidationBuilder_t	include/hpp/core/problem-solver.hh	/^      PathValidationBuilder_t;$/;"	t	namespace:hpp::core
PathValidationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathValidation> PathValidationPtr_t;$/;"	t	namespace:hpp::core
PathValidationReport	include/hpp/core/path-validation-report.hh	/^			PathValidationReport()$/;"	f	struct:hpp::core::PathValidationReport
PathValidationReport	include/hpp/core/path-validation-report.hh	/^      PathValidationReport (const value_type& param,$/;"	f	struct:hpp::core::PathValidationReport
PathValidationReport	include/hpp/core/path-validation-report.hh	/^    struct HPP_CORE_DLLAPI PathValidationReport :$/;"	s	namespace:hpp::core
PathValidationReportPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathValidationReport> PathValidationReportPtr_t;$/;"	t	namespace:hpp::core
PathValidations	include/hpp/core/path-validations.hh	/^    class HPP_CORE_DLLAPI PathValidations : public PathValidation$/;"	c	namespace:hpp::core
PathValidations	src/path-validations.cc	/^    PathValidations::PathValidations () : validations_ ()$/;"	f	class:hpp::core::PathValidations
PathValidationsPtr_t	include/hpp/core/fwd.hh	/^    PathValidationsPtr_t;$/;"	t	namespace:hpp::core
PathVector	include/hpp/core/path-projector.hh	/^        typedef hpp::core::PathVector PathVector;$/;"	t	class:hpp::core::PathProjector
PathVector	include/hpp/core/path-vector.hh	/^      PathVector (const PathVector& path) : parent_t (path),$/;"	f	class:hpp::core::PathVector
PathVector	include/hpp/core/path-vector.hh	/^      PathVector (const PathVector& path,$/;"	f	class:hpp::core::PathVector
PathVector	include/hpp/core/path-vector.hh	/^      PathVector (std::size_t outputSize, std::size_t outputDerivativeSize) :$/;"	f	class:hpp::core::PathVector
PathVector	include/hpp/core/path-vector.hh	/^    class HPP_CORE_DLLAPI PathVector : public Path$/;"	c	namespace:hpp::core
PathVectorConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const PathVector> PathVectorConstPtr_t;$/;"	t	namespace:hpp::core
PathVectorPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PathVector> PathVectorPtr_t;$/;"	t	namespace:hpp::core
PathVectorPtr_t	include/hpp/core/path-projector.hh	/^        typedef hpp::core::PathVectorPtr_t PathVectorPtr_t;$/;"	t	class:hpp::core::PathProjector
PathVectors_t	include/hpp/core/fwd.hh	/^    typedef std::vector <PathVectorPtr_t> PathVectors_t;$/;"	t	namespace:hpp::core
PathVelocity	src/continuous-collision-checking/path-velocity.hh	/^	PathVelocity (CoefficientVelocities_t const* coefs) :$/;"	f	struct:hpp::core::continuousCollisionChecking::PathVelocity
PathVelocity	src/continuous-collision-checking/path-velocity.hh	/^	PathVelocity (CoefficientVelocities_t const* coefs, PathPtr_t path) :$/;"	f	struct:hpp::core::continuousCollisionChecking::PathVelocity
PathVelocity	src/continuous-collision-checking/path-velocity.hh	/^      struct PathVelocity$/;"	s	namespace:hpp::core::continuousCollisionChecking
Paths_t	include/hpp/core/fwd.hh	/^    typedef std::vector <PathPtr_t> Paths_t;$/;"	t	namespace:hpp::core
PlanAndOptimize	include/hpp/core/plan-and-optimize.hh	/^    class HPP_CORE_DLLAPI PlanAndOptimize : public PathPlanner$/;"	c	namespace:hpp::core
PlanAndOptimize	src/plan-and-optimize.cc	/^    PlanAndOptimize::PlanAndOptimize (const PathPlannerPtr_t& pathPlanner) :$/;"	f	class:hpp::core::PlanAndOptimize
PlanAndOptimizePtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <PlanAndOptimize> PlanAndOptimizePtr_t;$/;"	t	namespace:hpp::core
PolynomeBasis	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            PolynomeBasis = _PolynomeBasis,$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBasedAbstract::__anon2
PolynomeBasis	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^            PolynomeBasis = _PolynomeBasis,$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBasedConstraint::__anon3
PolynomeBasis	include/hpp/core/path-optimization/spline-gradient-based.hh	/^            PolynomeBasis = _PolynomeBasis,$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBased::__anon1
PolynomeBasis	include/hpp/core/path/spline.hh	/^            PolynomeBasis = _PolynomeBasis,$/;"	e	enum:hpp::core::path::Spline::__anon5
PolynomeBasis	include/hpp/core/steering-method/spline.hh	/^            PolynomeBasis = _PolynomeBasis,$/;"	e	enum:hpp::core::steeringMethod::Spline::__anon6
PolynomeBasisType	include/hpp/core/path/spline.hh	/^      enum PolynomeBasisType {$/;"	g	namespace:hpp::core::path
Polynomial	include/hpp/core/time-parameterization/polynomial.hh	/^          Polynomial (const vector_t& param) : a (param) {}$/;"	f	class:hpp::core::timeParameterization::Polynomial
Polynomial	include/hpp/core/time-parameterization/polynomial.hh	/^      class HPP_CORE_DLLAPI Polynomial : public TimeParameterization$/;"	c	namespace:hpp::core::timeParameterization
PowersOfT_t	include/hpp/core/path/spline.hh	/^          typedef Eigen::Matrix<value_type, NbPowerOfT, 1> PowersOfT_t;$/;"	t	class:hpp::core::path::Spline
Problem	include/hpp/core/problem.hh	/^    class HPP_CORE_DLLAPI Problem$/;"	c	namespace:hpp::core
Problem	src/problem.cc	/^    Problem::Problem (DevicePtr_t robot) :$/;"	f	class:hpp::core::Problem
ProblemPtr_t	include/hpp/core/fwd.hh	/^    typedef Problem* ProblemPtr_t;$/;"	t	namespace:hpp::core
ProblemSolver	include/hpp/core/problem-solver.hh	/^    class HPP_CORE_DLLAPI ProblemSolver$/;"	c	namespace:hpp::core
ProblemSolver	src/problem-solver.cc	/^    ProblemSolver::ProblemSolver () :$/;"	f	class:hpp::core::ProblemSolver
ProblemSolverPtr_t	include/hpp/core/fwd.hh	/^    typedef ProblemSolver* ProblemSolverPtr_t;$/;"	t	namespace:hpp::core
ProblemTarget	include/hpp/core/problem-target.hh	/^      ProblemTarget (const ProblemPtr_t& problem)$/;"	f	class:hpp::core::ProblemTarget
ProblemTarget	include/hpp/core/problem-target.hh	/^    class HPP_CORE_DLLAPI ProblemTarget {$/;"	c	namespace:hpp::core
ProblemTargetPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ProblemTarget> ProblemTargetPtr_t;$/;"	t	namespace:hpp::core
Progressive	include/hpp/core/continuous-collision-checking/progressive.hh	/^      class HPP_CORE_DLLAPI Progressive : public ContinuousCollisionChecking$/;"	c	namespace:hpp::core::continuousCollisionChecking
Progressive	include/hpp/core/path-projector/progressive.hh	/^      class HPP_CORE_DLLAPI Progressive : public PathProjector$/;"	c	namespace:hpp::core::pathProjector
Progressive	src/continuous-collision-checking/progressive.cc	/^      Progressive::Progressive$/;"	f	class:hpp::core::continuousCollisionChecking::Progressive
Progressive	src/path-projector/progressive.cc	/^      Progressive::Progressive (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::Progressive
ProgressivePtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Progressive> ProgressivePtr_t;$/;"	t	namespace:hpp::core::continuousCollisionChecking
ProgressivePtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <Progressive> ProgressivePtr_t;$/;"	t	namespace:hpp::core::pathProjector
Ptr_t	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^          typedef boost::shared_ptr<SplineGradientBasedConstraint> Ptr_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
Ptr_t	include/hpp/core/path-optimization/spline-gradient-based.hh	/^          typedef boost::shared_ptr<SplineGradientBased> Ptr_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBased
Ptr_t	include/hpp/core/path/spline.hh	/^          typedef boost::shared_ptr<Spline> Ptr_t;$/;"	t	class:hpp::core::path::Spline
Ptr_t	include/hpp/core/steering-method/spline.hh	/^          typedef boost::shared_ptr<Spline> Ptr_t;$/;"	t	class:hpp::core::steeringMethod::Spline
Ptr_t	src/implicit-function.hh	/^      typedef boost::shared_ptr <ImplicitFunction> Ptr_t;$/;"	t	class:hpp::core::ImplicitFunction
Ptr_t	src/path.cc	/^          typedef boost::shared_ptr<Shift> Ptr_t;$/;"	t	class:hpp::core::timeParameterization::Shift	file:
QuadraticProblem	src/path-optimization/spline-gradient-based-constraint.cc	/^          QuadraticProblem (const QuadraticProblem& QP) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based-constraint.cc	/^          QuadraticProblem (const QuadraticProblem& QP, const LinearConstraint& lc) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based-constraint.cc	/^          QuadraticProblem (size_type inputSize) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based-constraint.cc	/^        struct SplineGradientBasedConstraint<_PB, _SO>::QuadraticProblem$/;"	s	class:hpp::core::pathOptimization::SplineGradientBasedConstraint	file:
QuadraticProblem	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        QuadraticProblem (const QuadraticProblem& QP) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        QuadraticProblem (const QuadraticProblem& QP, const LinearConstraint& lc) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        QuadraticProblem (size_type inputSize) :$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
QuadraticProblem	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      struct SplineGradientBased<_PB, _SO>::QuadraticProblem$/;"	s	class:hpp::core::pathOptimization::SplineGradientBased	file:
QuadraticProgram	include/hpp/core/path-optimization/quadratic-program.hh	/^        QuadraticProgram (const QuadraticProgram& QP) :$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
QuadraticProgram	include/hpp/core/path-optimization/quadratic-program.hh	/^        QuadraticProgram (const QuadraticProgram& QP, const LinearConstraint& lc) :$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
QuadraticProgram	include/hpp/core/path-optimization/quadratic-program.hh	/^        QuadraticProgram (size_type inputSize) :$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
QuadraticProgram	include/hpp/core/path-optimization/quadratic-program.hh	/^      struct QuadraticProgram$/;"	s	namespace:hpp::core::pathOptimization
QuatConstMap_t	src/implicit-function.hh	/^    typedef Eigen::Map<const Quat_t > QuatConstMap_t;$/;"	t	namespace:hpp::core
QuatMap_t	src/implicit-function.hh	/^    typedef Eigen::Map<Quat_t > QuatMap_t;$/;"	t	namespace:hpp::core
Quat_t	src/implicit-function.hh	/^    typedef Eigen::Quaternion<value_type> Quat_t;$/;"	t	namespace:hpp::core
QuaternionMap_t	src/times-frame-function.hh	/^      typedef Eigen::Map<const Quaternion_t> QuaternionMap_t;$/;"	t	struct:hpp::core::TimesFrameFunction
Quaternion_t	src/times-frame-function.hh	/^      typedef Eigen::Quaternion<value_type>  Quaternion_t;$/;"	t	struct:hpp::core::TimesFrameFunction
Queue_t	src/nearest-neighbor/basic.cc	/^                DistAndNodeComp_t > Queue_t;$/;"	t	namespace:hpp::core::nearestNeighbor::__anon21	file:
R	include/hpp/core/dubins-path.hh	/^        value_type L, R, S; \/\/ Left, Right and Straight turn$/;"	m	struct:hpp::core::DubinsPath::Wheels_t
R3	src/implicit-function.hh	/^    typedef hpp::pinocchio::liegroup::VectorSpaceOperation <3, false> R3;$/;"	t	namespace:hpp::core
R3xSO3	src/implicit-function.hh	/^    R3xSO3;$/;"	t	namespace:hpp::core
RLR	src/dubins.hh	28;"	d
RSL	src/dubins.hh	26;"	d
RSR	src/dubins.hh	27;"	d
RS_EPS	src/reeds-shepp-path.cc	/^      const value_type RS_EPS = 1e-6;$/;"	m	namespace:hpp::core::__anon24	file:
RS_LEFT	src/reeds-shepp-path.cc	/^      enum SegmentType { RS_NOP=0, RS_LEFT=1, RS_STRAIGHT=2, RS_RIGHT=3 };$/;"	e	enum:hpp::core::__anon24::SegmentType	file:
RS_NOP	src/reeds-shepp-path.cc	/^      enum SegmentType { RS_NOP=0, RS_LEFT=1, RS_STRAIGHT=2, RS_RIGHT=3 };$/;"	e	enum:hpp::core::__anon24::SegmentType	file:
RS_RIGHT	src/reeds-shepp-path.cc	/^      enum SegmentType { RS_NOP=0, RS_LEFT=1, RS_STRAIGHT=2, RS_RIGHT=3 };$/;"	e	enum:hpp::core::__anon24::SegmentType	file:
RS_STRAIGHT	src/reeds-shepp-path.cc	/^      enum SegmentType { RS_NOP=0, RS_LEFT=1, RS_STRAIGHT=2, RS_RIGHT=3 };$/;"	e	enum:hpp::core::__anon24::SegmentType	file:
R_SEG	src/dubins.hh	34;"	d
RandomShortcut	include/hpp/core/random-shortcut.hh	/^    class HPP_CORE_DLLAPI RandomShortcut : public PathOptimizer$/;"	c	namespace:hpp::core
RandomShortcut	src/random-shortcut.cc	/^    RandomShortcut::RandomShortcut (const Problem& problem) :$/;"	f	class:hpp::core::RandomShortcut
RandomShortcutPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <RandomShortcut> RandomShortcutPtr_t;$/;"	t	namespace:hpp::core
RawPtr_t	include/hpp/core/connected-component.hh	/^      typedef ConnectedComponent* RawPtr_t;$/;"	t	class:hpp::core::ConnectedComponent
RawPtrs_t	include/hpp/core/connected-component.hh	/^      typedef std::set <RawPtr_t> RawPtrs_t;$/;"	t	class:hpp::core::ConnectedComponent
RecursiveHermite	include/hpp/core/path-projector/recursive-hermite.hh	/^      class HPP_CORE_DLLAPI RecursiveHermite : public PathProjector$/;"	c	namespace:hpp::core::pathProjector
RecursiveHermite	src/path-projector/recursive-hermite.cc	/^      RecursiveHermite::RecursiveHermite (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::RecursiveHermite
RecursiveHermitePtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <RecursiveHermite> RecursiveHermitePtr_t;$/;"	t	namespace:hpp::core::pathProjector
ReedsShepp	include/hpp/core/distance/reeds-shepp.hh	/^      class HPP_CORE_DLLAPI ReedsShepp : public Distance$/;"	c	namespace:hpp::core::distance
ReedsShepp	include/hpp/core/steering-method/reeds-shepp.hh	/^      class HPP_CORE_DLLAPI ReedsShepp : public CarLike$/;"	c	namespace:hpp::core::steeringMethod
ReedsShepp	src/distance/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const Problem& problem) :$/;"	f	class:hpp::core::distance::ReedsShepp
ReedsShepp	src/distance/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const Problem& problem,$/;"	f	class:hpp::core::distance::ReedsShepp
ReedsShepp	src/distance/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const ReedsShepp& distance) :$/;"	f	class:hpp::core::distance::ReedsShepp
ReedsShepp	src/steering-method/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
ReedsShepp	src/steering-method/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
ReedsShepp	src/steering-method/reeds-shepp.cc	/^      ReedsShepp::ReedsShepp (const ReedsShepp& other) :$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
ReedsSheppPath	include/hpp/core/reeds-shepp-path.hh	/^    class HPP_CORE_DLLAPI ReedsSheppPath : public PathVector$/;"	c	namespace:hpp::core
ReedsSheppPath	src/reeds-shepp-path.cc	/^    ReedsSheppPath::ReedsSheppPath (const DevicePtr_t& device,$/;"	f	class:hpp::core::ReedsSheppPath
ReedsSheppPath	src/reeds-shepp-path.cc	/^    ReedsSheppPath::ReedsSheppPath (const ReedsSheppPath& path) :$/;"	f	class:hpp::core::ReedsSheppPath
ReedsSheppPath	src/reeds-shepp-path.cc	/^    ReedsSheppPath::ReedsSheppPath (const ReedsSheppPath& path,$/;"	f	class:hpp::core::ReedsSheppPath
ReedsSheppPathConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const ReedsSheppPath> ReedsSheppPathConstPtr_t;$/;"	t	namespace:hpp::core
ReedsSheppPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ReedsSheppPath> ReedsSheppPathPtr_t;$/;"	t	namespace:hpp::core
ReedsSheppPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <ReedsShepp> ReedsSheppPtr_t;$/;"	t	namespace:hpp::core::distance
ReedsSheppPtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <ReedsShepp> ReedsSheppPtr_t;$/;"	t	namespace:hpp::core::steeringMethod
RelativeMotion	include/hpp/core/relative-motion.hh	/^    struct RelativeMotion {$/;"	s	namespace:hpp::core
RelativeMotionType	include/hpp/core/relative-motion.hh	/^      enum RelativeMotionType {$/;"	g	struct:hpp::core::RelativeMotion
Reports_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^                  std::size_t> > Reports_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
Reports_t	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^                  std::size_t> > Reports_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
Reports_t	include/hpp/core/path-optimization/spline-gradient-based.hh	/^                  std::size_t> > Reports_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBased
Reports_t	src/path-optimization/gradient-based.cc	/^				      std::size_t> > Reports_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
Roadmap	include/hpp/core/roadmap.hh	/^    class HPP_CORE_DLLAPI Roadmap {$/;"	c	namespace:hpp::core
Roadmap	src/roadmap.cc	/^    Roadmap::Roadmap (const DistancePtr_t& distance, const DevicePtr_t&) :$/;"	f	class:hpp::core::Roadmap
RoadmapFactory	include/hpp/core/parser/roadmap-factory.hh	/^      class HPP_CORE_DLLAPI RoadmapFactory : public ObjectFactory {$/;"	c	namespace:hpp::core::parser
RoadmapFactory	src/parser/roadmap-factory.cc	/^      RoadmapFactory::RoadmapFactory ($/;"	f	class:hpp::core::parser::RoadmapFactory
RoadmapFactory	src/parser/roadmap-factory.cc	/^      RoadmapFactory::RoadmapFactory (const ProblemPtr_t& problem,$/;"	f	class:hpp::core::parser::RoadmapFactory
RoadmapPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <Roadmap> RoadmapPtr_t;$/;"	t	namespace:hpp::core
RobotBuilder_t	include/hpp/core/problem-solver.hh	/^    typedef boost::function < DevicePtr_t (const std::string&) > RobotBuilder_t;$/;"	t	namespace:hpp::core
RowBlockIndices	include/hpp/core/explicit-relative-transformation.hh	/^      typedef Eigen::RowBlockIndices RowBlockIndices;$/;"	t	class:hpp::core::ExplicitRelativeTransformation
RowBlockIndices	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef Eigen::RowBlockIndices RowBlockIndices;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
RowMajorMatrix_t	src/path-optimization/spline-gradient-based-abstract.cc	/^      typedef Eigen::Matrix<value_type, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> RowMajorMatrix_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
RowMajorMatrix_t	src/path-optimization/spline-gradient-based-constraint.cc	/^      typedef Eigen::Matrix<value_type, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> RowMajorMatrix_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
RowMajorMatrix_t	src/path-optimization/spline-gradient-based.cc	/^      typedef Eigen::Matrix<value_type, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> RowMajorMatrix_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
RowMajorMatrix_t	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      typedef Eigen::Matrix<value_type, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> RowMajorMatrix_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
S	include/hpp/core/dubins-path.hh	/^        value_type L, R, S; \/\/ Left, Right and Straight turn$/;"	m	struct:hpp::core::DubinsPath::Wheels_t
SE3	src/implicit-function.hh	/^    typedef se3::SpecialEuclideanOperation <3> SE3;$/;"	t	namespace:hpp::core
SO3	src/implicit-function.hh	/^    typedef hpp::pinocchio::liegroup::SpecialOrthogonalOperation <3> SO3;$/;"	t	namespace:hpp::core
SSM_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef steeringMethod::Spline<PolynomeBasis, SplineOrder> SSM_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
STATE	include/hpp/core/path-planner/k-prm-star.hh	/^        enum STATE {$/;"	g	class:hpp::core::pathPlanner::kPrmStar
S_SEG	src/dubins.hh	33;"	d
SegmentType	src/reeds-shepp-path.cc	/^      enum SegmentType { RS_NOP=0, RS_LEFT=1, RS_STRAIGHT=2, RS_RIGHT=3 };$/;"	g	namespace:hpp::core::__anon24	file:
Shape_t	include/hpp/core/fwd.hh	/^    typedef std::vector<core::vector3_t> Shape_t;$/;"	t	namespace:hpp::core
Shift	src/path.cc	/^          Shift (TimeParameterizationPtr_t tp, value_type t, value_type s)$/;"	f	class:hpp::core::timeParameterization::Shift
Shift	src/path.cc	/^      class HPP_CORE_LOCAL Shift :$/;"	c	namespace:hpp::core::timeParameterization	file:
SimpleTimeParameterization	include/hpp/core/path-optimization/simple-time-parameterization.hh	/^      class HPP_CORE_DLLAPI SimpleTimeParameterization : public PathOptimizer$/;"	c	namespace:hpp::core::pathOptimization
SimpleTimeParameterization	src/path-optimization/simple-time-parameterization.cc	/^      SimpleTimeParameterization::SimpleTimeParameterization (const Problem& problem):$/;"	f	class:hpp::core::pathOptimization::SimpleTimeParameterization
SimpleTimeParameterizationPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <SimpleTimeParameterization> SimpleTimeParameterizationPtr_t;$/;"	t	namespace:hpp::core::pathOptimization
SizeVector_t	include/hpp/core/parser/roadmap-factory.hh	/^          typedef std::vector <std::size_t> SizeVector_t;$/;"	t	class:hpp::core::parser::RoadmapFactory
Snibud	include/hpp/core/steering-method/snibud.hh	/^      class HPP_CORE_DLLAPI Snibud : public CarLike$/;"	c	namespace:hpp::core::steeringMethod
Snibud	src/steering-method/snibud.cc	/^      Snibud::Snibud  (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::Snibud
Snibud	src/steering-method/snibud.cc	/^      Snibud::Snibud  (const Snibud& other) :$/;"	f	class:hpp::core::steeringMethod::Snibud
Snibud	src/steering-method/snibud.cc	/^      Snibud::Snibud (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::Snibud
SnibudPtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <Snibud> SnibudPtr_t;$/;"	t	namespace:hpp::core::steeringMethod
SortFunctor	src/astar.hh	/^	SortFunctor (std::map <NodePtr_t, value_type>& cost) :$/;"	f	struct:hpp::core::Astar::SortFunctor
SortFunctor	src/astar.hh	/^      struct SortFunctor {$/;"	s	class:hpp::core::Astar
Spline	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef path::Spline<PolynomeBasis, SplineOrder> Spline;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
Spline	include/hpp/core/path/spline.hh	/^          Spline (const DevicePtr_t& robot,$/;"	f	class:hpp::core::path::Spline
Spline	include/hpp/core/path/spline.hh	/^      class HPP_CORE_DLLAPI Spline : public Path$/;"	c	namespace:hpp::core::path
Spline	include/hpp/core/steering-method/spline.hh	/^      class HPP_CORE_DLLAPI Spline : public SteeringMethod$/;"	c	namespace:hpp::core::steeringMethod
Spline	src/path-optimization/spline-gradient-based/cost.hh	/^        typedef _Spline Spline;$/;"	t	struct:hpp::core::pathOptimization::SquaredLength
Spline	src/path/spline.cc	/^      Spline<_SplineType, _Order>::Spline (const Spline& path) :$/;"	f	class:hpp::core::path::Spline
Spline	src/path/spline.cc	/^      Spline<_SplineType, _Order>::Spline (const Spline& path, const ConstraintSetPtr_t& constraints) :$/;"	f	class:hpp::core::path::Spline
Spline	src/steering-method/spline.cc	/^      Spline<_PB, _SO>::Spline (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::Spline
Spline	src/steering-method/spline.cc	/^      Spline<_PB, _SO>::Spline (const Spline& other) :$/;"	f	class:hpp::core::steeringMethod::Spline
SplineGradientBased	include/hpp/core/path-optimization/spline-gradient-based.hh	/^      class HPP_CORE_DLLAPI SplineGradientBased : public SplineGradientBasedAbstract<_PolynomeBasis, _SplineOrder>$/;"	c	namespace:hpp::core::pathOptimization
SplineGradientBased	src/path-optimization/spline-gradient-based.cc	/^      SplineGradientBased<_PB, _SO>::SplineGradientBased (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
SplineGradientBased	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      SplineGradientBased<_PB, _SO>::SplineGradientBased (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
SplineGradientBasedAbstract	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^      class HPP_CORE_DLLAPI SplineGradientBasedAbstract : public PathOptimizer$/;"	c	namespace:hpp::core::pathOptimization
SplineGradientBasedAbstract	src/path-optimization/spline-gradient-based-abstract.cc	/^      SplineGradientBasedAbstract<_PB, _SO>::SplineGradientBasedAbstract (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
SplineGradientBasedConstraint	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^      class HPP_CORE_DLLAPI SplineGradientBasedConstraint : public SplineGradientBasedAbstract<_PolynomeBasis, _SplineOrder>$/;"	c	namespace:hpp::core::pathOptimization
SplineGradientBasedConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^        SplineGradientBasedConstraint<_PB, _SO>::SplineGradientBasedConstraint (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
SplineOptimizationData	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            SplineOptimizationData () {}$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData
SplineOptimizationData	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            SplineOptimizationData (size_type rDof)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData
SplineOptimizationData	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          struct SplineOptimizationData {$/;"	s	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
SplineOptimizationDatas_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef std::vector <SplineOptimizationData> SplineOptimizationDatas_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
SplineOrder	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            SplineOrder = _SplineOrder$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBasedAbstract::__anon2
SplineOrder	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^            SplineOrder = _SplineOrder$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBasedConstraint::__anon3
SplineOrder	include/hpp/core/path-optimization/spline-gradient-based.hh	/^            SplineOrder = _SplineOrder$/;"	e	enum:hpp::core::pathOptimization::SplineGradientBased::__anon1
SplineOrder	include/hpp/core/steering-method/spline.hh	/^            SplineOrder = _SplineOrder$/;"	e	enum:hpp::core::steeringMethod::Spline::__anon6
SplinePath	include/hpp/core/steering-method/spline.hh	/^          typedef path::Spline<PolynomeBasis, SplineOrder> SplinePath;$/;"	t	class:hpp::core::steeringMethod::Spline
SplinePathPtr_t	include/hpp/core/steering-method/spline.hh	/^          typedef typename SplinePath::Ptr_t SplinePathPtr_t;$/;"	t	class:hpp::core::steeringMethod::Spline
SplinePtr_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef typename Spline::Ptr_t SplinePtr_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
SplinePtr_t	src/path-optimization/spline-gradient-based/cost.hh	/^        typedef typename Spline::Ptr_t SplinePtr_t;$/;"	t	struct:hpp::core::pathOptimization::SquaredLength
Splines_t	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typedef std::vector<SplinePtr_t> Splines_t;$/;"	t	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
Splines_t	src/path-optimization/spline-gradient-based/cost.hh	/^        typedef std::vector<SplinePtr_t> Splines_t;$/;"	t	struct:hpp::core::pathOptimization::SquaredLength
SquaredDistanceStep	src/weighed-distance.cc	/^      struct SquaredDistanceStep : public se3::fusion::JointModelVisitor<SquaredDistanceStep>$/;"	s	namespace:hpp::core::__anon17	file:
SquaredLength	src/path-optimization/spline-gradient-based/cost.hh	/^        SquaredLength (const Splines_t& splines, size_type paramSize, size_type paramDerivativeSize)$/;"	f	struct:hpp::core::pathOptimization::SquaredLength
SquaredLength	src/path-optimization/spline-gradient-based/cost.hh	/^      struct HPP_CORE_LOCAL SquaredLength \/\/ : Cost$/;"	s	namespace:hpp::core::pathOptimization
SteeringMethod	include/hpp/core/steering-method.hh	/^      SteeringMethod (const Problem& problem) :$/;"	f	class:hpp::core::SteeringMethod
SteeringMethod	include/hpp/core/steering-method.hh	/^      SteeringMethod (const SteeringMethod& other) :$/;"	f	class:hpp::core::SteeringMethod
SteeringMethod	include/hpp/core/steering-method.hh	/^    class HPP_CORE_DLLAPI SteeringMethod$/;"	c	namespace:hpp::core
SteeringMethodBuilder_t	include/hpp/core/problem-solver.hh	/^      SteeringMethodBuilder_t;$/;"	t	namespace:hpp::core
SteeringMethodPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <SteeringMethod> SteeringMethodPtr_t;$/;"	t	namespace:hpp::core
SteeringMethodStraight	include/hpp/core/steering-method/fwd.hh	/^    typedef steeringMethod::Straight SteeringMethodStraight;$/;"	t	namespace:hpp::core
SteeringMethodStraightPtr_t	include/hpp/core/steering-method/fwd.hh	/^    typedef steeringMethod::StraightPtr_t SteeringMethodStraightPtr_t;$/;"	t	namespace:hpp::core
Straight	include/hpp/core/steering-method/straight.hh	/^          Straight (const Problem& problem) :$/;"	f	class:hpp::core::steeringMethod::Straight
Straight	include/hpp/core/steering-method/straight.hh	/^          Straight (const Straight& other) :$/;"	f	class:hpp::core::steeringMethod::Straight
Straight	include/hpp/core/steering-method/straight.hh	/^      class HPP_CORE_DLLAPI Straight : public SteeringMethod$/;"	c	namespace:hpp::core::steeringMethod
StraightPath	include/hpp/core/path-projector/dichotomy.hh	/^        typedef hpp::core::StraightPath StraightPath;$/;"	t	class:hpp::core::pathProjector::Dichotomy
StraightPath	include/hpp/core/path-projector/global.hh	/^          typedef hpp::core::StraightPath StraightPath;$/;"	t	class:hpp::core::pathProjector::Global
StraightPath	include/hpp/core/path-projector/progressive.hh	/^          typedef hpp::core::StraightPath StraightPath;$/;"	t	class:hpp::core::pathProjector::Progressive
StraightPath	include/hpp/core/straight-path.hh	/^    class HPP_CORE_DLLAPI StraightPath : public Path$/;"	c	namespace:hpp::core
StraightPath	src/straight-path.cc	/^    StraightPath::StraightPath (const DevicePtr_t& device,$/;"	f	class:hpp::core::StraightPath
StraightPath	src/straight-path.cc	/^    StraightPath::StraightPath (const StraightPath& path) :$/;"	f	class:hpp::core::StraightPath
StraightPath	src/straight-path.cc	/^    StraightPath::StraightPath (const StraightPath& path,$/;"	f	class:hpp::core::StraightPath
StraightPathConstPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <const StraightPath> StraightPathConstPtr_t;$/;"	t	namespace:hpp::core
StraightPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <StraightPath> StraightPathPtr_t;$/;"	t	namespace:hpp::core
StraightPathPtr_t	include/hpp/core/path-projector/dichotomy.hh	/^        typedef hpp::core::StraightPathPtr_t StraightPathPtr_t;$/;"	t	class:hpp::core::pathProjector::Dichotomy
StraightPathPtr_t	include/hpp/core/path-projector/global.hh	/^          typedef hpp::core::StraightPathPtr_t StraightPathPtr_t;$/;"	t	class:hpp::core::pathProjector::Global
StraightPathPtr_t	include/hpp/core/path-projector/progressive.hh	/^          typedef hpp::core::StraightPathPtr_t StraightPathPtr_t;$/;"	t	class:hpp::core::pathProjector::Progressive
StraightPtr_t	include/hpp/core/steering-method/fwd.hh	/^      typedef boost::shared_ptr <Straight> StraightPtr_t;$/;"	t	namespace:hpp::core::steeringMethod
StringSequence	include/hpp/core/parser/roadmap-factory.hh	/^      typedef hpp::util::parser::SequenceFactory<std::string> StringSequence;$/;"	t	namespace:hpp::core::parser
SubchainPath	include/hpp/core/subchain-path.hh	/^      SubchainPath (const PathPtr_t& original, const segments_t& intervals) :$/;"	f	class:hpp::core::SubchainPath
SubchainPath	include/hpp/core/subchain-path.hh	/^      SubchainPath (const SubchainPath& path) : Path (path),$/;"	f	class:hpp::core::SubchainPath
SubchainPath	include/hpp/core/subchain-path.hh	/^      SubchainPath (const SubchainPath& path,$/;"	f	class:hpp::core::SubchainPath
SubchainPath	include/hpp/core/subchain-path.hh	/^    class SubchainPath : public Path$/;"	c	namespace:hpp::core
SubchainPathPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <SubchainPath> SubchainPathPtr_t;$/;"	t	namespace:hpp::core
TaskTarget	include/hpp/core/problem-target/task-target.hh	/^          TaskTarget (const ProblemPtr_t& problem)$/;"	f	class:hpp::core::problemTarget::TaskTarget
TaskTarget	include/hpp/core/problem-target/task-target.hh	/^      class HPP_CORE_DLLAPI TaskTarget : public ProblemTarget {$/;"	c	namespace:hpp::core::problemTarget
TaskTargetPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <TaskTarget> TaskTargetPtr_t;$/;"	t	namespace:hpp::core::problemTarget
TimeParameterization	include/hpp/core/time-parameterization.hh	/^    class HPP_CORE_DLLAPI TimeParameterization$/;"	c	namespace:hpp::core
TimeParameterizationPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <TimeParameterization> TimeParameterizationPtr_t;$/;"	t	namespace:hpp::core
TimesFrameFunction	src/times-frame-function.hh	/^      TimesFrameFunction (const Transform3f& M, std::string name)$/;"	f	struct:hpp::core::TimesFrameFunction
TimesFrameFunction	src/times-frame-function.hh	/^    struct TimesFrameFunction : public DifferentiableFunction {$/;"	s	namespace:hpp::core
Transform3f	include/hpp/core/fwd.hh	/^    typedef pinocchio::Transform3f Transform3f;$/;"	t	namespace:hpp::core
Transform3f	src/path-optimization/collision-constraints-result.hh	/^      typedef pinocchio::Transform3f Transform3f;$/;"	t	namespace:hpp::core::pathOptimization
Transform3f	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^      typedef pinocchio::Transform3f Transform3f;$/;"	t	namespace:hpp::core::pathOptimization
UNPACK_INPUTS	src/dubins.hh	53;"	d
USE_SVD	src/path-optimization/linear-constraint.cc	92;"	d	file:
Unconstrained	include/hpp/core/relative-motion.hh	/^        Unconstrained$/;"	e	enum:hpp::core::RelativeMotion::RelativeMotionType
ValidationReport	include/hpp/core/validation-report.hh	/^    class HPP_CORE_DLLAPI ValidationReport$/;"	c	namespace:hpp::core
ValidationReportPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <ValidationReport> ValidationReportPtr_t;$/;"	t	namespace:hpp::core
ValueVisitor	src/implicit-function.hh	/^      ValueVisitor (vectorIn_t qOut, vectorIn_t f_qIn, const size_type nv) :$/;"	f	struct:hpp::core::ValueVisitor
ValueVisitor	src/implicit-function.hh	/^    struct ValueVisitor : public boost::static_visitor <>$/;"	s	namespace:hpp::core
Vb_	src/continuous-collision-checking/path-velocity.hh	/^        mutable vector_t Vb_;$/;"	m	struct:hpp::core::continuousCollisionChecking::PathVelocity
VectorMap_t	src/path-optimization/spline-gradient-based-abstract.cc	/^      typedef Eigen::Map<      vector_t>      VectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
VectorMap_t	src/path-optimization/spline-gradient-based-constraint.cc	/^      typedef Eigen::Map<      vector_t>      VectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
VectorMap_t	src/path-optimization/spline-gradient-based.cc	/^      typedef Eigen::Map<      vector_t>      VectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
VectorMap_t	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      typedef Eigen::Map<      vector_t>      VectorMap_t;$/;"	t	namespace:hpp::core::pathOptimization	file:
VisibilityPrmPlanner	include/hpp/core/visibility-prm-planner.hh	/^    class HPP_CORE_DLLAPI VisibilityPrmPlanner : public PathPlanner$/;"	c	namespace:hpp::core
VisibilityPrmPlanner	src/visibility-prm-planner.cc	/^    VisibilityPrmPlanner::VisibilityPrmPlanner (const Problem& problem):$/;"	f	class:hpp::core::VisibilityPrmPlanner
VisibilityPrmPlanner	src/visibility-prm-planner.cc	/^    VisibilityPrmPlanner::VisibilityPrmPlanner (const Problem& problem,$/;"	f	class:hpp::core::VisibilityPrmPlanner
VisibilityPrmPlannerPtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <VisibilityPrmPlanner> VisibilityPrmPlannerPtr_t;$/;"	t	namespace:hpp::core
WeighedDistance	include/hpp/core/weighed-distance.hh	/^    class HPP_CORE_DLLAPI WeighedDistance : public Distance {$/;"	c	namespace:hpp::core
WeighedDistance	src/weighed-distance.cc	/^    WeighedDistance::WeighedDistance (const DevicePtr_t& robot) :$/;"	f	class:hpp::core::WeighedDistance
WeighedDistance	src/weighed-distance.cc	/^    WeighedDistance::WeighedDistance (const DevicePtr_t& robot,$/;"	f	class:hpp::core::WeighedDistance
WeighedDistance	src/weighed-distance.cc	/^    WeighedDistance::WeighedDistance (const Problem& problem) :$/;"	f	class:hpp::core::WeighedDistance
WeighedDistance	src/weighed-distance.cc	/^    WeighedDistance::WeighedDistance (const WeighedDistance& distance) :$/;"	f	class:hpp::core::WeighedDistance
WeighedDistancePtr_t	include/hpp/core/fwd.hh	/^    typedef boost::shared_ptr <WeighedDistance> WeighedDistancePtr_t;$/;"	t	namespace:hpp::core
Wheels_t	include/hpp/core/dubins-path.hh	/^        Wheels_t () : j() {}$/;"	f	struct:hpp::core::DubinsPath::Wheels_t
Wheels_t	include/hpp/core/dubins-path.hh	/^      struct Wheels_t {$/;"	s	class:hpp::core::DubinsPath
Wheels_t	include/hpp/core/steering-method/constant-curvature.hh	/^          Wheels_t () : j () {}$/;"	f	struct:hpp::core::steeringMethod::ConstantCurvature::Wheels_t
Wheels_t	include/hpp/core/steering-method/constant-curvature.hh	/^        struct Wheels_t {$/;"	s	class:hpp::core::steeringMethod::ConstantCurvature
WkPtr_t	include/hpp/core/path/spline.hh	/^          typedef boost::weak_ptr<Spline> WkPtr_t;$/;"	t	class:hpp::core::path::Spline
WkPtr_t	include/hpp/core/steering-method/spline.hh	/^          typedef boost::weak_ptr<Spline> WkPtr_t;$/;"	t	class:hpp::core::steeringMethod::Spline
ZERO	src/reeds-shepp-path.cc	/^      const value_type ZERO = 10*std::numeric_limits<value_type>::epsilon();$/;"	m	namespace:hpp::core::__anon24	file:
_EIGEN_QUADSOLVE_HPP_	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	2;"	d
a	include/hpp/core/time-parameterization/polynomial.hh	/^          vector_t a;$/;"	m	class:hpp::core::timeParameterization::Polynomial
absBound	src/path/spline.cc	/^        typename spline_basis_function<BernsteinBasis, Degree>::Coeffs_t spline_basis_function<BernsteinBasis, Degree>::absBound (bool up)$/;"	f	class:hpp::core::path::internal::spline_basis_function
absDerBounds	src/path/spline.cc	/^        void spline_basis_function<BernsteinBasis, Degree>::absDerBounds$/;"	f	class:hpp::core::path::internal::spline_basis_function
absDerBounds	src/path/spline.cc	/^        void spline_basis_function<CanonicalPolynomeBasis, Degree>::absDerBounds$/;"	f	class:hpp::core::path::internal::spline_basis_function
activeConstraint	include/hpp/core/path-optimization/quadratic-program.hh	/^        Eigen::VectorXi activeConstraint;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
activeConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^          Eigen::VectorXi activeConstraint;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
activeConstraint	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        Eigen::VectorXi activeConstraint;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
activeParameters	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            RowBlockIndices activeParameters;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData
activeSetFunction	src/config-projector.cc	/^      DifferentiableFunctionPtr_t activeSetFunction ($/;"	f	namespace:hpp::core::__anon16
activeSetSize	include/hpp/core/path-optimization/quadratic-program.hh	/^        int activeSetSize;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
activeSetSize	src/path-optimization/spline-gradient-based-constraint.cc	/^          int activeSetSize;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
activeSetSize	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        int activeSetSize;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
add	include/hpp/core/container.hh	/^      void add (const key_type& name, const mapped_type& element) { map [name] = element; }$/;"	f	struct:hpp::core::Container
add	src/config-projector.cc	/^    bool ConfigProjector::add (const NumericalConstraintPtr_t& nm,$/;"	f	class:hpp::core::ConfigProjector
add	src/config-projector.cc	/^    void ConfigProjector::add (const LockedJointPtr_t& lockedJoint)$/;"	f	class:hpp::core::ConfigProjector
add	src/config-validations.cc	/^    void ConfigValidations::add (const ConfigValidationPtr_t& configValidation)$/;"	f	class:hpp::core::ConfigValidations
add	src/discretized-path-validation.cc	/^    void DiscretizedPathValidation::add$/;"	f	class:hpp::core::DiscretizedPathValidation
add	src/path-optimization/collision-constraints-result.hh	/^        void add (const LockedJoints_t& lj) {$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
addBoundConstraints	src/path-optimization/spline-gradient-based-abstract.cc	/^      std::size_t SplineGradientBasedAbstract<_PB, _SO>::addBoundConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
addCollisionConstraint	src/path-optimization/gradient-based.cc	/^      void GradientBased::addCollisionConstraint$/;"	f	class:hpp::core::pathOptimization::GradientBased
addCollisionConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::addCollisionConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
addCollisionConstraint	src/path-optimization/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addCollisionConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addCollisionConstraint	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addCollisionConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addCollisionPair	src/continuous-collision-checking/body-pair-collision.hh	/^        void addCollisionPair (const CollisionObjectConstPtr_t& left,$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
addConfigConstraintToPath	include/hpp/core/path-optimization/config-optimization.hh	/^            bool addConfigConstraintToPath;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
addConfigConstraintToPath	include/hpp/core/path-optimization/config-optimization.hh	/^        static bool addConfigConstraintToPath () { return false; }$/;"	f	struct:hpp::core::pathOptimization::ConfigOptimizationTraits
addConfigToRoadmap	src/problem-solver.cc	/^    void ProblemSolver::addConfigToRoadmap (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::ProblemSolver
addConfigValidation	src/problem-solver.cc	/^    void ProblemSolver::addConfigValidation (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
addConfigValidation	src/problem.cc	/^    void Problem::addConfigValidation (const ConfigValidationPtr_t& configValidation)$/;"	f	class:hpp::core::Problem
addConfigValidationBuilder	src/problem-solver.cc	/^    void ProblemSolver::addConfigValidationBuilder$/;"	f	class:hpp::core::ProblemSolver
addConnectedComponent	src/roadmap.cc	/^    void Roadmap::addConnectedComponent (const NodePtr_t& node)$/;"	f	class:hpp::core::Roadmap
addConstraint	include/hpp/core/constraint-set.hh	/^      void addConstraint (const ConstraintPtr_t& constraint)$/;"	f	class:hpp::core::ConstraintSet
addConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^          void addConstraint (const CollisionFunctionPtr_t& f,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions
addConstraint	src/path-optimization/spline-gradient-based.cc	/^        void addConstraint (const CollisionFunctionPtr_t& f,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
addConstraint	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void addConstraint (const CollisionFunctionPtr_t& f,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
addConstraint	src/problem-solver.cc	/^    void ProblemSolver::addConstraint (const ConstraintPtr_t& constraint)$/;"	f	class:hpp::core::ProblemSolver
addContinuityConstraints	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::addContinuityConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
addEdge	src/roadmap.cc	/^    EdgePtr_t Roadmap::addEdge (const NodePtr_t& n1, const NodePtr_t& n2,$/;"	f	class:hpp::core::Roadmap
addEdge	src/roadmap.cc	/^    void Roadmap::addEdge (const EdgePtr_t& edge)$/;"	f	class:hpp::core::Roadmap
addEdgeToRoadmap	src/problem-solver.cc	/^    void ProblemSolver::addEdgeToRoadmap (const ConfigurationPtr_t& config1,$/;"	f	class:hpp::core::ProblemSolver
addEdges	src/roadmap.cc	/^    void Roadmap::addEdges (const NodePtr_t from, const NodePtr_t& to,$/;"	f	class:hpp::core::Roadmap
addGoalConfig	src/problem-solver.cc	/^    void ProblemSolver::addGoalConfig (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::ProblemSolver
addGoalConfig	src/problem.cc	/^    void Problem::addGoalConfig (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::Problem
addGoalNode	src/roadmap.cc	/^    NodePtr_t Roadmap::addGoalNode (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::Roadmap
addInEdge	src/node.cc	/^    void Node::addInEdge (EdgePtr_t edge)$/;"	f	class:hpp::core::Node
addLockedJoint	include/hpp/core/constraint.hh	/^      virtual void addLockedJoint (const LockedJointPtr_t&)$/;"	f	class:hpp::core::Constraint
addLockedJoint	src/problem-solver.cc	/^    void ProblemSolver::addLockedJoint (const LockedJointPtr_t& lj)$/;"	f	class:hpp::core::ProblemSolver
addLockedJointToConfigProjector	src/problem-solver.cc	/^    void ProblemSolver::addLockedJointToConfigProjector$/;"	f	class:hpp::core::ProblemSolver
addNode	include/hpp/core/connected-component.hh	/^      virtual void addNode (const NodePtr_t& node)$/;"	f	class:hpp::core::ConnectedComponent
addNode	src/nearest-neighbor/basic.hh	/^      void addNode (const NodePtr_t&)$/;"	f	class:hpp::core::nearestNeighbor::Basic
addNode	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::addNode (const NodePtr_t& node) {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
addNode	src/roadmap.cc	/^    NodePtr_t Roadmap::addNode (const ConfigurationPtr_t& configuration)$/;"	f	class:hpp::core::Roadmap
addNode	src/roadmap.cc	/^    NodePtr_t Roadmap::addNode (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::Roadmap
addNodeAndEdge	src/roadmap.cc	/^    NodePtr_t Roadmap::addNodeAndEdge (const ConfigurationPtr_t& from,$/;"	f	class:hpp::core::Roadmap
addNodeAndEdge	src/roadmap.cc	/^    NodePtr_t Roadmap::addNodeAndEdge (const NodePtr_t from,$/;"	f	class:hpp::core::Roadmap
addNodeAndEdges	src/roadmap.cc	/^    NodePtr_t Roadmap::addNodeAndEdges (const NodePtr_t from,$/;"	f	class:hpp::core::Roadmap
addNumericalConstraint	include/hpp/core/problem-solver.hh	/^      void addNumericalConstraint (const std::string& name,$/;"	f	class:hpp::core::ProblemSolver
addNumericalConstraintToConfigProjector	src/problem-solver.cc	/^    void ProblemSolver::addNumericalConstraintToConfigProjector$/;"	f	class:hpp::core::ProblemSolver
addObstacle	include/hpp/core/config-validation.hh	/^      virtual void addObstacle (const CollisionObjectConstPtr_t&)$/;"	f	class:hpp::core::ConfigValidation
addObstacle	include/hpp/core/path-validation.hh	/^      virtual void addObstacle (const CollisionObjectConstPtr_t&)$/;"	f	class:hpp::core::PathValidation
addObstacle	src/collision-validation.cc	/^    void CollisionValidation::addObstacle (const CollisionObjectConstPtr_t& object)$/;"	f	class:hpp::core::CollisionValidation
addObstacle	src/config-validations.cc	/^    void ConfigValidations::addObstacle (const CollisionObjectConstPtr_t& object)$/;"	f	class:hpp::core::ConfigValidations
addObstacle	src/continuous-collision-checking.cc	/^    void ContinuousCollisionChecking::addObstacle$/;"	f	class:hpp::core::ContinuousCollisionChecking
addObstacle	src/discretized-path-validation.cc	/^    void DiscretizedPathValidation::addObstacle$/;"	f	class:hpp::core::DiscretizedPathValidation
addObstacle	src/distance-between-objects.cc	/^    void DistanceBetweenObjects::addObstacle$/;"	f	class:hpp::core::DistanceBetweenObjects
addObstacle	src/path-validations.cc	/^    void PathValidations::addObstacle (const CollisionObjectConstPtr_t& object)$/;"	f	class:hpp::core::PathValidations
addObstacle	src/problem-solver.cc	/^    void ProblemSolver::addObstacle (const CollisionObjectPtr_t& object,$/;"	f	class:hpp::core::ProblemSolver
addObstacle	src/problem-solver.cc	/^    void ProblemSolver::addObstacle (const DevicePtr_t& device,$/;"	f	class:hpp::core::ProblemSolver
addObstacle	src/problem-solver.cc	/^    void ProblemSolver::addObstacle (const std::string& name,$/;"	f	class:hpp::core::ProblemSolver
addObstacle	src/problem.cc	/^    void Problem::addObstacle (const CollisionObjectPtr_t& object)$/;"	f	class:hpp::core::Problem
addOutEdge	src/node.cc	/^    void Node::addOutEdge (EdgePtr_t edge)$/;"	f	class:hpp::core::Node
addPath	include/hpp/core/problem-solver.hh	/^      std::size_t addPath (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::ProblemSolver
addPathOptimizer	src/plan-and-optimize.cc	/^    void PlanAndOptimize::addPathOptimizer$/;"	f	class:hpp::core::PlanAndOptimize
addPathOptimizer	src/problem-solver.cc	/^    void ProblemSolver::addPathOptimizer (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
addPathValidation	src/path-validations.cc	/^    void PathValidations::addPathValidation$/;"	f	class:hpp::core::PathValidations
addProblemConstraintOnPath	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::addProblemConstraintOnPath$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
addProblemConstraintOnPath	src/path-optimization/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addProblemConstraintOnPath$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addProblemConstraintOnPath	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addProblemConstraintOnPath$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addProblemConstraints	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::addProblemConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
addProblemConstraints	src/path-optimization/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addProblemConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addProblemConstraints	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::addProblemConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
addRows	include/hpp/core/path-optimization/linear-constraint.hh	/^        void addRows (const std::size_t& nbRows)$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
addRows	include/hpp/core/path-optimization/quadratic-program.hh	/^        void addRows (const std::size_t& nbRows)$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
addRows	src/path-optimization/spline-gradient-based-constraint.cc	/^          void addRows (const std::size_t& nbRows)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
addRows	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void addRows (const std::size_t& nbRows)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
addToConstraintSet	include/hpp/core/constraint-set.hh	/^      virtual void addToConstraintSet (const ConstraintSetPtr_t& constraintSet)$/;"	f	class:hpp::core::ConstraintSet
addToConstraintSet	src/config-projector.cc	/^    void ConfigProjector::addToConstraintSet$/;"	f	class:hpp::core::ConfigProjector
addToConstraintSet	src/constraint.cc	/^    Constraint::addToConstraintSet (const ConstraintSetPtr_t& constraintSet)$/;"	f	class:hpp::core::Constraint
add_constraint	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline bool add_constraint(MatrixXd& R, MatrixXd& J, VectorXd& d, int& iq, double& R_norm)$/;"	f	namespace:Eigen
affordanceConfigs	include/hpp/core/problem-solver.hh	/^      Container <AffordanceConfig_t>            affordanceConfigs;$/;"	m	class:hpp::core::ProblemSolver
affordanceObjects	include/hpp/core/problem-solver.hh	/^      Container <AffordanceObjects_t>           affordanceObjects;$/;"	m	class:hpp::core::ProblemSolver
algo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^        static void algo(const se3::JointModelBase<JointModel> & jmodel,$/;"	f	struct:hpp::core::pathOptimization::JointBoundConstraintStep
algo	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      void JointBoundConstraintStep::algo<se3::JointModelComposite>($/;"	f	class:hpp::core::pathOptimization::JointBoundConstraintStep
algo	src/weighed-distance.cc	/^        static void algo(const se3::JointModelBase<JointModel> & jmodel,$/;"	f	struct:hpp::core::__anon17::ComputeWeightStep
algo	src/weighed-distance.cc	/^        static void algo(const se3::JointModelBase<JointModel> & jmodel,$/;"	f	struct:hpp::core::__anon17::SquaredDistanceStep
algo	src/weighed-distance.cc	/^      template <> void ComputeWeightStep::algo<se3::JointModelComposite>($/;"	f	class:hpp::core::__anon17::ComputeWeightStep
algo	src/weighed-distance.cc	/^      void SquaredDistanceStep::algo<se3::JointModelComposite>($/;"	f	class:hpp::core::__anon17::SquaredDistanceStep
alpha	include/hpp/core/path-projector/global.hh	/^            LineSearch_t alpha;$/;"	m	struct:hpp::core::pathProjector::Global::Data
alphaInit	include/hpp/core/path-optimization/config-optimization.hh	/^            value_type alphaInit;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
alphaInit	include/hpp/core/path-optimization/config-optimization.hh	/^        static value_type alphaInit () { return 0.4; }$/;"	f	struct:hpp::core::pathOptimization::ConfigOptimizationTraits
alphaInit_	include/hpp/core/path-optimization/gradient-based.hh	/^	value_type alphaInit_; \/\/ .1, .2, .4$/;"	m	class:hpp::core::pathOptimization::GradientBased
alphaMax_	include/hpp/core/path-optimization/gradient-based.hh	/^	value_type alphaMax_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
alpha_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable value_type alpha_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
angle	src/reeds-shepp-path.cc	/^    inline value_type angle(const vector2_t& cs)$/;"	f	namespace:hpp::core
appendEquivalentSpline	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::appendEquivalentSpline$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
appendPath	src/path-vector.cc	/^    void PathVector::appendPath (const PathPtr_t& path)$/;"	f	class:hpp::core::PathVector
apply	src/constraint.cc	/^    bool Constraint::apply (ConfigurationOut_t configuration)$/;"	f	class:hpp::core::Constraint
apply	src/path-projector.cc	/^    bool PathProjector::apply (const PathPtr_t& path,$/;"	f	class:hpp::core::PathProjector
applyConstraints	src/visibility-prm-planner.cc	/^    ConfigurationPtr_t VisibilityPrmPlanner::applyConstraints $/;"	f	class:hpp::core::VisibilityPrmPlanner
applyToStraightPath	src/path-projector/dichotomy.cc	/^      bool Dichotomy::applyToStraightPath (const StraightPathPtr_t& path,$/;"	f	class:hpp::core::pathProjector::Dichotomy
as	include/hpp/core/path.hh	/^      template <class T> boost::shared_ptr<T> as (void)$/;"	f	class:hpp::core::Path
as	include/hpp/core/path.hh	/^      template <class T> boost::shared_ptr<const T> as (void) const$/;"	f	class:hpp::core::Path
at	include/hpp/core/path.hh	/^      bool at (const value_type& time, ConfigurationOut_t result) const$/;"	f	class:hpp::core::Path
b	include/hpp/core/path-optimization/linear-constraint.hh	/^        vector_t b;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
b	include/hpp/core/path-optimization/quadratic-program.hh	/^        vector_t b;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
b	src/path-optimization/spline-gradient-based-constraint.cc	/^          vector_t b;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
b	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        vector_t b;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
bIsZero	include/hpp/core/path-optimization/quadratic-program.hh	/^        bool bIsZero;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
bIsZero	src/path-optimization/spline-gradient-based-constraint.cc	/^          bool bIsZero;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
bIsZero	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        bool bIsZero;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
base	include/hpp/core/path/spline.hh	/^          const Configuration_t& base () const$/;"	f	class:hpp::core::path::Spline
base	include/hpp/core/path/spline.hh	/^          void base (const Configuration_t& q)$/;"	f	class:hpp::core::path::Spline
base_	include/hpp/core/path/spline.hh	/^          Configuration_t base_;$/;"	m	class:hpp::core::path::Spline
basisFunctionDerivative	include/hpp/core/path/spline.hh	/^          void basisFunctionDerivative (const size_type order, const value_type& u, vectorOut_t res) const$/;"	f	class:hpp::core::path::Spline
basisFunctionDerivative	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::basisFunctionDerivative (const size_type order, const value_type& u, BasisFunctionVector_t& res) const$/;"	f	class:hpp::core::path::Spline
begin	include/hpp/core/constraint-set.hh	/^      Constraints_t::iterator begin () {$/;"	f	class:hpp::core::ConstraintSet
belongs	src/diffusing-planner.cc	/^    bool belongs (const ConfigurationPtr_t& q, const Nodes_t& nodes)$/;"	f	namespace:hpp::core
beta_	include/hpp/core/path-projector/recursive-hermite.hh	/^          value_type M_, beta_;$/;"	m	class:hpp::core::pathProjector::RecursiveHermite
binomial	src/path/spline.cc	/^        inline size_type binomial (size_type n, size_type k, const Eigen::Matrix<size_type, N, 1> factors)$/;"	f	namespace:hpp::core::path::internal
bodyPairCollisions_	include/hpp/core/continuous-collision-checking.hh	/^        bodyPairCollisions_, disabledBodyPairCollisions_;$/;"	m	class:hpp::core::ContinuousCollisionChecking
bound	src/path/spline.cc	/^          static void bound (const size_type& order, const value_type& \/* t0 *\/, const value_type& t1, Coeffs_t& res) { derivative(order, t1, res); }$/;"	f	struct:hpp::core::path::internal::spline_basis_function
bound	src/path/spline.cc	/^        void spline_basis_function<BernsteinBasis, Degree>::bound$/;"	f	class:hpp::core::path::internal::spline_basis_function
bucketSize_	src/nearest-neighbor/k-d-tree.hh	/^      std::size_t bucketSize_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
bucket_	src/nearest-neighbor/k-d-tree.hh	/^      std::size_t bucket_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
buildConfigVector	src/path-optimization/config-optimization.cc	/^      void ConfigOptimization::buildConfigVector (const PathVector& path,$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
buildOptimizers	src/path-optimization/config-optimization.cc	/^      std::size_t ConfigOptimization::buildOptimizers (const PathVector& pv,$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
buildPathVector	src/path-optimization/spline-gradient-based-abstract.cc	/^      PathVectorPtr_t SplineGradientBasedAbstract<_PB, _SO>::buildPathVector$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
buildReedsShepp	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::buildReedsShepp(const JointPtr_t rz,$/;"	f	class:hpp::core::ReedsSheppPath
canReach	src/connected-component.cc	/^    bool ConnectedComponent::canReach (const ConnectedComponentPtr_t& cc)$/;"	f	class:hpp::core::ConnectedComponent
canReach	src/connected-component.cc	/^    bool ConnectedComponent::canReach$/;"	f	class:hpp::core::ConnectedComponent
centerOfMassComputations	include/hpp/core/problem-solver.hh	/^      Container <CenterOfMassComputationPtr_t>  centerOfMassComputations;$/;"	m	class:hpp::core::ProblemSolver
check	src/problem-target/goal-configurations.cc	/^      void GoalConfigurations::check (const RoadmapPtr_t& \/*roadmap*\/) const$/;"	f	class:hpp::core::problemTarget::GoalConfigurations
check	src/problem-target/task-target.cc	/^      void TaskTarget::check (const RoadmapPtr_t&) const$/;"	f	class:hpp::core::problemTarget::TaskTarget
check	src/relative-motion.cc	/^      template <bool GisIdentity> struct check<ImplicitFunction<GisIdentity> > {$/;"	s	namespace:hpp::core::__anon26	file:
check	src/relative-motion.cc	/^      template <typename T, typename Ptr_t = boost::shared_ptr<T> > struct check {$/;"	s	namespace:hpp::core::__anon26	file:
checkCollision	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       fcl::CollisionResult checkCollision (const Configuration_t& q, bool enableContact)$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
checkHessian	src/path-optimization/spline-gradient-based-constraint.cc	/^        bool SplineGradientBasedConstraint<_PB, _SO>::checkHessian$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
checkHessian	src/path-optimization/spline-gradient-based.cc	/^      bool SplineGradientBased<_PB, _SO>::checkHessian$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
checkHessian	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      bool SplineGradientBased<_PB, _SO>::checkHessian$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
checkOptimum_	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^          bool checkOptimum_;$/;"	m	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
checkOptimum_	include/hpp/core/path-optimization/spline-gradient-based.hh	/^          bool checkOptimum_;$/;"	m	class:hpp::core::pathOptimization::SplineGradientBased
checkParameterized	include/hpp/core/collision-validation.hh	/^      bool checkParameterized () const$/;"	f	class:hpp::core::CollisionValidation
checkParameterized	include/hpp/core/collision-validation.hh	/^      void checkParameterized (bool active)$/;"	f	class:hpp::core::CollisionValidation
checkParameterized_	include/hpp/core/collision-validation.hh	/^      bool checkParameterized_;$/;"	m	class:hpp::core::CollisionValidation
checkPath	src/path.cc	/^    void Path::checkPath () const$/;"	f	class:hpp::core::Path
checkProblem	src/problem.cc	/^    void Problem::checkProblem () const$/;"	f	class:hpp::core::Problem
checkTimeParameterization	src/path-optimization/simple-time-parameterization.cc	/^        void checkTimeParameterization (const TimeParameterizationPtr_t tp,$/;"	f	namespace:hpp::core::pathOptimization::__anon11
clean	src/connected-component.cc	/^    void ConnectedComponent::clean (RawPtrs_t& set)$/;"	f	class:hpp::core::ConnectedComponent
clear	include/hpp/core/container.hh	/^      void clear () { map.clear (); }$/;"	f	struct:hpp::core::Container
clear	src/config-validations.cc	/^    void ConfigValidations::clear ()$/;"	f	class:hpp::core::ConfigValidations
clear	src/continuous-collision-checking/intervals.hh	/^	void clear ()$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
clear	src/nearest-neighbor/basic.hh	/^      virtual void clear ()$/;"	f	class:hpp::core::nearestNeighbor::Basic
clear	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::clear() {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
clear	src/roadmap.cc	/^    void Roadmap::clear ()$/;"	f	class:hpp::core::Roadmap
clearConfigValidations	src/problem-solver.cc	/^    void ProblemSolver::clearConfigValidations ()$/;"	f	class:hpp::core::ProblemSolver
clearConfigValidations	src/problem.cc	/^    void Problem::clearConfigValidations ()$/;"	f	class:hpp::core::Problem
clearPathOptimizers	src/problem-solver.cc	/^    void ProblemSolver::clearPathOptimizers ()$/;"	f	class:hpp::core::ProblemSolver
clone	src/distance/reeds-shepp.cc	/^      DistancePtr_t ReedsShepp::clone () const$/;"	f	class:hpp::core::distance::ReedsShepp
clone	src/weighed-distance.cc	/^    DistancePtr_t WeighedDistance::clone () const$/;"	f	class:hpp::core::WeighedDistance
closed_	src/astar.hh	/^      Nodes_t closed_;$/;"	m	class:hpp::core::Astar
coefficients_	src/continuous-collision-checking/body-pair-collision.hh	/^	CoefficientVelocities_t coefficients_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
coefs_	src/continuous-collision-checking/path-velocity.hh	/^	CoefficientVelocities_t const* coefs_;$/;"	m	struct:hpp::core::continuousCollisionChecking::PathVelocity
collide	src/collision-validation.cc	/^      inline bool collide (const CollisionPairs_t& pairs,$/;"	f	namespace:hpp::core::__anon9
collide	src/collision-validation.cc	/^      inline std::size_t collide (const CollisionPairs_t::const_iterator& _colPair,$/;"	f	namespace:hpp::core::__anon9
collisionFreeInterval	src/continuous-collision-checking/path-velocity.hh	/^        value_type collisionFreeInterval(const value_type& t,$/;"	f	struct:hpp::core::continuousCollisionChecking::PathVelocity
collisionObstacles	src/problem-solver.cc	/^    const ObjectStdVector_t& ProblemSolver::collisionObstacles () const$/;"	f	class:hpp::core::ProblemSolver
collisionObstacles	src/problem.cc	/^    const ObjectStdVector_t& Problem::collisionObstacles () const$/;"	f	class:hpp::core::Problem
collisionObstacles	src/problem.cc	/^    void Problem::collisionObstacles (const ObjectStdVector_t& collisionObstacles)$/;"	f	class:hpp::core::Problem
collisionObstacles_	include/hpp/core/problem-solver.hh	/^      ObjectStdVector_t collisionObstacles_; \/\/ FIXME should be removed?$/;"	m	class:hpp::core::ProblemSolver
collisionObstacles_	include/hpp/core/problem.hh	/^      ObjectStdVector_t collisionObstacles_;$/;"	m	class:hpp::core::Problem
collisionPairs	include/hpp/core/distance-between-objects.hh	/^	collisionPairs () const {return collisionPairs_;};$/;"	f	class:hpp::core::DistanceBetweenObjects
collisionPairs_	include/hpp/core/collision-validation.hh	/^      CollisionPairs_t collisionPairs_,$/;"	m	class:hpp::core::CollisionValidation
collisionPairs_	include/hpp/core/distance-between-objects.hh	/^      CollisionPairs_t collisionPairs_;$/;"	m	class:hpp::core::DistanceBetweenObjects
collisionRequest_	include/hpp/core/collision-validation.hh	/^      fcl::CollisionRequest collisionRequest_;$/;"	m	class:hpp::core::CollisionValidation
comcMap_	include/hpp/core/problem-solver.hh	/^      CenterOfMassComputationMap_t comcMap_;$/;"	m	class:hpp::core::ProblemSolver
comparisonType	src/equation.cc	/^    const ComparisonTypes_t& Equation::comparisonType () const$/;"	f	class:hpp::core::Equation
comparisonType	src/equation.cc	/^    void Equation::comparisonType (const ComparisonTypes_t& comp)$/;"	f	class:hpp::core::Equation
comparisonType	src/problem-solver.cc	/^    ComparisonTypes_t ProblemSolver::comparisonType (const std::string& name) const$/;"	f	class:hpp::core::ProblemSolver
comparisonType	src/problem-solver.cc	/^    void ProblemSolver::comparisonType (const std::string& name,$/;"	f	class:hpp::core::ProblemSolver
comparison_	include/hpp/core/equation.hh	/^        ComparisonTypes_t comparison_;$/;"	m	class:hpp::core::Equation
complement	src/explicit-numerical-constraint.cc	/^    void complement (size_type size, const segments_t& intervals,$/;"	f	namespace:hpp::core
compressHessian	src/path-optimization/gradient-based.cc	/^      void GradientBased::compressHessian (matrixIn_t normal, matrixOut_t small)$/;"	f	class:hpp::core::pathOptimization::GradientBased
compressMatrix	src/config-projector.cc	/^    void ConfigProjector::compressMatrix (matrixIn_t normal,$/;"	f	class:hpp::core::ConfigProjector
compressMatrix	src/constraint-set.cc	/^    void ConstraintSet::compressMatrix (matrixIn_t normal, matrixOut_t small,$/;"	f	class:hpp::core::ConstraintSet
compressVector	src/config-projector.cc	/^    void ConfigProjector::compressVector (vectorIn_t normal,$/;"	f	class:hpp::core::ConfigProjector
compressVector	src/constraint-set.cc	/^    void ConstraintSet::compressVector (vectorIn_t normal,$/;"	f	class:hpp::core::ConstraintSet
compressVector	src/path-optimization/gradient-based.cc	/^      void GradientBased::compressVector (vectorIn_t normal,$/;"	f	class:hpp::core::pathOptimization::GradientBased
computeActiveParameters	src/path-optimization/spline-gradient-based-constraint.cc	/^        Eigen::RowBlockIndices SplineGradientBasedConstraint<_PB, _SO>::computeActiveParameters$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
computeActiveParameters	src/path-optimization/spline-gradient-based.cc	/^      Eigen::RowBlockIndices SplineGradientBased<_PB, _SO>::computeActiveParameters$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
computeActiveParameters	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      Eigen::RowBlockIndices SplineGradientBased<_PB, _SO>::computeActiveParameters$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
computeAngle	src/steering-method/car-like.cc	/^      inline value_type CarLike::computeAngle(const JointPtr_t wheel) const$/;"	f	class:hpp::core::steeringMethod::CarLike
computeCoefficients	src/continuous-collision-checking/body-pair-collision.hh	/^	void computeCoefficients ()$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
computeConstraint	src/path-optimization/collision-constraints-result.hh	/^	void computeConstraint ()$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
computeDistances	src/distance-between-objects.cc	/^    void DistanceBetweenObjects::computeDistances ()$/;"	f	class:hpp::core::DistanceBetweenObjects
computeHermiteLength	src/path/hermite.cc	/^      void Hermite::computeHermiteLength ()$/;"	f	class:hpp::core::path::Hermite
computeIterate	src/path-optimization/gradient-based.cc	/^      vector_t GradientBased::computeIterate (vectorIn_t) const$/;"	f	class:hpp::core::pathOptimization::GradientBased
computeJacobian	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       void computeJacobian()$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
computeJacobianBlocks	src/implicit-function.hh	/^      void computeJacobianBlocks ()$/;"	f	class:hpp::core::ImplicitFunction
computeLLT	src/path-optimization/quadratic-program.cc	/^      void QuadraticProgram::computeLLT()$/;"	f	class:hpp::core::pathOptimization::QuadraticProgram
computeLLT	src/path-optimization/spline-gradient-based-constraint.cc	/^          void computeLLT()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
computeLLT	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void computeLLT()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
computeLambda	src/path-optimization/path-length.cc	/^      void PathLength::computeLambda (const PathVectorPtr_t& path) const$/;"	f	class:hpp::core::pathOptimization::PathLength
computeMaximalVelocity	src/continuous-collision-checking/path-velocity.hh	/^	value_type computeMaximalVelocity (vectorIn_t v) const$/;"	f	struct:hpp::core::continuousCollisionChecking::PathVelocity
computePath	src/path-planner.cc	/^    PathVectorPtr_t PathPlanner::computePath () const$/;"	f	class:hpp::core::PathPlanner
computePath	src/problem-target/goal-configurations.cc	/^      PathVectorPtr_t GoalConfigurations::computePath(const RoadmapPtr_t& roadmap) const$/;"	f	class:hpp::core::problemTarget::GoalConfigurations
computePath	src/problem-target/task-target.cc	/^      PathVectorPtr_t TaskTarget::computePath(const RoadmapPtr_t& roadmap) const$/;"	f	class:hpp::core::problemTarget::TaskTarget
computePermutation	src/parser/roadmap-factory.cc	/^      void RoadmapFactory::computePermutation ($/;"	f	class:hpp::core::parser::RoadmapFactory
computeRadius	src/steering-method/car-like.cc	/^      void CarLike::computeRadius ()$/;"	f	class:hpp::core::steeringMethod::CarLike
computeRank	include/hpp/core/path-optimization/linear-constraint.hh	/^        void computeRank ()$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
computeSequenceOfJoints	src/continuous-collision-checking/body-pair-collision.hh	/^	void computeSequenceOfJoints ()$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
computeSolution	include/hpp/core/path-optimization/linear-constraint.hh	/^        void computeSolution (const vector_t& v)$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
computeTimeParameterizationFirstOrder	src/path-optimization/simple-time-parameterization.cc	/^        TimeParameterizationPtr_t computeTimeParameterizationFirstOrder ($/;"	f	namespace:hpp::core::pathOptimization::__anon11
computeTimeParameterizationThirdOrder	src/path-optimization/simple-time-parameterization.cc	/^        TimeParameterizationPtr_t computeTimeParameterizationThirdOrder ($/;"	f	namespace:hpp::core::pathOptimization::__anon11
computeValue	src/implicit-function.hh	/^        void computeValue (const LiegroupElement& qOut) const$/;"	f	struct:hpp::core::ImplicitFunction::GenericGData
computeValue	src/implicit-function.hh	/^        void computeValue (const LiegroupElement&) const {}$/;"	f	struct:hpp::core::ImplicitFunction::IdentityData
computeValueAndJacobian	src/config-projector.cc	/^    void ConfigProjector::computeValueAndJacobian$/;"	f	class:hpp::core::ConfigProjector
computeValueAndJacobian	src/problem-solver.cc	/^    void ProblemSolver::computeValueAndJacobian$/;"	f	class:hpp::core::ProblemSolver
computeWeight	src/weighed-distance.cc	/^        template<int NR> static value_type computeWeight ($/;"	f	struct:hpp::core::__anon17::ComputeWeightStep
computeWeights	src/weighed-distance.cc	/^    void WeighedDistance::computeWeights ()$/;"	f	class:hpp::core::WeighedDistance
compute_d	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline void compute_d(VectorXd &d, const MatrixXd& J, const VectorXd& np)$/;"	f	namespace:Eigen
concatenate	include/hpp/core/path-optimization/linear-constraint.hh	/^        void concatenate (const LinearConstraint& oc)$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
concatenate	src/path-vector.cc	/^    void PathVector::concatenate (const PathVector& path)$/;"	f	class:hpp::core::PathVector
concatenate	src/path-vector.cc	/^    void PathVector::concatenate (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::PathVector
configAtParam	include/hpp/core/path.hh	/^      Configuration_t configAtParam (const value_type& param, bool& success) const$/;"	f	class:hpp::core::Path
configProjector	src/constraint-set.cc	/^    ConfigProjectorPtr_t ConstraintSet::configProjector () const$/;"	f	class:hpp::core::ConstraintSet
configProjectorIt_	include/hpp/core/constraint-set.hh	/^      Constraints_t::iterator configProjectorIt_;$/;"	m	class:hpp::core::ConstraintSet
configProjector_	src/path-optimization/collision-constraints-result.hh	/^	ConfigProjectorPtr_t configProjector_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
configSize	src/locked-joint.cc	/^    size_type LockedJoint::configSize () const$/;"	f	class:hpp::core::LockedJoint
configSize_	include/hpp/core/path-optimization/gradient-based.hh	/^	size_type configSize_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
configSize_	include/hpp/core/path-optimization/path-length.hh	/^	size_type configSize_;$/;"	m	class:hpp::core::pathOptimization::PathLength
configSpace	src/locked-joint.cc	/^    const LiegroupSpacePtr_t& LockedJoint::configSpace () const$/;"	f	class:hpp::core::LockedJoint
configSpace_	include/hpp/core/locked-joint.hh	/^      LiegroupSpacePtr_t configSpace_;$/;"	m	class:hpp::core::LockedJoint
configValidation	include/hpp/core/problem.hh	/^      void configValidation (const ConfigValidationsPtr_t& configValidations)$/;"	f	class:hpp::core::Problem
configValidationTypes	include/hpp/core/problem-solver.hh	/^      const ConfigValidationTypes_t configValidationTypes () {$/;"	f	class:hpp::core::ProblemSolver
configValidationTypes_	include/hpp/core/problem-solver.hh	/^      ConfigValidationTypes_t configValidationTypes_;$/;"	m	class:hpp::core::ProblemSolver
configValidations	include/hpp/core/problem-solver.hh	/^      Container <ConfigValidationBuilder_t>     configValidations;$/;"	m	class:hpp::core::ProblemSolver
configValidations	include/hpp/core/problem.hh	/^      const ConfigValidationsPtr_t& configValidations () const$/;"	f	class:hpp::core::Problem
configValidations_	include/hpp/core/discretized-path-validation.hh	/^      ConfigValidationsPtr_t configValidations_;$/;"	m	class:hpp::core::DiscretizedPathValidation
configValidations_	include/hpp/core/problem.hh	/^      ConfigValidationsPtr_t configValidations_;$/;"	m	class:hpp::core::Problem
configs_	include/hpp/core/interpolated-path.hh	/^      InterpolationPoints_t configs_;$/;"	m	class:hpp::core::InterpolatedPath
configuration	src/node.cc	/^    ConfigurationPtr_t Node::configuration () const$/;"	f	class:hpp::core::Node
configurationReport	include/hpp/core/path-validation-report.hh	/^      ValidationReportPtr_t configurationReport;$/;"	m	struct:hpp::core::PathValidationReport
configurationShooter	include/hpp/core/problem.hh	/^      ConfigurationShooterPtr_t configurationShooter () const$/;"	f	class:hpp::core::Problem
configurationShooter	src/diffusing-planner.cc	/^    void DiffusingPlanner::configurationShooter$/;"	f	class:hpp::core::DiffusingPlanner
configurationShooter	src/problem.cc	/^    void Problem::configurationShooter (const ConfigurationShooterPtr_t& configurationShooter)$/;"	f	class:hpp::core::Problem
configurationShooterType	include/hpp/core/problem-solver.hh	/^      const std::string& configurationShooterType () const {$/;"	f	class:hpp::core::ProblemSolver
configurationShooterType	src/problem-solver.cc	/^    void ProblemSolver::configurationShooterType (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
configurationShooterType_	include/hpp/core/problem-solver.hh	/^      std::string configurationShooterType_;$/;"	m	class:hpp::core::ProblemSolver
configurationShooter_	include/hpp/core/bi-rrt-planner.hh	/^      ConfigurationShooterPtr_t configurationShooter_;$/;"	m	class:hpp::core::BiRRTPlanner
configurationShooter_	include/hpp/core/diffusing-planner.hh	/^      ConfigurationShooterPtr_t configurationShooter_;$/;"	m	class:hpp::core::DiffusingPlanner
configurationShooter_	include/hpp/core/problem.hh	/^      ConfigurationShooterPtr_t configurationShooter_;$/;"	m	class:hpp::core::Problem
configurationShooters	include/hpp/core/problem-solver.hh	/^      Container <ConfigurationShooterBuilder_t> configurationShooters;$/;"	m	class:hpp::core::ProblemSolver
configuration_	include/hpp/core/node.hh	/^      ConfigurationPtr_t configuration_;$/;"	m	class:hpp::core::Node
connect	src/roadmap.cc	/^    void Roadmap::connect (const ConnectedComponentPtr_t& cc1,$/;"	f	class:hpp::core::Roadmap
connectInitAndGoal	src/path-planner/k-prm-star.cc	/^      void kPrmStar::connectInitAndGoal ()$/;"	f	class:hpp::core::pathPlanner::kPrmStar
connectNodeToClosestNeighbors	src/path-planner/k-prm-star.cc	/^      void kPrmStar::connectNodeToClosestNeighbors (const NodePtr_t& node)$/;"	f	class:hpp::core::pathPlanner::kPrmStar
connectedComponent	src/node.cc	/^    ConnectedComponentPtr_t Node::connectedComponent () const$/;"	f	class:hpp::core::Node
connectedComponent	src/node.cc	/^    void Node::connectedComponent (const ConnectedComponentPtr_t& cc)$/;"	f	class:hpp::core::Node
connectedComponent_	include/hpp/core/node.hh	/^      ConnectedComponentPtr_t connectedComponent_;$/;"	m	class:hpp::core::Node
connectedComponents	src/roadmap.cc	/^    const ConnectedComponents_t& Roadmap::connectedComponents () const$/;"	f	class:hpp::core::Roadmap
connectedComponents_	include/hpp/core/roadmap.hh	/^      ConnectedComponents_t connectedComponents_;$/;"	m	class:hpp::core::Roadmap
const_iterator	include/hpp/core/container.hh	/^      typedef typename Map_t::const_iterator const_iterator;$/;"	t	struct:hpp::core::Container
constantRightHandSide	src/equation.cc	/^    bool Equation::constantRightHandSide () const$/;"	f	class:hpp::core::Equation
constrApply_	include/hpp/core/visibility-prm-planner.hh	/^      bool constrApply_; \/\/ True if applyConstraints has successed$/;"	m	class:hpp::core::VisibilityPrmPlanner
constraints	include/hpp/core/path.hh	/^      const ConstraintSetPtr_t& constraints () const$/;"	f	class:hpp::core::Path
constraints	include/hpp/core/path.hh	/^      void constraints (const ConstraintSetPtr_t& constraint) {$/;"	f	class:hpp::core::Path
constraints	include/hpp/core/problem-solver.hh	/^      const ConstraintSetPtr_t& constraints () const$/;"	f	class:hpp::core::ProblemSolver
constraints	include/hpp/core/problem-target/task-target.hh	/^          void constraints (const ConstraintSetPtr_t& c)$/;"	f	class:hpp::core::problemTarget::TaskTarget
constraints	include/hpp/core/problem.hh	/^      const ConstraintSetPtr_t& constraints () const$/;"	f	class:hpp::core::Problem
constraints	include/hpp/core/problem.hh	/^      void constraints (const ConstraintSetPtr_t& constraints)$/;"	f	class:hpp::core::Problem
constraints	include/hpp/core/steering-method.hh	/^      const ConstraintSetPtr_t& constraints () const$/;"	f	class:hpp::core::SteeringMethod
constraints	include/hpp/core/steering-method.hh	/^      void constraints (const ConstraintSetPtr_t& constraints)$/;"	f	class:hpp::core::SteeringMethod
constraintsSatisfied	src/path-optimization/gradient-based.cc	/^      bool GradientBased::constraintsSatisfied$/;"	f	class:hpp::core::pathOptimization::GradientBased
constraints_	include/hpp/core/constraint-set.hh	/^      Constraints_t constraints_;$/;"	m	class:hpp::core::ConstraintSet
constraints_	include/hpp/core/path.hh	/^      ConstraintSetPtr_t constraints_;$/;"	m	class:hpp::core::Path
constraints_	include/hpp/core/problem-solver.hh	/^      ConstraintSetPtr_t constraints_;$/;"	m	class:hpp::core::ProblemSolver
constraints_	include/hpp/core/problem-target/task-target.hh	/^          ConstraintSetPtr_t constraints_;$/;"	m	class:hpp::core::problemTarget::TaskTarget
constraints_	include/hpp/core/problem.hh	/^      ConstraintSetPtr_t constraints_;$/;"	m	class:hpp::core::Problem
constraints_	include/hpp/core/steering-method.hh	/^      ConstraintSetPtr_t constraints_;$/;"	m	class:hpp::core::SteeringMethod
contactPoint_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^        vector3_t contactPoint_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
contains	src/config-projector.cc	/^    bool ConfigProjector::contains$/;"	f	class:hpp::core::ConfigProjector
contains	src/continuous-collision-checking/intervals.hh	/^	bool contains (const interval_t& interval) const$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
contains	src/continuous-collision-checking/intervals.hh	/^	bool contains (const value_type& value, bool reverse = false) const$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
continuousCollisionChecking	include/hpp/core/continuous-collision-checking.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	include/hpp/core/continuous-collision-checking/dichotomy.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	include/hpp/core/continuous-collision-checking/progressive.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	include/hpp/core/fwd.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	src/continuous-collision-checking/body-pair-collision.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	src/continuous-collision-checking/dichotomy.cc	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core	file:
continuousCollisionChecking	src/continuous-collision-checking/intervals.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	src/continuous-collision-checking/path-velocity.hh	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core
continuousCollisionChecking	src/continuous-collision-checking/progressive.cc	/^    namespace continuousCollisionChecking {$/;"	n	namespace:hpp::core	file:
continuous_interval	src/continuous-collision-checking/body-pair-collision.hh	/^        typedef boost::icl::continuous_interval<value_type> continuous_interval;$/;"	t	class:hpp::core::continuousCollisionChecking::BodyPairCollision
copy	include/hpp/core/dubins-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::DubinsPath
copy	include/hpp/core/dubins-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::DubinsPath
copy	include/hpp/core/interpolated-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::InterpolatedPath
copy	include/hpp/core/interpolated-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::InterpolatedPath
copy	include/hpp/core/path-vector.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::PathVector
copy	include/hpp/core/path-vector.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::PathVector
copy	include/hpp/core/path/hermite.hh	/^        virtual PathPtr_t copy () const$/;"	f	class:hpp::core::path::Hermite
copy	include/hpp/core/path/hermite.hh	/^        virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::path::Hermite
copy	include/hpp/core/path/spline.hh	/^          PathPtr_t copy () const$/;"	f	class:hpp::core::path::Spline
copy	include/hpp/core/path/spline.hh	/^          PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::path::Spline
copy	include/hpp/core/reeds-shepp-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::ReedsSheppPath
copy	include/hpp/core/reeds-shepp-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::ReedsSheppPath
copy	include/hpp/core/steering-method/constant-curvature.hh	/^        virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
copy	include/hpp/core/steering-method/dubins.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Dubins
copy	include/hpp/core/steering-method/hermite.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Hermite
copy	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Interpolated
copy	include/hpp/core/steering-method/reeds-shepp.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
copy	include/hpp/core/steering-method/snibud.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Snibud
copy	include/hpp/core/steering-method/spline.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Spline
copy	include/hpp/core/steering-method/straight.hh	/^          virtual SteeringMethodPtr_t copy () const$/;"	f	class:hpp::core::steeringMethod::Straight
copy	include/hpp/core/straight-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::StraightPath
copy	include/hpp/core/straight-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::StraightPath
copy	include/hpp/core/subchain-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::SubchainPath
copy	include/hpp/core/subchain-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::SubchainPath
copy	include/hpp/core/time-parameterization/polynomial.hh	/^          TimeParameterizationPtr_t copy () const$/;"	f	class:hpp::core::timeParameterization::Polynomial
copy	src/config-projector.cc	/^    ConstraintPtr_t ConfigProjector::copy () const$/;"	f	class:hpp::core::ConfigProjector
copy	src/constraint-set.cc	/^    ConstraintPtr_t ConstraintSet::copy () const$/;"	f	class:hpp::core::ConstraintSet
copy	src/explicit-numerical-constraint.cc	/^    EquationPtr_t ExplicitNumericalConstraint::copy () const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
copy	src/extracted-path.hh	/^      virtual PathPtr_t copy () const$/;"	f	class:hpp::core::ExtractedPath
copy	src/extracted-path.hh	/^      virtual PathPtr_t copy (const ConstraintSetPtr_t& constraints) const$/;"	f	class:hpp::core::ExtractedPath
copy	src/locked-joint.cc	/^    EquationPtr_t LockedJoint::copy () const$/;"	f	class:hpp::core::LockedJoint
copy	src/numerical-constraint.cc	/^    EquationPtr_t NumericalConstraint::copy () const$/;"	f	class:hpp::core::NumericalConstraint
copy	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::copy$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
copy	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::copy$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
copy	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::copy$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
copy	src/path.cc	/^          TimeParameterizationPtr_t copy () const$/;"	f	class:hpp::core::timeParameterization::Shift
copy	src/steering-method/constant-curvature.cc	/^      PathPtr_t ConstantCurvature::copy () const$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
core	include/hpp/core/basic-configuration-shooter.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/bi-rrt-planner.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/collision-path-validation-report.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/collision-validation-report.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/collision-validation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/config-projector.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/config-validation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/config-validations.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/configuration-shooter.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/connected-component.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/constraint-set.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/container.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/continuous-collision-checking.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/continuous-collision-checking/dichotomy.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/continuous-collision-checking/progressive.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/diffusing-planner.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/discretized-collision-checking.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/discretized-path-validation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/distance-between-objects.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/distance.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/distance/reeds-shepp.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/dubins-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/edge.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/equation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/explicit-numerical-constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/explicit-relative-transformation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/fwd.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/interpolated-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/joint-bound-validation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/locked-joint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/nearest-neighbor.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/node.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/numerical-constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/parser/roadmap-factory.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/config-optimization.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/cost.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/gradient-based.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/linear-constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/partial-shortcut.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/path-length.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/quadratic-program.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/simple-time-parameterization.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimization/spline-gradient-based.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-optimizer.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-planner.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-planner/k-prm-star.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-projector.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-projector/dichotomy.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-projector/global.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-projector/progressive.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-projector/recursive-hermite.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-validation-report.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-validation.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-validations.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path-vector.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path/hermite.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/path/spline.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/plan-and-optimize.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/problem-solver.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/problem-target.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/problem-target/goal-configurations.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/problem-target/task-target.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/problem.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/projection-error.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/random-shortcut.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/reeds-shepp-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/relative-motion.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/roadmap.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/car-like.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/constant-curvature.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/dubins.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/fwd.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/hermite.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/interpolated-steering-method.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/reeds-shepp.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/snibud.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/spline.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/steering-method/straight.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/straight-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/subchain-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/time-parameterization.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/time-parameterization/polynomial.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/validation-report.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/visibility-prm-planner.hh	/^  namespace core {$/;"	n	namespace:hpp
core	include/hpp/core/weighed-distance.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/astar.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/bi-rrt-planner.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/collision-validation.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/config-projector.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/config-validations.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/connected-component.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/constraint-set.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/constraint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/continuous-collision-checking.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/continuous-collision-checking/body-pair-collision.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/continuous-collision-checking/dichotomy.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/continuous-collision-checking/intervals.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/continuous-collision-checking/path-velocity.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/continuous-collision-checking/progressive.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/diffusing-planner.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/discretized-collision-checking.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/discretized-path-validation.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/distance-between-objects.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/distance/reeds-shepp.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/dubins-path.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/equation.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/explicit-numerical-constraint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/explicit-relative-transformation.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/extracted-path.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/implicit-function.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/interpolated-path.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/joint-bound-validation.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/locked-joint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/nearest-neighbor/basic.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/nearest-neighbor/basic.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/nearest-neighbor/k-d-tree.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/nearest-neighbor/k-d-tree.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/node.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/numerical-constraint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/parser/roadmap-factory.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/collision-constraints-result.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/path-optimization/config-optimization.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/gradient-based.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/linear-constraint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/partial-shortcut.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/path-length.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/quadratic-program.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/simple-time-parameterization.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/spline-gradient-based-abstract.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/spline-gradient-based-constraint.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/spline-gradient-based.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/path-optimization/spline-gradient-based/cost.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-optimizer.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-planner.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-planner/k-prm-star.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-projector.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-projector/dichotomy.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-projector/global.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-projector/progressive.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-projector/recursive-hermite.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-validations.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path-vector.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path/hermite.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/path/spline.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/plan-and-optimize.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/problem-solver.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/problem-target/goal-configurations.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/problem-target/task-target.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/problem.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/random-shortcut.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/reeds-shepp-path.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/relative-motion.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/roadmap.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/car-like.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/constant-curvature.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/dubins.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/reeds-shepp.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/snibud.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/steering-method/spline.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/straight-path.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/times-frame-function.hh	/^  namespace core {$/;"	n	namespace:hpp
core	src/visibility-prm-planner.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
core	src/weighed-distance.cc	/^  namespace core {$/;"	n	namespace:hpp	file:
costFromStart_	src/astar.hh	/^      std::map <NodePtr_t, value_type> costFromStart_;$/;"	m	class:hpp::core::Astar
cost_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable CostPtr_t cost_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
cost_	src/astar.hh	/^	std::map <NodePtr_t, value_type>& cost_;$/;"	m	struct:hpp::core::Astar::SortFunctor
create	include/hpp/core/basic-configuration-shooter.hh	/^      static BasicConfigurationShooterPtr_t create (const DevicePtr_t& robot)$/;"	f	class:hpp::core::BasicConfigurationShooter
create	include/hpp/core/connected-component.hh	/^      static ConnectedComponentPtr_t create ()$/;"	f	class:hpp::core::ConnectedComponent
create	include/hpp/core/constraint-set.hh	/^      static ConstraintSetPtr_t create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::ConstraintSet
create	include/hpp/core/interpolated-path.hh	/^      static InterpolatedPathPtr_t create (const DevicePtr_t& device,$/;"	f	class:hpp::core::InterpolatedPath
create	include/hpp/core/parser/roadmap-factory.hh	/^          static ObjectFactory* create ($/;"	f	class:hpp::core::parser::RoadmapFactory
create	include/hpp/core/path-projector/dichotomy.hh	/^          static DichotomyPtr_t create$/;"	f	class:hpp::core::pathProjector::Dichotomy
create	include/hpp/core/path-vector.hh	/^      static PathVectorPtr_t create (size_type outputSize,$/;"	f	class:hpp::core::PathVector
create	include/hpp/core/path/hermite.hh	/^        static HermitePtr_t create (const DevicePtr_t& device,$/;"	f	class:hpp::core::path::Hermite
create	include/hpp/core/path/spline.hh	/^          static Ptr_t create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::path::Spline
create	include/hpp/core/steering-method/dubins.hh	/^          static DubinsPtr_t create (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::Dubins
create	include/hpp/core/steering-method/hermite.hh	/^          static HermitePtr_t create  (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::Hermite
create	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          static InterpolatedPtr_t create (const DevicePtr_t& device)$/;"	f	class:hpp::core::steeringMethod::Interpolated
create	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          static InterpolatedPtr_t create (const DevicePtr_t& device,$/;"	f	class:hpp::core::steeringMethod::Interpolated
create	include/hpp/core/steering-method/reeds-shepp.hh	/^          static ReedsSheppPtr_t create (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
create	include/hpp/core/steering-method/snibud.hh	/^          static SnibudPtr_t create (const Problem& problem,$/;"	f	class:hpp::core::steeringMethod::Snibud
create	include/hpp/core/steering-method/spline.hh	/^          static Ptr_t create (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::Spline
create	include/hpp/core/steering-method/straight.hh	/^          static StraightPtr_t create (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::Straight
create	include/hpp/core/straight-path.hh	/^      static StraightPathPtr_t create (const DevicePtr_t& device,$/;"	f	class:hpp::core::StraightPath
create	include/hpp/core/subchain-path.hh	/^      create (const PathPtr_t& original, const segments_t& intervals)$/;"	f	class:hpp::core::SubchainPath
create	src/bi-rrt-planner.cc	/^    BiRRTPlannerPtr_t BiRRTPlanner::create (const Problem& problem)$/;"	f	class:hpp::core::BiRRTPlanner
create	src/collision-validation.cc	/^    CollisionValidationPtr_t CollisionValidation::create$/;"	f	class:hpp::core::CollisionValidation
create	src/config-projector.cc	/^    ConfigProjectorPtr_t ConfigProjector::create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::ConfigProjector
create	src/config-validations.cc	/^    ConfigValidationsPtr_t ConfigValidations::create ()$/;"	f	class:hpp::core::ConfigValidations
create	src/continuous-collision-checking/body-pair-collision.hh	/^	static BodyPairCollisionPtr_t create (const JointPtr_t& joint_a,$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
create	src/continuous-collision-checking/dichotomy.cc	/^      Dichotomy::create (const DevicePtr_t& robot, const value_type& tolerance)$/;"	f	class:hpp::core::continuousCollisionChecking::Dichotomy
create	src/continuous-collision-checking/progressive.cc	/^      ProgressivePtr_t Progressive::create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::continuousCollisionChecking::Progressive
create	src/diffusing-planner.cc	/^    DiffusingPlannerPtr_t DiffusingPlanner::create (const Problem& problem)$/;"	f	class:hpp::core::DiffusingPlanner
create	src/discretized-collision-checking.cc	/^    DiscretizedCollisionChecking::create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::DiscretizedCollisionChecking
create	src/discretized-path-validation.cc	/^    DiscretizedPathValidation::create (const DevicePtr_t& robot,$/;"	f	class:hpp::core::DiscretizedPathValidation
create	src/distance/reeds-shepp.cc	/^      ReedsSheppPtr_t ReedsShepp::create (const Problem& problem)$/;"	f	class:hpp::core::distance::ReedsShepp
create	src/distance/reeds-shepp.cc	/^      ReedsSheppPtr_t ReedsShepp::create$/;"	f	class:hpp::core::distance::ReedsShepp
create	src/dubins-path.cc	/^    DubinsPathPtr_t DubinsPath::create (const DevicePtr_t& device,$/;"	f	class:hpp::core::DubinsPath
create	src/explicit-numerical-constraint.cc	/^    ExplicitNumericalConstraintPtr_t ExplicitNumericalConstraint::create$/;"	f	class:hpp::core::ExplicitNumericalConstraint
create	src/explicit-relative-transformation.cc	/^    ExplicitRelativeTransformationPtr_t ExplicitRelativeTransformation::create$/;"	f	class:hpp::core::ExplicitRelativeTransformation
create	src/extracted-path.hh	/^      create (const PathPtr_t& original, const interval_t& subInterval)$/;"	f	class:hpp::core::ExtractedPath
create	src/implicit-function.hh	/^      static Ptr_t create$/;"	f	class:hpp::core::ImplicitFunction
create	src/interpolated-path.cc	/^    InterpolatedPathPtr_t InterpolatedPath::create (const PathPtr_t& path,$/;"	f	class:hpp::core::InterpolatedPath
create	src/joint-bound-validation.cc	/^    JointBoundValidationPtr_t JointBoundValidation::create$/;"	f	class:hpp::core::JointBoundValidation
create	src/locked-joint.cc	/^    LockedJointPtr_t LockedJoint::create (const DevicePtr_t& dev,$/;"	f	class:hpp::core::LockedJoint
create	src/locked-joint.cc	/^    LockedJointPtr_t LockedJoint::create (const JointPtr_t& joint,$/;"	f	class:hpp::core::LockedJoint
create	src/numerical-constraint.cc	/^    NumericalConstraintPtr_t NumericalConstraint::create ($/;"	f	class:hpp::core::NumericalConstraint
create	src/path-optimization/collision-constraints-result.hh	/^       static CollisionConstraintPtr_t create$/;"	f	class:hpp::core::pathOptimization::CollisionConstraint
create	src/path-optimization/config-optimization.cc	/^      ConfigOptimizationPtr_t ConfigOptimization::create (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
create	src/path-optimization/gradient-based.cc	/^      GradientBasedPtr_t GradientBased::create$/;"	f	class:hpp::core::pathOptimization::GradientBased
create	src/path-optimization/partial-shortcut.cc	/^      PartialShortcutPtr_t PartialShortcut::create (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::PartialShortcut
create	src/path-optimization/path-length.cc	/^      PathLengthPtr_t PathLength::create$/;"	f	class:hpp::core::pathOptimization::PathLength
create	src/path-optimization/simple-time-parameterization.cc	/^      SimpleTimeParameterizationPtr_t SimpleTimeParameterization::create (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::SimpleTimeParameterization
create	src/path-optimization/spline-gradient-based-constraint.cc	/^        typename SplineGradientBasedConstraint<_PB, _SO>::Ptr_t SplineGradientBasedConstraint<_PB, _SO>::create$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
create	src/path-optimization/spline-gradient-based.cc	/^      typename SplineGradientBased<_PB, _SO>::Ptr_t SplineGradientBased<_PB, _SO>::create$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
create	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       static CollisionFunctionPtr_t create$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
create	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      typename SplineGradientBased<_PB, _SO>::Ptr_t SplineGradientBased<_PB, _SO>::create$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
create	src/path-planner/k-prm-star.cc	/^      kPrmStarPtr_t kPrmStar::create (const Problem& problem)$/;"	f	class:hpp::core::pathPlanner::kPrmStar
create	src/path-projector/global.cc	/^      GlobalPtr_t Global::create (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::Global
create	src/path-projector/global.cc	/^      GlobalPtr_t Global::create (const Problem& problem,$/;"	f	class:hpp::core::pathProjector::Global
create	src/path-projector/progressive.cc	/^      ProgressivePtr_t Progressive::create (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::Progressive
create	src/path-projector/progressive.cc	/^      ProgressivePtr_t Progressive::create (const Problem& problem,$/;"	f	class:hpp::core::pathProjector::Progressive
create	src/path-projector/recursive-hermite.cc	/^      RecursiveHermitePtr_t RecursiveHermite::create ($/;"	f	class:hpp::core::pathProjector::RecursiveHermite
create	src/path-projector/recursive-hermite.cc	/^      RecursiveHermitePtr_t RecursiveHermite::create (const DistancePtr_t& distance,$/;"	f	class:hpp::core::pathProjector::RecursiveHermite
create	src/path-validations.cc	/^    PathValidationsPtr_t PathValidations::create ()$/;"	f	class:hpp::core::PathValidations
create	src/path.cc	/^          static Ptr_t create (TimeParameterizationPtr_t tp, value_type t, value_type s)$/;"	f	class:hpp::core::timeParameterization::Shift
create	src/plan-and-optimize.cc	/^    PlanAndOptimize::create (const PathPlannerPtr_t& pathPlanner)$/;"	f	class:hpp::core::PlanAndOptimize
create	src/problem-solver.cc	/^      static PathProjectorPtr_t create (const Problem&,$/;"	f	struct:hpp::core::NonePathProjector
create	src/problem-solver.cc	/^      static boost::shared_ptr<Derived> create (const Problem& problem) { return Derived::create (problem); }$/;"	f	struct:hpp::core::Factory
create	src/problem-solver.cc	/^      static boost::shared_ptr<Derived> create (const Problem& problem, const value_type& value) { return Derived::create (problem, value); }$/;"	f	struct:hpp::core::FactoryPP
create	src/problem-solver.cc	/^    ProblemSolverPtr_t ProblemSolver::create ()$/;"	f	class:hpp::core::ProblemSolver
create	src/problem-target/goal-configurations.cc	/^      GoalConfigurationsPtr_t GoalConfigurations::create$/;"	f	class:hpp::core::problemTarget::GoalConfigurations
create	src/problem-target/task-target.cc	/^      TaskTargetPtr_t TaskTarget::create (const ProblemPtr_t& problem)$/;"	f	class:hpp::core::problemTarget::TaskTarget
create	src/random-shortcut.cc	/^    RandomShortcut::create (const Problem& problem)$/;"	f	class:hpp::core::RandomShortcut
create	src/reeds-shepp-path.cc	/^    ReedsSheppPathPtr_t ReedsSheppPath::create (const DevicePtr_t& device,$/;"	f	class:hpp::core::ReedsSheppPath
create	src/reeds-shepp-path.cc	/^    ReedsSheppPathPtr_t ReedsSheppPath::create (const pinocchio::DevicePtr_t& device,$/;"	f	class:hpp::core::ReedsSheppPath
create	src/roadmap.cc	/^    RoadmapPtr_t Roadmap::create (const DistancePtr_t& distance,$/;"	f	class:hpp::core::Roadmap
create	src/steering-method/constant-curvature.cc	/^      ConstantCurvaturePtr_t ConstantCurvature::create$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
create	src/visibility-prm-planner.cc	/^    VisibilityPrmPlannerPtr_t VisibilityPrmPlanner::create $/;"	f	class:hpp::core::VisibilityPrmPlanner
create	src/weighed-distance.cc	/^    WeighedDistancePtr_t WeighedDistance::create (const DevicePtr_t& robot)$/;"	f	class:hpp::core::WeighedDistance
createCopy	include/hpp/core/constraint-set.hh	/^      static ConstraintSetPtr_t createCopy (const ConstraintSetPtr_t& cs)$/;"	f	class:hpp::core::ConstraintSet
createCopy	include/hpp/core/dubins-path.hh	/^      static DubinsPathPtr_t createCopy (const DubinsPathPtr_t& path)$/;"	f	class:hpp::core::DubinsPath
createCopy	include/hpp/core/dubins-path.hh	/^      static DubinsPathPtr_t createCopy$/;"	f	class:hpp::core::DubinsPath
createCopy	include/hpp/core/interpolated-path.hh	/^      static InterpolatedPathPtr_t createCopy (const InterpolatedPathPtr_t& path)$/;"	f	class:hpp::core::InterpolatedPath
createCopy	include/hpp/core/interpolated-path.hh	/^      static InterpolatedPathPtr_t createCopy$/;"	f	class:hpp::core::InterpolatedPath
createCopy	include/hpp/core/path-vector.hh	/^      static PathVectorPtr_t createCopy (const PathVectorPtr_t& original)$/;"	f	class:hpp::core::PathVector
createCopy	include/hpp/core/path-vector.hh	/^      static PathVectorPtr_t createCopy (const PathVectorPtr_t& original,$/;"	f	class:hpp::core::PathVector
createCopy	include/hpp/core/path/hermite.hh	/^        static HermitePtr_t createCopy (const HermitePtr_t& path)$/;"	f	class:hpp::core::path::Hermite
createCopy	include/hpp/core/path/hermite.hh	/^        static HermitePtr_t createCopy$/;"	f	class:hpp::core::path::Hermite
createCopy	include/hpp/core/reeds-shepp-path.hh	/^      static ReedsSheppPathPtr_t createCopy (const ReedsSheppPathPtr_t& path)$/;"	f	class:hpp::core::ReedsSheppPath
createCopy	include/hpp/core/reeds-shepp-path.hh	/^      static ReedsSheppPathPtr_t createCopy$/;"	f	class:hpp::core::ReedsSheppPath
createCopy	include/hpp/core/steering-method/dubins.hh	/^          static DubinsPtr_t createCopy$/;"	f	class:hpp::core::steeringMethod::Dubins
createCopy	include/hpp/core/steering-method/hermite.hh	/^          static HermitePtr_t createCopy (const HermitePtr_t& other)$/;"	f	class:hpp::core::steeringMethod::Hermite
createCopy	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          static InterpolatedPtr_t createCopy (const InterpolatedPtr_t& other)$/;"	f	class:hpp::core::steeringMethod::Interpolated
createCopy	include/hpp/core/steering-method/reeds-shepp.hh	/^          static ReedsSheppPtr_t createCopy$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
createCopy	include/hpp/core/steering-method/snibud.hh	/^          static SnibudPtr_t createCopy$/;"	f	class:hpp::core::steeringMethod::Snibud
createCopy	include/hpp/core/steering-method/spline.hh	/^          static Ptr_t createCopy (const Ptr_t& other)$/;"	f	class:hpp::core::steeringMethod::Spline
createCopy	include/hpp/core/steering-method/straight.hh	/^          static StraightPtr_t createCopy$/;"	f	class:hpp::core::steeringMethod::Straight
createCopy	include/hpp/core/straight-path.hh	/^      static StraightPathPtr_t createCopy (const StraightPathPtr_t& path)$/;"	f	class:hpp::core::StraightPath
createCopy	include/hpp/core/straight-path.hh	/^      static StraightPathPtr_t createCopy$/;"	f	class:hpp::core::StraightPath
createCopy	include/hpp/core/subchain-path.hh	/^      createCopy (const SubchainPathPtr_t& path)$/;"	f	class:hpp::core::SubchainPath
createCopy	include/hpp/core/subchain-path.hh	/^      createCopy (const SubchainPathPtr_t& path,$/;"	f	class:hpp::core::SubchainPath
createCopy	src/config-projector.cc	/^    ConfigProjector::createCopy (const ConfigProjectorPtr_t cp)$/;"	f	class:hpp::core::ConfigProjector
createCopy	src/distance/reeds-shepp.cc	/^      ReedsSheppPtr_t ReedsShepp::createCopy (const ReedsSheppPtr_t& distance)$/;"	f	class:hpp::core::distance::ReedsShepp
createCopy	src/explicit-numerical-constraint.cc	/^    ExplicitNumericalConstraintPtr_t ExplicitNumericalConstraint::createCopy$/;"	f	class:hpp::core::ExplicitNumericalConstraint
createCopy	src/extracted-path.hh	/^      createCopy (const ExtractedPathPtr_t& path)$/;"	f	class:hpp::core::ExtractedPath
createCopy	src/extracted-path.hh	/^      createCopy (const ExtractedPathPtr_t& path,$/;"	f	class:hpp::core::ExtractedPath
createCopy	src/locked-joint.cc	/^    LockedJointPtr_t LockedJoint::createCopy (LockedJointConstPtr_t other)$/;"	f	class:hpp::core::LockedJoint
createCopy	src/numerical-constraint.cc	/^    NumericalConstraintPtr_t NumericalConstraint::createCopy$/;"	f	class:hpp::core::NumericalConstraint
createCopy	src/steering-method/constant-curvature.cc	/^      ConstantCurvaturePtr_t ConstantCurvature::createCopy$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
createCopy	src/weighed-distance.cc	/^    WeighedDistancePtr_t WeighedDistance::createCopy$/;"	f	class:hpp::core::WeighedDistance
createFromProblem	src/weighed-distance.cc	/^    WeighedDistancePtr_t WeighedDistance::createFromProblem$/;"	f	class:hpp::core::WeighedDistance
createNode	src/roadmap.cc	/^    NodePtr_t Roadmap::createNode (const ConfigurationPtr_t& configuration)$/;"	f	class:hpp::core::Roadmap
createNumConstraint	src/path-optimization/config-optimization.cc	/^      NumericalConstraintPtr_t ConfigOptimization::createNumConstraint$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
createNumericalConstraint	src/explicit-relative-transformation.cc	/^    ExplicitNumericalConstraintPtr_t ExplicitRelativeTransformation::createNumericalConstraint ()$/;"	f	class:hpp::core::ExplicitRelativeTransformation
createPath	src/path-projector/global.cc	/^      bool Global::createPath (const DevicePtr_t& robot,$/;"	f	class:hpp::core::pathProjector::Global
createPathOptimizers	src/problem-solver.cc	/^    void ProblemSolver::createPathOptimizers ()$/;"	f	class:hpp::core::ProblemSolver
createRobot	src/problem-solver.cc	/^    DevicePtr_t ProblemSolver::createRobot (const std::string& name)$/;"	f	class:hpp::core::ProblemSolver
createUnion	src/config-projector.cc	/^    ConfigProjector::createUnion (const ConfigProjectorPtr_t cp, const ConfigProjectorPtr_t otherCp)$/;"	f	class:hpp::core::ConfigProjector
createWithCheck	src/path.cc	/^          static TimeParameterizationPtr_t createWithCheck (TimeParameterizationPtr_t tp, value_type t, value_type s)$/;"	f	class:hpp::core::timeParameterization::Shift
createWithGuess	include/hpp/core/steering-method/dubins.hh	/^          static DubinsPtr_t createWithGuess (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::Dubins
createWithGuess	include/hpp/core/steering-method/reeds-shepp.hh	/^          static ReedsSheppPtr_t createWithGuess (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
createWithGuess	include/hpp/core/steering-method/snibud.hh	/^          static SnibudPtr_t createWithGuess (const Problem& problem)$/;"	f	class:hpp::core::steeringMethod::Snibud
createWithRoadmap	src/bi-rrt-planner.cc	/^    BiRRTPlannerPtr_t BiRRTPlanner::createWithRoadmap$/;"	f	class:hpp::core::BiRRTPlanner
createWithRoadmap	src/diffusing-planner.cc	/^    DiffusingPlannerPtr_t DiffusingPlanner::createWithRoadmap$/;"	f	class:hpp::core::DiffusingPlanner
createWithRoadmap	src/path-planner/k-prm-star.cc	/^      kPrmStarPtr_t kPrmStar::createWithRoadmap (const Problem& problem,$/;"	f	class:hpp::core::pathPlanner::kPrmStar
createWithRoadmap	src/visibility-prm-planner.cc	/^    VisibilityPrmPlannerPtr_t VisibilityPrmPlanner::createWithRoadmap$/;"	f	class:hpp::core::VisibilityPrmPlanner
createWithTraits	include/hpp/core/path-optimization/config-optimization.hh	/^        ConfigOptimization::createWithTraits (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
createWithTraits	include/hpp/core/path-optimization/partial-shortcut.hh	/^        PartialShortcut::createWithTraits (const Problem& problem)$/;"	f	class:hpp::core::pathOptimization::PartialShortcut
createWithWeight	src/weighed-distance.cc	/^    WeighedDistance::createWithWeight (const DevicePtr_t& robot,$/;"	f	class:hpp::core::WeighedDistance
cross1_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable matrix3_t cross1_, cross2_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
cross2_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable matrix3_t cross1_, cross2_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
currentLength_	include/hpp/core/reeds-shepp-path.hh	/^      value_type currentLength_;$/;"	m	class:hpp::core::ReedsSheppPath
curvature_	include/hpp/core/steering-method/constant-curvature.hh	/^        const value_type curveLength_, curvature_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
curveLength_	include/hpp/core/steering-method/constant-curvature.hh	/^        const value_type curveLength_, curvature_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
cutObstacle	src/problem-solver.cc	/^    void ProblemSolver::cutObstacle (const std::string& name,$/;"	f	class:hpp::core::ProblemSolver
d	src/path-projector.cc	/^    value_type PathProjector::d (ConfigurationIn_t q1, ConfigurationIn_t q2) const$/;"	f	class:hpp::core::PathProjector
dec	include/hpp/core/path-optimization/quadratic-program.hh	/^        Decomposition_t dec;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
dec	src/path-optimization/spline-gradient-based-constraint.cc	/^          Decomposition_t dec;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
dec	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        Decomposition_t dec;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
decompose	src/path-optimization/linear-constraint.cc	/^      bool LinearConstraint::decompose (bool check)$/;"	f	class:hpp::core::pathOptimization::LinearConstraint
decompose	src/path-optimization/quadratic-program.cc	/^      void QuadraticProgram::decompose ()$/;"	f	class:hpp::core::pathOptimization::QuadraticProgram
decompose	src/path-optimization/spline-gradient-based-constraint.cc	/^          void decompose ()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
decompose	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void decompose ()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
defaultCompTypes	src/explicit-numerical-constraint.cc	/^    inline ComparisonTypes_t defaultCompTypes ($/;"	f	namespace:hpp::core
defaultLineSearch	src/config-projector.cc	/^    void ConfigProjector::defaultLineSearch (LineSearchType ls)$/;"	f	class:hpp::core::ConfigProjector
defaultLineSearch_	include/hpp/core/config-projector.hh	/^      static LineSearchType defaultLineSearch_;$/;"	m	class:hpp::core::ConfigProjector
delayedEdges_	include/hpp/core/visibility-prm-planner.hh	/^      DelayedEdges_t delayedEdges_;$/;"	m	class:hpp::core::VisibilityPrmPlanner
delete_constraint	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline void delete_constraint(MatrixXd& R, MatrixXd& J, VectorXi& A, VectorXd& u,  int p, int& iq, int l)$/;"	f	namespace:Eigen
deref	include/hpp/core/container.hh	/^      template <> struct deref <true> {$/;"	s	namespace:hpp::core::internal
deref	include/hpp/core/container.hh	/^      template <bool deref_ptr> struct deref {$/;"	s	namespace:hpp::core::internal
derivative	include/hpp/core/path.hh	/^      void derivative (vectorOut_t result, const value_type& time,$/;"	f	class:hpp::core::Path
derivative	include/hpp/core/time-parameterization/polynomial.hh	/^          value_type derivative (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Polynomial
derivative	src/path.cc	/^          value_type derivative (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Shift
derivative	src/path/spline.cc	/^        void spline_basis_function<BernsteinBasis, Degree>::derivative$/;"	f	class:hpp::core::path::internal::spline_basis_function
derivative	src/path/spline.cc	/^        void spline_basis_function<CanonicalPolynomeBasis, Degree>::derivative$/;"	f	class:hpp::core::path::internal::spline_basis_function
derivativeBound	include/hpp/core/time-parameterization.hh	/^        virtual value_type derivativeBound (const value_type& low, const value_type& up) const$/;"	f	class:hpp::core::TimeParameterization
derivativeBound	include/hpp/core/time-parameterization/polynomial.hh	/^          value_type derivativeBound (const value_type& low, const value_type& up) const$/;"	f	class:hpp::core::timeParameterization::Polynomial
device	include/hpp/core/dubins-path.hh	/^      inline DevicePtr_t device () const$/;"	f	class:hpp::core::DubinsPath
device	include/hpp/core/reeds-shepp-path.hh	/^      inline DevicePtr_t device () const$/;"	f	class:hpp::core::ReedsSheppPath
device	src/interpolated-path.cc	/^    DevicePtr_t InterpolatedPath::device () const$/;"	f	class:hpp::core::InterpolatedPath
device	src/path/hermite.cc	/^      DevicePtr_t Hermite::device () const$/;"	f	class:hpp::core::path::Hermite
device	src/straight-path.cc	/^    DevicePtr_t StraightPath::device () const$/;"	f	class:hpp::core::StraightPath
device_	include/hpp/core/dubins-path.hh	/^      DevicePtr_t device_;$/;"	m	class:hpp::core::DubinsPath
device_	include/hpp/core/interpolated-path.hh	/^      DevicePtr_t device_;$/;"	m	class:hpp::core::InterpolatedPath
device_	include/hpp/core/path/hermite.hh	/^        DevicePtr_t device_;$/;"	m	class:hpp::core::path::Hermite
device_	include/hpp/core/reeds-shepp-path.hh	/^      DevicePtr_t device_;$/;"	m	class:hpp::core::ReedsSheppPath
device_	include/hpp/core/steering-method/car-like.hh	/^          DeviceWkPtr_t device_;$/;"	m	class:hpp::core::steeringMethod::CarLike
device_	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          DeviceWkPtr_t device_;$/;"	m	class:hpp::core::steeringMethod::Interpolated
device_	include/hpp/core/steering-method/spline.hh	/^          DeviceWkPtr_t device_;$/;"	m	class:hpp::core::steeringMethod::Spline
device_	include/hpp/core/straight-path.hh	/^      DevicePtr_t device_;$/;"	m	class:hpp::core::StraightPath
difference_	src/path-optimization/collision-constraints-result.hh	/^	mutable vector_t difference_;$/;"	m	class:hpp::core::pathOptimization::CollisionConstraint
difference_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	mutable vector_t difference_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
dim_	src/nearest-neighbor/k-d-tree.hh	/^      std::size_t dim_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
dimension	src/config-projector.cc	/^    size_type ConfigProjector::dimension () const$/;"	f	class:hpp::core::ConfigProjector
directPath	src/problem-solver.cc	/^    bool ProblemSolver::directPath$/;"	f	class:hpp::core::ProblemSolver
disabledBodyPairCollisions_	include/hpp/core/continuous-collision-checking.hh	/^        bodyPairCollisions_, disabledBodyPairCollisions_;$/;"	m	class:hpp::core::ContinuousCollisionChecking
disabledPairs_	include/hpp/core/collision-validation.hh	/^                       disabledPairs_;$/;"	m	class:hpp::core::CollisionValidation
displayPath	include/hpp/core/path-optimization/gradient-based.hh	/^	void displayPath (vectorIn_t x, std::string$/;"	f	class:hpp::core::pathOptimization::GradientBased
distance	include/hpp/core/distance/reeds-shepp.hh	/^    namespace distance {$/;"	n	namespace:hpp::core
distance	include/hpp/core/fwd.hh	/^    namespace distance {$/;"	n	namespace:hpp::core
distance	include/hpp/core/problem.hh	/^      const DistancePtr_t& distance () const$/;"	f	class:hpp::core::Problem
distance	include/hpp/core/problem.hh	/^      void distance (const DistancePtr_t& distance)$/;"	f	class:hpp::core::Problem
distance	src/distance/reeds-shepp.cc	/^    namespace distance {$/;"	n	namespace:hpp::core	file:
distance	src/nearest-neighbor/basic.hh	/^      virtual DistancePtr_t distance () const$/;"	f	class:hpp::core::nearestNeighbor::Basic
distance	src/nearest-neighbor/k-d-tree.hh	/^      virtual DistancePtr_t distance () const$/;"	f	class:hpp::core::nearestNeighbor::KDTree
distance	src/path-optimization/collision-constraints-result.hh	/^	value_type distance () const { return distance_;}$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
distance	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline Scalar distance(Scalar a, Scalar b)$/;"	f	namespace:Eigen
distance	src/roadmap.cc	/^    const DistancePtr_t& Roadmap::distance () const$/;"	f	class:hpp::core::Roadmap
distanceBetweenObjects	include/hpp/core/problem-solver.hh	/^      const DistanceBetweenObjectsPtr_t& distanceBetweenObjects () const$/;"	f	class:hpp::core::ProblemSolver
distanceBetweenObjects_	include/hpp/core/problem-solver.hh	/^      DistanceBetweenObjectsPtr_t distanceBetweenObjects_;$/;"	m	class:hpp::core::ProblemSolver
distanceObstacles	src/problem-solver.cc	/^    const ObjectStdVector_t& ProblemSolver::distanceObstacles () const$/;"	f	class:hpp::core::ProblemSolver
distanceObstacles_	include/hpp/core/problem-solver.hh	/^      ObjectStdVector_t distanceObstacles_;  \/\/ FIXME should be removed?$/;"	m	class:hpp::core::ProblemSolver
distanceResults	include/hpp/core/distance-between-objects.hh	/^	distanceResults () const {return distanceResults_;};$/;"	f	class:hpp::core::DistanceBetweenObjects
distanceResults_	include/hpp/core/distance-between-objects.hh	/^      DistanceResults_t distanceResults_;$/;"	m	class:hpp::core::DistanceBetweenObjects
distanceToBox	src/nearest-neighbor/k-d-tree.cc	/^    value_type KDTree::distanceToBox (const ConfigurationPtr_t& configuration) {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
distanceType	include/hpp/core/problem-solver.hh	/^      const std::string& distanceType () const {$/;"	f	class:hpp::core::ProblemSolver
distanceType	src/problem-solver.cc	/^    void ProblemSolver::distanceType (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
distanceType_	include/hpp/core/problem-solver.hh	/^      std::string distanceType_;$/;"	m	class:hpp::core::ProblemSolver
distance_	include/hpp/core/path-optimization/gradient-based.hh	/^	WeighedDistancePtr_t distance_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
distance_	include/hpp/core/path-optimization/path-length.hh	/^	WeighedDistancePtr_t distance_;$/;"	m	class:hpp::core::pathOptimization::PathLength
distance_	include/hpp/core/path-projector.hh	/^        DistancePtr_t distance_;$/;"	m	class:hpp::core::PathProjector
distance_	include/hpp/core/problem.hh	/^      DistancePtr_t distance_;$/;"	m	class:hpp::core::Problem
distance_	include/hpp/core/roadmap.hh	/^      const DistancePtr_t distance_;$/;"	m	class:hpp::core::Roadmap
distance_	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          WeighedDistancePtr_t distance_;$/;"	m	class:hpp::core::steeringMethod::Interpolated
distance_	src/astar.hh	/^      DistancePtr_t distance_;$/;"	m	class:hpp::core::Astar
distance_	src/nearest-neighbor/basic.hh	/^      const DistancePtr_t distance_;$/;"	m	class:hpp::core::nearestNeighbor::Basic
distance_	src/nearest-neighbor/k-d-tree.hh	/^      WeighedDistancePtr_t distance_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
distance_	src/path-optimization/collision-constraints-result.hh	/^	value_type distance_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
distances	include/hpp/core/problem-solver.hh	/^      Container <DistanceBuilder_t>             distances;$/;"	m	class:hpp::core::ProblemSolver
dofExtract	include/hpp/core/subchain-path.hh	/^      void dofExtract (ConfigurationIn_t qin, ConfigurationOut_t qout) const$/;"	f	class:hpp::core::SubchainPath
dq_	include/hpp/core/path-projector/global.hh	/^          mutable vector_t dq_;$/;"	m	class:hpp::core::pathProjector::Global
drzId_	include/hpp/core/dubins-path.hh	/^      size_type dxyId_,drzId_;$/;"	m	class:hpp::core::DubinsPath
drzId_	include/hpp/core/reeds-shepp-path.hh	/^      size_type dxyId_,drzId_;$/;"	m	class:hpp::core::ReedsSheppPath
drzId_	include/hpp/core/steering-method/constant-curvature.hh	/^        size_type dxyId_,drzId_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
dubins_LRL	src/dubins.cc	/^int dubins_LRL( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_LSL	src/dubins.cc	/^int dubins_LSL( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_LSR	src/dubins.cc	/^int dubins_LSR( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_RLR	src/dubins.cc	/^int dubins_RLR( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_RSL	src/dubins.cc	/^int dubins_RSL( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_RSR	src/dubins.cc	/^int dubins_RSR( double alpha, double beta, double d, double* outputs )$/;"	f
dubins_init	src/dubins-path.cc	/^    void DubinsPath::dubins_init (vector3_t q0, vector3_t q1)$/;"	f	class:hpp::core::DubinsPath
dubins_init_normalised	src/dubins-path.cc	/^    void DubinsPath::dubins_init_normalised$/;"	f	class:hpp::core::DubinsPath
dubins_segment	src/dubins-path.cc	/^    void dubins_segment( double t, vector3_t qi, vector3_t& qt, int type)$/;"	f	namespace:hpp::core
dubins_segment_velocity	src/dubins-path.cc	/^    void dubins_segment_velocity (double t, vector3_t qi, vector3_t& v,$/;"	f	namespace:hpp::core
dubins_words	src/dubins.cc	/^DubinsWord dubins_words[] = {$/;"	v
dxyId_	include/hpp/core/dubins-path.hh	/^      size_type dxyId_,drzId_;$/;"	m	class:hpp::core::DubinsPath
dxyId_	include/hpp/core/reeds-shepp-path.hh	/^      size_type dxyId_,drzId_;$/;"	m	class:hpp::core::ReedsSheppPath
dxyId_	include/hpp/core/steering-method/constant-curvature.hh	/^        size_type dxyId_,drzId_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
edgeCost	src/astar.hh	/^      value_type edgeCost (const EdgePtr_t& edge)$/;"	f	class:hpp::core::Astar
edges	include/hpp/core/roadmap.hh	/^      const Edges_t& edges () const$/;"	f	class:hpp::core::Roadmap
edges_	include/hpp/core/parser/roadmap-factory.hh	/^          Edges_t edges_;$/;"	m	class:hpp::core::parser::RoadmapFactory
edges_	include/hpp/core/roadmap.hh	/^      Edges_t edges_;$/;"	m	class:hpp::core::Roadmap
eigen	src/path-optimization/collision-constraints-result.hh	/^      namespace eigen {$/;"	n	namespace:hpp::core::pathOptimization
eigen	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^      namespace eigen {$/;"	n	namespace:hpp::core::pathOptimization
end	include/hpp/core/constraint-set.hh	/^      Constraints_t::iterator end () {$/;"	f	class:hpp::core::ConstraintSet
end	include/hpp/core/dubins-path.hh	/^      inline Configuration_t end () const$/;"	f	class:hpp::core::DubinsPath
end	include/hpp/core/interpolated-path.hh	/^      Configuration_t end () const$/;"	f	class:hpp::core::InterpolatedPath
end	include/hpp/core/path-vector.hh	/^      virtual Configuration_t end () const$/;"	f	class:hpp::core::PathVector
end	include/hpp/core/path/hermite.hh	/^        virtual Configuration_t end () const$/;"	f	class:hpp::core::path::Hermite
end	include/hpp/core/path/spline.hh	/^          virtual Configuration_t end () const$/;"	f	class:hpp::core::path::Spline
end	include/hpp/core/reeds-shepp-path.hh	/^      inline Configuration_t end () const$/;"	f	class:hpp::core::ReedsSheppPath
end	include/hpp/core/steering-method/constant-curvature.hh	/^        inline Configuration_t end () const$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
end	include/hpp/core/straight-path.hh	/^      Configuration_t end () const$/;"	f	class:hpp::core::StraightPath
end	include/hpp/core/subchain-path.hh	/^      inline Configuration_t end () const$/;"	f	class:hpp::core::SubchainPath
end	src/extracted-path.hh	/^      inline Configuration_t end () const$/;"	f	class:hpp::core::ExtractedPath
endComponents_	include/hpp/core/bi-rrt-planner.hh	/^      std::vector<ConnectedComponentPtr_t> endComponents_;$/;"	m	class:hpp::core::BiRRTPlanner
endConfig	include/hpp/core/straight-path.hh	/^      void endConfig (ConfigurationIn_t end)$/;"	f	class:hpp::core::StraightPath
end_	include/hpp/core/dubins-path.hh	/^      Configuration_t end_;$/;"	m	class:hpp::core::DubinsPath
end_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable Configuration_t end_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
end_	include/hpp/core/path-optimization/path-length.hh	/^	Configuration_t end_;$/;"	m	class:hpp::core::pathOptimization::PathLength
end_	include/hpp/core/path/hermite.hh	/^        Configuration_t init_, end_;$/;"	m	class:hpp::core::path::Hermite
end_	include/hpp/core/reeds-shepp-path.hh	/^      Configuration_t end_;$/;"	m	class:hpp::core::ReedsSheppPath
end_	include/hpp/core/steering-method/constant-curvature.hh	/^        Configuration_t end_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
end_	include/hpp/core/straight-path.hh	/^      Configuration_t end_;$/;"	m	class:hpp::core::StraightPath
epsilon_	include/hpp/core/path-optimization/gradient-based.hh	/^	value_type epsilon_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
erase	include/hpp/core/container.hh	/^      void erase (const Key& name) { map.erase (name); }$/;"	f	struct:hpp::core::Container
erasePath	include/hpp/core/problem-solver.hh	/^      void erasePath (std::size_t pathId)$/;"	f	class:hpp::core::ProblemSolver
errorThreshold	include/hpp/core/problem-solver.hh	/^      value_type errorThreshold () const$/;"	f	class:hpp::core::ProblemSolver
errorThreshold	src/config-projector.cc	/^    value_type ConfigProjector::errorThreshold () const$/;"	f	class:hpp::core::ConfigProjector
errorThreshold	src/config-projector.cc	/^    void ConfigProjector::errorThreshold (const value_type& threshold)$/;"	f	class:hpp::core::ConfigProjector
errorThreshold	src/problem-solver.cc	/^    void ProblemSolver::errorThreshold (const value_type& threshold)$/;"	f	class:hpp::core::ProblemSolver
errorThreshold_	include/hpp/core/problem-solver.hh	/^      value_type errorThreshold_;$/;"	m	class:hpp::core::ProblemSolver
es	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            boost::shared_ptr<ExplicitSolver> es;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData
estimatedCostToGoal_	src/astar.hh	/^      std::map <NodePtr_t, value_type> estimatedCostToGoal_;$/;"	m	class:hpp::core::Astar
eval	src/path/spline.cc	/^        void spline_basis_function<BernsteinBasis, Degree>::eval (const value_type t, Coeffs_t& res)$/;"	f	class:hpp::core::path::internal::spline_basis_function
eval	src/path/spline.cc	/^        void spline_basis_function<CanonicalPolynomeBasis, Degree>::eval (const value_type t, Coeffs_t& res)$/;"	f	class:hpp::core::path::internal::spline_basis_function
executeOneStep	src/problem-solver.cc	/^    bool ProblemSolver::executeOneStep ()$/;"	f	class:hpp::core::ProblemSolver
explicitFunction	include/hpp/core/explicit-numerical-constraint.hh	/^      virtual DifferentiableFunctionPtr_t explicitFunction() const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
explored_	include/hpp/core/connected-component.hh	/^      mutable bool explored_;$/;"	m	class:hpp::core::ConnectedComponent
extend	src/diffusing-planner.cc	/^    PathPtr_t DiffusingPlanner::extend (const NodePtr_t& near,$/;"	f	class:hpp::core::DiffusingPlanner
extendInternal	src/bi-rrt-planner.cc	/^        PathPtr_t extendInternal (const SteeringMethodPtr_t& sm, Configuration_t& qProj_, const NodePtr_t& near,$/;"	f	namespace:hpp::core::__anon25
extraCSsize_	include/hpp/core/parser/roadmap-factory.hh	/^          size_type extraCSsize_;$/;"	m	class:hpp::core::parser::RoadmapFactory
extraLength_	include/hpp/core/reeds-shepp-path.hh	/^      value_type extraLength_;$/;"	m	class:hpp::core::ReedsSheppPath
extract	src/path.cc	/^    PathPtr_t Path::extract (const interval_t& subInterval) const$/;"	f	class:hpp::core::Path
fSize_	include/hpp/core/path-optimization/gradient-based.hh	/^	size_type fSize_; \/\/ dimension of collision constraints$/;"	m	class:hpp::core::pathOptimization::GradientBased
fSize_	src/path-optimization/collision-constraints-result.hh	/^	static size_type fSize_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
fSize_	src/path-optimization/collision-constraints-result.hh	/^      size_type CollisionConstraintsResult::fSize_ = 1;$/;"	m	class:hpp::core::pathOptimization::CollisionConstraintsResult
f_	src/path-optimization/collision-constraints-result.hh	/^	DifferentiableFunctionPtr_t f_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
f_qIn_	src/implicit-function.hh	/^      mutable LiegroupElement f_qIn_, qOut_;$/;"	m	class:hpp::core::ImplicitFunction
f_qIn_	src/implicit-function.hh	/^      vectorIn_t qOut_, f_qIn_;$/;"	m	struct:hpp::core::JacobianVisitor
f_qIn_	src/implicit-function.hh	/^      vectorIn_t qOut_, f_qIn_;$/;"	m	struct:hpp::core::ValueVisitor
factorials	src/path/spline.cc	/^        inline Eigen::Matrix<size_type, N, 1> factorials ()$/;"	f	namespace:hpp::core::path::internal
filterCollisionPairs	include/hpp/core/config-validation.hh	/^      virtual void filterCollisionPairs (const RelativeMotion::matrix_type&)$/;"	f	class:hpp::core::ConfigValidation
filterCollisionPairs	include/hpp/core/path-validation.hh	/^      virtual void filterCollisionPairs (const RelativeMotion::matrix_type&) {}$/;"	f	class:hpp::core::PathValidation
filterCollisionPairs	src/collision-validation.cc	/^    void CollisionValidation::filterCollisionPairs (const RelativeMotion::matrix_type& matrix)$/;"	f	class:hpp::core::CollisionValidation
filterCollisionPairs	src/config-validations.cc	/^    void ConfigValidations::filterCollisionPairs (const RelativeMotion::matrix_type& matrix)$/;"	f	class:hpp::core::ConfigValidations
filterCollisionPairs	src/continuous-collision-checking.cc	/^    void ContinuousCollisionChecking::filterCollisionPairs$/;"	f	class:hpp::core::ContinuousCollisionChecking
filterCollisionPairs	src/discretized-path-validation.cc	/^    void DiscretizedPathValidation::filterCollisionPairs ($/;"	f	class:hpp::core::DiscretizedPathValidation
filterCollisionPairs	src/path-validations.cc	/^    void PathValidations::filterCollisionPairs ($/;"	f	class:hpp::core::PathValidations
filterCollisionPairs	src/problem-solver.cc	/^    void ProblemSolver::filterCollisionPairs ()$/;"	f	class:hpp::core::ProblemSolver
filterCollisionPairs	src/problem.cc	/^    void Problem::filterCollisionPairs ()$/;"	f	class:hpp::core::Problem
findDeviceBounds	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::findDeviceBounds ()$/;"	f	class:hpp::core::nearestNeighbor::KDTree
findLeaf	src/nearest-neighbor/k-d-tree.cc	/^    KDTreePtr_t KDTree::findLeaf (const NodePtr_t& node) {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
findNewConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^        bool SplineGradientBasedConstraint<_PB, _SO>::findNewConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
findNewConstraint	src/path-optimization/spline-gradient-based.cc	/^      bool SplineGradientBased<_PB, _SO>::findNewConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
findNewConstraint	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      bool SplineGradientBased<_PB, _SO>::findNewConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
findPath	src/astar.hh	/^      NodePtr_t findPath ()$/;"	f	class:hpp::core::Astar
finishAttributes	src/parser/roadmap-factory.cc	/^      bool RoadmapFactory::finishAttributes ()$/;"	f	class:hpp::core::parser::RoadmapFactory
finishSolve	src/path-planner.cc	/^    PathVectorPtr_t PathPlanner::finishSolve (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::PathPlanner
finishSolve	src/plan-and-optimize.cc	/^    PathVectorPtr_t PlanAndOptimize::finishSolve (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::PlanAndOptimize
finishSolveStepByStep	src/problem-solver.cc	/^    void ProblemSolver::finishSolveStepByStep ()$/;"	f	class:hpp::core::ProblemSolver
finishTags	src/parser/roadmap-factory.cc	/^      void RoadmapFactory::finishTags ()$/;"	f	class:hpp::core::parser::RoadmapFactory
flatten	src/path-vector.cc	/^    void PathVector::flatten (PathVectorPtr_t p) const$/;"	f	class:hpp::core::PathVector
fmodr	src/dubins-path.cc	/^    double fmodr( double x, double y)$/;"	f	namespace:hpp::core
fmodr	src/dubins.cc	/^double fmodr( double x, double y)$/;"	f
forwardKinematics	src/explicit-relative-transformation.cc	/^    void ExplicitRelativeTransformation::forwardKinematics (vectorIn_t arg) const$/;"	f	class:hpp::core::ExplicitRelativeTransformation
forward_	include/hpp/core/steering-method/constant-curvature.hh	/^        const value_type forward_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
freeflyerPose_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable Transform3f freeflyerPose_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
from	include/hpp/core/edge.hh	/^      NodePtr_t from () const$/;"	f	class:hpp::core::Edge
fromConstraint	src/relative-motion.cc	/^    void RelativeMotion::fromConstraint (matrix_type& matrix,$/;"	f	class:hpp::core::RelativeMotion
fullRank_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable bool fullRank_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
function	include/hpp/core/numerical-constraint.hh	/^        DifferentiableFunction& function () const$/;"	f	class:hpp::core::NumericalConstraint
functionPtr	include/hpp/core/numerical-constraint.hh	/^        const DifferentiableFunctionPtr_t& functionPtr () const$/;"	f	class:hpp::core::NumericalConstraint
function_	include/hpp/core/numerical-constraint.hh	/^        DifferentiableFunctionPtr_t function_;$/;"	m	class:hpp::core::NumericalConstraint
functions	src/path-optimization/spline-gradient-based-constraint.cc	/^          std::vector<CollisionFunctionPtr_t> functions;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
functions	src/path-optimization/spline-gradient-based.cc	/^        std::vector<CollisionFunctionPtr_t> functions;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
functions	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        std::vector<CollisionFunctionPtr_t> functions;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
functions_	include/hpp/core/config-projector.hh	/^      NumericalConstraints_t functions_;$/;"	m	class:hpp::core::ConfigProjector
gData_	src/implicit-function.hh	/^      GData gData_;$/;"	m	class:hpp::core::ImplicitFunction
g_	include/hpp/core/explicit-numerical-constraint.hh	/^      DifferentiableFunctionPtr_t inputToOutput_, g_, ginv_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
g_	include/hpp/core/explicit-relative-transformation.hh	/^      DifferentiableFunctionPtr_t g_, ginv_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
g_	src/implicit-function.hh	/^        DifferentiableFunctionPtr_t g_;$/;"	m	struct:hpp::core::ImplicitFunction::GenericGData
g_qOut_	src/implicit-function.hh	/^        mutable LiegroupElement g_qOut_;$/;"	m	struct:hpp::core::ImplicitFunction::GenericGData
generateJointVector	src/path-optimization/partial-shortcut.cc	/^      JointStdVector_t PartialShortcut::generateJointVector$/;"	f	class:hpp::core::pathOptimization::PartialShortcut
generatePath	src/path-optimization/partial-shortcut.cc	/^      PathVectorPtr_t PartialShortcut::generatePath ($/;"	f	class:hpp::core::pathOptimization::PartialShortcut
generateRandomConfig	src/path-planner/k-prm-star.cc	/^      void kPrmStar::generateRandomConfig ()$/;"	f	class:hpp::core::pathPlanner::kPrmStar
geomIdx_	src/problem-solver.cc	/^        GeomIndex geomIdx_;$/;"	m	struct:hpp::core::__anon22::FindCollisionObject	file:
get	include/hpp/core/container.hh	/^        template <typename T> static inline T get (T t) { return t; }$/;"	f	struct:hpp::core::internal::deref
get	include/hpp/core/container.hh	/^        template <typename T> static inline typename remove_pointer<T>::type get (T t) { return *t; }$/;"	f	struct:hpp::core::internal::deref
get	include/hpp/core/container.hh	/^      const mapped_type& get (const key_type& name) const$/;"	f	struct:hpp::core::Container
get	include/hpp/core/container.hh	/^      const mapped_type& get (const key_type& name, const mapped_type& defaultValue) const$/;"	f	struct:hpp::core::Container
getAllAs	include/hpp/core/container.hh	/^        ReturnType getAllAs () const$/;"	f	struct:hpp::core::Container
getConfigProjector	include/hpp/core/path-optimization/config-optimization.hh	/^              > getConfigProjector;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
getConfigProjector	src/path-optimization/config-optimization.cc	/^      ConfigProjectorPtr_t ConfigOptimizationTraits::getConfigProjector$/;"	f	class:hpp::core::pathOptimization::ConfigOptimizationTraits
getGoal	include/hpp/core/path-optimization/config-optimization.hh	/^            boost::function <Configuration_t (const PathVector&)> getGoal;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
getGoal	include/hpp/core/path-optimization/config-optimization.hh	/^        static Configuration_t getGoal (const PathVector& path)$/;"	f	struct:hpp::core::pathOptimization::ConfigOptimizationTraits
getKeys	include/hpp/core/container.hh	/^        ReturnType getKeys () const$/;"	f	struct:hpp::core::Container
getNodeIdFromRoadmap	src/parser/roadmap-factory.cc	/^      size_type RoadmapFactory::getNodeIdFromRoadmap (const NodePtr_t& node) const$/;"	f	class:hpp::core::parser::RoadmapFactory
getParameter	include/hpp/core/path-validation-report.hh	/^      value_type getParameter()$/;"	f	struct:hpp::core::PathValidationReport
getParameter	include/hpp/core/problem.hh	/^      template <typename T> T getParameter$/;"	f	class:hpp::core::Problem
getRotationSubJacobian	src/weighed-distance.cc	/^        template<typename JointModel, int NR> static void getRotationSubJacobian ($/;"	f	struct:hpp::core::__anon17::ComputeWeightStep
getWeight	src/weighed-distance.cc	/^    value_type WeighedDistance::getWeight( std::size_t rank ) const$/;"	f	class:hpp::core::WeighedDistance
ginv_	include/hpp/core/explicit-numerical-constraint.hh	/^      DifferentiableFunctionPtr_t inputToOutput_, g_, ginv_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
ginv_	include/hpp/core/explicit-relative-transformation.hh	/^      DifferentiableFunctionPtr_t g_, ginv_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
globalFinishTime_	include/hpp/core/connected-component.hh	/^      static unsigned int globalFinishTime_;$/;"	m	class:hpp::core::ConnectedComponent
goalConfigs	src/problem-solver.cc	/^    const Configurations_t& ProblemSolver::goalConfigs () const$/;"	f	class:hpp::core::ProblemSolver
goalConfigs	src/problem.cc	/^    const Configurations_t& Problem::goalConfigs () const$/;"	f	class:hpp::core::Problem
goalConfigurations_	include/hpp/core/problem-solver.hh	/^      Configurations_t goalConfigurations_;$/;"	m	class:hpp::core::ProblemSolver
goalConfigurations_	include/hpp/core/problem.hh	/^      Configurations_t goalConfigurations_;$/;"	m	class:hpp::core::Problem
goalNodes	include/hpp/core/roadmap.hh	/^      const NodeVector_t& goalNodes () const$/;"	f	class:hpp::core::Roadmap
goalNodes_	include/hpp/core/roadmap.hh	/^      NodeVector_t goalNodes_;$/;"	m	class:hpp::core::Roadmap
guessWheels	src/steering-method/car-like.cc	/^      inline void CarLike::guessWheels()$/;"	f	class:hpp::core::steeringMethod::CarLike
gz_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable matrix_t Hz_, gz_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
has	include/hpp/core/container.hh	/^      bool has (const key_type& name) const { return (map.find (name) != map.end ()); }$/;"	f	struct:hpp::core::Container
hermiteLength	include/hpp/core/path/hermite.hh	/^        const value_type& hermiteLength () const$/;"	f	class:hpp::core::path::Hermite
hermiteLength_	include/hpp/core/path/hermite.hh	/^        value_type hermiteLength_;$/;"	m	class:hpp::core::path::Hermite
hessian	src/path-optimization/path-length.cc	/^      void PathLength::hessian (matrixOut_t result) const$/;"	f	class:hpp::core::pathOptimization::PathLength
hessian	src/path-optimization/spline-gradient-based/cost.hh	/^	void hessian (matrixOut_t H, const Splines_t& splines) const$/;"	f	struct:hpp::core::pathOptimization::SquaredLength
hessianBound_	include/hpp/core/path-projector/global.hh	/^          const value_type hessianBound_;$/;"	m	class:hpp::core::pathProjector::Global
hessianBound_	include/hpp/core/path-projector/progressive.hh	/^          const value_type hessianBound_;$/;"	m	class:hpp::core::pathProjector::Progressive
heuristic	src/astar.hh	/^      value_type heuristic (const NodePtr_t node) const$/;"	f	class:hpp::core::Astar
hpp	include/hpp/core/basic-configuration-shooter.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/bi-rrt-planner.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/collision-path-validation-report.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/collision-validation-report.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/collision-validation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/config-projector.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/config-validation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/config-validations.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/configuration-shooter.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/connected-component.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/constraint-set.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/constraint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/container.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/continuous-collision-checking.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/continuous-collision-checking/dichotomy.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/continuous-collision-checking/progressive.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/diffusing-planner.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/discretized-collision-checking.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/discretized-path-validation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/distance-between-objects.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/distance.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/distance/reeds-shepp.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/dubins-path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/edge.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/equation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/explicit-numerical-constraint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/explicit-relative-transformation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/fwd.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/interpolated-path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/joint-bound-validation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/locked-joint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/nearest-neighbor.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/node.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/numerical-constraint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/parser/roadmap-factory.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/config-optimization.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/cost.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/gradient-based.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/linear-constraint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/partial-shortcut.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/path-length.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/quadratic-program.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/simple-time-parameterization.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimization/spline-gradient-based.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-optimizer.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-planner.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-planner/k-prm-star.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-projector.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-projector/dichotomy.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-projector/global.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-projector/progressive.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-projector/recursive-hermite.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-validation-report.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-validation.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-validations.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path-vector.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path/hermite.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/path/spline.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/plan-and-optimize.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/problem-solver.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/problem-target.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/problem-target/goal-configurations.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/problem-target/task-target.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/problem.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/projection-error.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/random-shortcut.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/reeds-shepp-path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/relative-motion.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/roadmap.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/car-like.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/constant-curvature.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/dubins.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/fwd.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/hermite.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/interpolated-steering-method.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/reeds-shepp.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/snibud.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/spline.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/steering-method/straight.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/straight-path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/subchain-path.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/time-parameterization.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/time-parameterization/polynomial.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/validation-report.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/visibility-prm-planner.hh	/^namespace hpp {$/;"	n
hpp	include/hpp/core/weighed-distance.hh	/^namespace hpp {$/;"	n
hpp	src/astar.hh	/^namespace hpp {$/;"	n
hpp	src/bi-rrt-planner.cc	/^namespace hpp {$/;"	n	file:
hpp	src/collision-validation.cc	/^namespace hpp {$/;"	n	file:
hpp	src/config-projector.cc	/^namespace hpp {$/;"	n	file:
hpp	src/config-validations.cc	/^namespace hpp {$/;"	n	file:
hpp	src/connected-component.cc	/^namespace hpp {$/;"	n	file:
hpp	src/constraint-set.cc	/^namespace hpp {$/;"	n	file:
hpp	src/constraint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/continuous-collision-checking.cc	/^namespace hpp {$/;"	n	file:
hpp	src/continuous-collision-checking/body-pair-collision.hh	/^namespace hpp {$/;"	n
hpp	src/continuous-collision-checking/dichotomy.cc	/^namespace hpp {$/;"	n	file:
hpp	src/continuous-collision-checking/intervals.hh	/^namespace hpp {$/;"	n
hpp	src/continuous-collision-checking/path-velocity.hh	/^namespace hpp {$/;"	n
hpp	src/continuous-collision-checking/progressive.cc	/^namespace hpp {$/;"	n	file:
hpp	src/diffusing-planner.cc	/^namespace hpp {$/;"	n	file:
hpp	src/discretized-collision-checking.cc	/^namespace hpp {$/;"	n	file:
hpp	src/discretized-path-validation.cc	/^namespace hpp {$/;"	n	file:
hpp	src/distance-between-objects.cc	/^namespace hpp {$/;"	n	file:
hpp	src/distance/reeds-shepp.cc	/^namespace hpp {$/;"	n	file:
hpp	src/dubins-path.cc	/^namespace hpp {$/;"	n	file:
hpp	src/equation.cc	/^namespace hpp {$/;"	n	file:
hpp	src/explicit-numerical-constraint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/explicit-relative-transformation.cc	/^namespace hpp {$/;"	n	file:
hpp	src/extracted-path.hh	/^namespace hpp {$/;"	n
hpp	src/implicit-function.hh	/^namespace hpp {$/;"	n
hpp	src/interpolated-path.cc	/^namespace hpp {$/;"	n	file:
hpp	src/joint-bound-validation.cc	/^namespace hpp {$/;"	n	file:
hpp	src/locked-joint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/nearest-neighbor/basic.cc	/^namespace hpp {$/;"	n	file:
hpp	src/nearest-neighbor/basic.hh	/^namespace hpp {$/;"	n
hpp	src/nearest-neighbor/k-d-tree.cc	/^namespace hpp {$/;"	n	file:
hpp	src/nearest-neighbor/k-d-tree.hh	/^namespace hpp {$/;"	n
hpp	src/node.cc	/^namespace hpp {$/;"	n	file:
hpp	src/numerical-constraint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/parser/roadmap-factory.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/collision-constraints-result.hh	/^namespace hpp {$/;"	n
hpp	src/path-optimization/config-optimization.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/gradient-based.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/linear-constraint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/partial-shortcut.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/path-length.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/quadratic-program.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/simple-time-parameterization.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/spline-gradient-based-abstract.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/spline-gradient-based-constraint.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/spline-gradient-based.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^namespace hpp {$/;"	n
hpp	src/path-optimization/spline-gradient-based/cost.hh	/^namespace hpp {$/;"	n
hpp	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^namespace hpp {$/;"	n
hpp	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-optimizer.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-planner.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-planner/k-prm-star.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-projector.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-projector/dichotomy.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-projector/global.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-projector/progressive.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-projector/recursive-hermite.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-validations.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path-vector.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path/hermite.cc	/^namespace hpp {$/;"	n	file:
hpp	src/path/spline.cc	/^namespace hpp {$/;"	n	file:
hpp	src/plan-and-optimize.cc	/^namespace hpp {$/;"	n	file:
hpp	src/problem-solver.cc	/^namespace hpp {$/;"	n	file:
hpp	src/problem-target/goal-configurations.cc	/^namespace hpp {$/;"	n	file:
hpp	src/problem-target/task-target.cc	/^namespace hpp {$/;"	n	file:
hpp	src/problem.cc	/^namespace hpp {$/;"	n	file:
hpp	src/random-shortcut.cc	/^namespace hpp {$/;"	n	file:
hpp	src/reeds-shepp-path.cc	/^namespace hpp {$/;"	n	file:
hpp	src/relative-motion.cc	/^namespace hpp {$/;"	n	file:
hpp	src/roadmap.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/car-like.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/constant-curvature.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/dubins.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/reeds-shepp.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/snibud.cc	/^namespace hpp {$/;"	n	file:
hpp	src/steering-method/spline.cc	/^namespace hpp {$/;"	n	file:
hpp	src/straight-path.cc	/^namespace hpp {$/;"	n	file:
hpp	src/times-frame-function.hh	/^namespace hpp {$/;"	n
hpp	src/visibility-prm-planner.cc	/^namespace hpp {$/;"	n	file:
hpp	src/weighed-distance.cc	/^namespace hpp {$/;"	n	file:
idx	include/hpp/core/relative-motion.hh	/^      static inline size_type idx(const JointConstPtr_t& joint)$/;"	f	struct:hpp::core::RelativeMotion
impl_apply	src/path-projector/dichotomy.cc	/^      bool Dichotomy::impl_apply (const PathPtr_t& path, PathPtr_t& proj) const$/;"	f	class:hpp::core::pathProjector::Dichotomy
impl_apply	src/path-projector/global.cc	/^      bool Global::impl_apply (const PathPtr_t& path,$/;"	f	class:hpp::core::pathProjector::Global
impl_apply	src/path-projector/progressive.cc	/^      bool Progressive::impl_apply (const PathPtr_t& path,$/;"	f	class:hpp::core::pathProjector::Progressive
impl_apply	src/path-projector/recursive-hermite.cc	/^      bool RecursiveHermite::impl_apply (const PathPtr_t& path,$/;"	f	class:hpp::core::pathProjector::RecursiveHermite
impl_compute	include/hpp/core/steering-method/hermite.hh	/^          virtual PathPtr_t impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Hermite
impl_compute	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          virtual PathPtr_t impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Interpolated
impl_compute	include/hpp/core/steering-method/straight.hh	/^          virtual PathPtr_t impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Straight
impl_compute	include/hpp/core/subchain-path.hh	/^      virtual bool impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::SubchainPath
impl_compute	src/config-projector.cc	/^    bool ConfigProjector::impl_compute (ConfigurationOut_t configuration)$/;"	f	class:hpp::core::ConfigProjector
impl_compute	src/constraint-set.cc	/^    bool ConstraintSet::impl_compute (ConfigurationOut_t configuration)$/;"	f	class:hpp::core::ConstraintSet
impl_compute	src/dubins-path.cc	/^    bool DubinsPath::impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::DubinsPath
impl_compute	src/explicit-relative-transformation.cc	/^    void ExplicitRelativeTransformation::impl_compute$/;"	f	class:hpp::core::ExplicitRelativeTransformation
impl_compute	src/extracted-path.hh	/^      virtual bool impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::ExtractedPath
impl_compute	src/implicit-function.hh	/^      void impl_compute (LiegroupElement& result, vectorIn_t argument) const$/;"	f	class:hpp::core::ImplicitFunction
impl_compute	src/interpolated-path.cc	/^    bool InterpolatedPath::impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::InterpolatedPath
impl_compute	src/path-optimization/collision-constraints-result.hh	/^       virtual void impl_compute (LiegroupElement& result, vectorIn_t argument)$/;"	f	class:hpp::core::pathOptimization::CollisionConstraint
impl_compute	src/path-optimization/path-length.cc	/^      void PathLength::impl_compute (LiegroupElement& result,$/;"	f	class:hpp::core::pathOptimization::PathLength
impl_compute	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       virtual void impl_compute (LiegroupElement& result, vectorIn_t argument)$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
impl_compute	src/path-vector.cc	/^    bool PathVector::impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::PathVector
impl_compute	src/path/spline.cc	/^      bool Spline<_SplineType, _Order>::impl_compute (ConfigurationOut_t res, value_type s) const$/;"	f	class:hpp::core::path::Spline
impl_compute	src/steering-method/constant-curvature.cc	/^      bool ConstantCurvature::impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
impl_compute	src/steering-method/dubins.cc	/^      PathPtr_t Dubins::impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Dubins
impl_compute	src/steering-method/reeds-shepp.cc	/^      PathPtr_t ReedsShepp::impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
impl_compute	src/steering-method/snibud.cc	/^      PathPtr_t Snibud::impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Snibud
impl_compute	src/steering-method/spline.cc	/^      PathPtr_t Spline<_PB, _SO>::impl_compute ($/;"	f	class:hpp::core::steeringMethod::Spline
impl_compute	src/steering-method/spline.cc	/^      PathPtr_t Spline<_PB, _SO>::impl_compute (ConfigurationIn_t q1,$/;"	f	class:hpp::core::steeringMethod::Spline
impl_compute	src/straight-path.cc	/^    bool StraightPath::impl_compute (ConfigurationOut_t result,$/;"	f	class:hpp::core::StraightPath
impl_compute	src/times-frame-function.hh	/^      inline void impl_compute (LiegroupElement& y, vectorIn_t x) const$/;"	f	struct:hpp::core::TimesFrameFunction
impl_derivative	include/hpp/core/path.hh	/^      virtual void impl_derivative (vectorOut_t derivative,$/;"	f	class:hpp::core::Path
impl_derivative	src/dubins-path.cc	/^    void DubinsPath::impl_derivative (vectorOut_t result, const value_type& t,$/;"	f	class:hpp::core::DubinsPath
impl_derivative	src/extracted-path.hh	/^      virtual void impl_derivative (vectorOut_t result, const value_type& s,$/;"	f	class:hpp::core::ExtractedPath
impl_derivative	src/interpolated-path.cc	/^    void InterpolatedPath::impl_derivative$/;"	f	class:hpp::core::InterpolatedPath
impl_derivative	src/path-vector.cc	/^    void PathVector::impl_derivative (vectorOut_t result, const value_type& param,$/;"	f	class:hpp::core::PathVector
impl_derivative	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::impl_derivative (vectorOut_t res, const value_type& s, size_type order) const$/;"	f	class:hpp::core::path::Spline
impl_derivative	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::impl_derivative$/;"	f	class:hpp::core::ReedsSheppPath
impl_derivative	src/steering-method/constant-curvature.cc	/^      void ConstantCurvature::impl_derivative$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
impl_derivative	src/straight-path.cc	/^    void StraightPath::impl_derivative (vectorOut_t result, const value_type&,$/;"	f	class:hpp::core::StraightPath
impl_derivativeBound	src/path.cc	/^          value_type impl_derivativeBound (const value_type& l, const value_type& u) const$/;"	f	class:hpp::core::timeParameterization::Shift
impl_distance	include/hpp/core/distance.hh	/^      virtual value_type impl_distance (NodePtr_t n1, NodePtr_t n2) const$/;"	f	class:hpp::core::Distance
impl_distance	src/distance/reeds-shepp.cc	/^      value_type ReedsShepp::impl_distance (ConfigurationIn_t q1,$/;"	f	class:hpp::core::distance::ReedsShepp
impl_distance	src/weighed-distance.cc	/^    value_type WeighedDistance::impl_distance (ConfigurationIn_t q1,$/;"	f	class:hpp::core::WeighedDistance
impl_extract	src/extracted-path.hh	/^      virtual PathPtr_t impl_extract (const interval_t& subInterval) const$/;"	f	class:hpp::core::ExtractedPath
impl_extract	src/interpolated-path.cc	/^    PathPtr_t InterpolatedPath::impl_extract (const interval_t& subInterval) const$/;"	f	class:hpp::core::InterpolatedPath
impl_extract	src/path-vector.cc	/^    PathPtr_t PathVector::impl_extract (const interval_t& subInterval) const$/;"	f	class:hpp::core::PathVector
impl_extract	src/path.cc	/^    PathPtr_t Path::impl_extract (const interval_t& paramInterval) const$/;"	f	class:hpp::core::Path
impl_extract	src/straight-path.cc	/^    PathPtr_t StraightPath::impl_extract (const interval_t& subInterval) const$/;"	f	class:hpp::core::StraightPath
impl_jacobian	src/explicit-relative-transformation.cc	/^    void ExplicitRelativeTransformation::impl_jacobian (matrixOut_t jacobian, vectorIn_t arg) const$/;"	f	class:hpp::core::ExplicitRelativeTransformation
impl_jacobian	src/implicit-function.hh	/^      void impl_jacobian (matrixOut_t jacobian, vectorIn_t arg) const$/;"	f	class:hpp::core::ImplicitFunction
impl_jacobian	src/path-optimization/collision-constraints-result.hh	/^       virtual void impl_jacobian (matrixOut_t jacobian, vectorIn_t) const$/;"	f	class:hpp::core::pathOptimization::CollisionConstraint
impl_jacobian	src/path-optimization/path-length.cc	/^      void PathLength::impl_jacobian (matrixOut_t jacobian,$/;"	f	class:hpp::core::pathOptimization::PathLength
impl_jacobian	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       virtual void impl_jacobian (matrixOut_t jacobian, vectorIn_t) const$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
impl_jacobian	src/times-frame-function.hh	/^      inline void impl_jacobian (matrixOut_t J, vectorIn_t) const$/;"	f	struct:hpp::core::TimesFrameFunction
impl_paramDerivative	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::impl_paramDerivative (vectorOut_t res, const value_type& s) const$/;"	f	class:hpp::core::path::Spline
impl_paramIntegrate	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::impl_paramIntegrate (vectorIn_t dParam)$/;"	f	class:hpp::core::path::Spline
impl_velocityBound	include/hpp/core/path.hh	/^      virtual void impl_velocityBound (vectorOut_t bound,$/;"	f	class:hpp::core::Path
impl_velocityBound	src/interpolated-path.cc	/^    void InterpolatedPath::impl_velocityBound (vectorOut_t result,$/;"	f	class:hpp::core::InterpolatedPath
impl_velocityBound	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::impl_velocityBound ($/;"	f	class:hpp::core::path::Spline
impl_velocityBound	src/straight-path.cc	/^    void StraightPath::impl_velocityBound ($/;"	f	class:hpp::core::StraightPath
inConf_	include/hpp/core/explicit-relative-transformation.hh	/^      RowBlockIndices inConf_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
inEdges	src/node.cc	/^    const Edges_t& Node::inEdges () const$/;"	f	class:hpp::core::Node
inEdges_	include/hpp/core/node.hh	/^      Edges_t inEdges_;$/;"	m	class:hpp::core::Node
inJacobian_	src/implicit-function.hh	/^      const Eigen::MatrixBlocks <false, false>& inJacobian_;$/;"	m	struct:hpp::core::JacobianVisitor
inJacobian_	src/implicit-function.hh	/^      std::vector <Eigen::MatrixBlocks <false, false> > inJacobian_;$/;"	m	class:hpp::core::ImplicitFunction
inVel_	include/hpp/core/explicit-relative-transformation.hh	/^      ColBlockIndices inVel_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
indexCommonAncestor_	src/continuous-collision-checking/body-pair-collision.hh	/^	std::size_t indexCommonAncestor_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
infChild_	src/nearest-neighbor/k-d-tree.hh	/^      KDTreePtr_t infChild_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
init	include/hpp/core/basic-configuration-shooter.hh	/^      void init (const BasicConfigurationShooterPtr_t& self)$/;"	f	class:hpp::core::BasicConfigurationShooter
init	include/hpp/core/config-projector.hh	/^      void init (const ConfigProjectorPtr_t& self)$/;"	f	class:hpp::core::ConfigProjector
init	include/hpp/core/configuration-shooter.hh	/^      void init (const ConfigurationShooterWkPtr_t& weak)$/;"	f	class:hpp::core::ConfigurationShooter
init	include/hpp/core/connected-component.hh	/^      void init (const ConnectedComponentPtr_t& shPtr){$/;"	f	class:hpp::core::ConnectedComponent
init	include/hpp/core/constraint-set.hh	/^      void init (const ConstraintSetPtr_t& self)$/;"	f	class:hpp::core::ConstraintSet
init	include/hpp/core/constraint.hh	/^      void init (const ConstraintPtr_t& self)$/;"	f	class:hpp::core::Constraint
init	include/hpp/core/equation.hh	/^	void init (const EquationWkPtr_t& weak)$/;"	f	class:hpp::core::Equation
init	include/hpp/core/explicit-numerical-constraint.hh	/^      void init (const ExplicitNumericalConstraintWkPtr_t& weak)$/;"	f	class:hpp::core::ExplicitNumericalConstraint
init	include/hpp/core/explicit-relative-transformation.hh	/^      void init (const ExplicitRelativeTransformationWkPtr_t& weak)$/;"	f	class:hpp::core::ExplicitRelativeTransformation
init	include/hpp/core/numerical-constraint.hh	/^	void init (const NumericalConstraintWkPtr_t& weak)$/;"	f	class:hpp::core::NumericalConstraint
init	include/hpp/core/path-vector.hh	/^      void init (PathVectorPtr_t self)$/;"	f	class:hpp::core::PathVector
init	include/hpp/core/path/spline.hh	/^          void init (const Ptr_t& self) { Path::init(self); weak_ = self; }$/;"	f	class:hpp::core::path::Spline
init	include/hpp/core/problem-target.hh	/^      void init (const ProblemTargetWkPtr_t& weak)$/;"	f	class:hpp::core::ProblemTarget
init	include/hpp/core/steering-method.hh	/^      void init (SteeringMethodWkPtr_t weak)$/;"	f	class:hpp::core::SteeringMethod
init	include/hpp/core/steering-method/car-like.hh	/^          void init (CarLikeWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::CarLike
init	include/hpp/core/steering-method/constant-curvature.hh	/^        void init (const ConstantCurvatureWkPtr_t& weak)$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
init	include/hpp/core/steering-method/dubins.hh	/^          void init (DubinsWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Dubins
init	include/hpp/core/steering-method/hermite.hh	/^          void init (HermiteWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Hermite
init	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          void init (InterpolatedWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Interpolated
init	include/hpp/core/steering-method/reeds-shepp.hh	/^          void init (ReedsSheppWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::ReedsShepp
init	include/hpp/core/steering-method/snibud.hh	/^          void init (SnibudWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Snibud
init	include/hpp/core/steering-method/spline.hh	/^          void init (WkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Spline
init	include/hpp/core/steering-method/straight.hh	/^          void init (StraightWkPtr_t weak)$/;"	f	class:hpp::core::steeringMethod::Straight
init	include/hpp/core/straight-path.hh	/^      void init (StraightPathPtr_t self)$/;"	f	class:hpp::core::StraightPath
init	include/hpp/core/subchain-path.hh	/^      void init (SubchainPathPtr_t self)$/;"	f	class:hpp::core::SubchainPath
init	src/bi-rrt-planner.cc	/^    void BiRRTPlanner::init (const BiRRTPlannerWkPtr_t& weak)$/;"	f	class:hpp::core::BiRRTPlanner
init	src/diffusing-planner.cc	/^    void DiffusingPlanner::init (const DiffusingPlannerWkPtr_t& weak)$/;"	f	class:hpp::core::DiffusingPlanner
init	src/distance/reeds-shepp.cc	/^      void ReedsShepp::init (const ReedsSheppWkPtr_t& weak)$/;"	f	class:hpp::core::distance::ReedsShepp
init	src/dubins-path.cc	/^    void DubinsPath::init (DubinsPathPtr_t self)$/;"	f	class:hpp::core::DubinsPath
init	src/extracted-path.hh	/^      void init (ExtractedPathPtr_t self)$/;"	f	class:hpp::core::ExtractedPath
init	src/interpolated-path.cc	/^    void InterpolatedPath::init (InterpolatedPathPtr_t self)$/;"	f	class:hpp::core::InterpolatedPath
init	src/locked-joint.cc	/^    void LockedJoint::init (const LockedJointPtr_t& self)$/;"	f	class:hpp::core::LockedJoint
init	src/path-planner.cc	/^    void PathPlanner::init (const PathPlannerWkPtr_t& weak)$/;"	f	class:hpp::core::PathPlanner
init	src/path-planner/k-prm-star.cc	/^      void kPrmStar::init (const kPrmStarWkPtr_t& weak)$/;"	f	class:hpp::core::pathPlanner::kPrmStar
init	src/path.cc	/^    void Path::init (const PathWkPtr_t& self)$/;"	f	class:hpp::core::Path
init	src/path/hermite.cc	/^      void Hermite::init (HermitePtr_t self)$/;"	f	class:hpp::core::path::Hermite
init	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::init (ReedsSheppPathPtr_t self)$/;"	f	class:hpp::core::ReedsSheppPath
init	src/roadmap.cc	/^    void Roadmap::init (RoadmapWkPtr_t weak)$/;"	f	class:hpp::core::Roadmap
init	src/visibility-prm-planner.cc	/^    void VisibilityPrmPlanner::init (const VisibilityPrmPlannerWkPtr_t& weak)$/;"	f	class:hpp::core::VisibilityPrmPlanner
init	src/weighed-distance.cc	/^    void WeighedDistance::init (WeighedDistanceWkPtr_t self)$/;"	f	class:hpp::core::WeighedDistance
initConf_	include/hpp/core/problem-solver.hh	/^      ConfigurationPtr_t initConf_;$/;"	m	class:hpp::core::ProblemSolver
initConf_	include/hpp/core/problem.hh	/^      ConfigurationPtr_t initConf_;$/;"	m	class:hpp::core::Problem
initConfig	include/hpp/core/problem-solver.hh	/^      const ConfigurationPtr_t& initConfig () const$/;"	f	class:hpp::core::ProblemSolver
initConfig	include/hpp/core/problem.hh	/^      const ConfigurationPtr_t& initConfig () const$/;"	f	class:hpp::core::Problem
initConfig	src/problem-solver.cc	/^    void ProblemSolver::initConfig (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::ProblemSolver
initConfig	src/problem.cc	/^    void Problem::initConfig (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::Problem
initCopy	src/interpolated-path.cc	/^    void InterpolatedPath::initCopy (InterpolatedPathPtr_t self)$/;"	f	class:hpp::core::InterpolatedPath
initData	src/path-projector/global.cc	/^      void Global::initData(Data& data, const Configuration_t& q,$/;"	f	class:hpp::core::pathProjector::Global
initDistance	src/problem-solver.cc	/^    void ProblemSolver::initDistance ()$/;"	f	class:hpp::core::ProblemSolver
initNode	include/hpp/core/roadmap.hh	/^      NodePtr_t initNode () const$/;"	f	class:hpp::core::Roadmap
initNode	include/hpp/core/roadmap.hh	/^      void initNode (const ConfigurationPtr_t& config)$/;"	f	class:hpp::core::Roadmap
initNode_	include/hpp/core/roadmap.hh	/^      NodePtr_t initNode_;$/;"	m	class:hpp::core::Roadmap
initObstacleModel	src/problem-solver.cc	/^      Model initObstacleModel () {$/;"	f	namespace:hpp::core::__anon22
initPathProjector	src/problem-solver.cc	/^    void ProblemSolver::initPathProjector ()$/;"	f	class:hpp::core::ProblemSolver
initPathValidation	src/problem-solver.cc	/^    void ProblemSolver::initPathValidation ()$/;"	f	class:hpp::core::ProblemSolver
initProblem	src/problem-solver.cc	/^    void ProblemSolver::initProblem ()$/;"	f	class:hpp::core::ProblemSolver
initProblemTarget	src/problem-solver.cc	/^    void ProblemSolver::initProblemTarget ()$/;"	f	class:hpp::core::ProblemSolver
initSteeringMethod	src/problem-solver.cc	/^    void ProblemSolver::initSteeringMethod ()$/;"	f	class:hpp::core::ProblemSolver
init_	include/hpp/core/path/hermite.hh	/^        Configuration_t init_, end_;$/;"	m	class:hpp::core::path::Hermite
initial	include/hpp/core/dubins-path.hh	/^      inline Configuration_t initial () const$/;"	f	class:hpp::core::DubinsPath
initial	include/hpp/core/interpolated-path.hh	/^      Configuration_t initial () const$/;"	f	class:hpp::core::InterpolatedPath
initial	include/hpp/core/path-vector.hh	/^      virtual Configuration_t initial () const$/;"	f	class:hpp::core::PathVector
initial	include/hpp/core/path/hermite.hh	/^        virtual Configuration_t initial () const$/;"	f	class:hpp::core::path::Hermite
initial	include/hpp/core/path/spline.hh	/^          virtual Configuration_t initial () const$/;"	f	class:hpp::core::path::Spline
initial	include/hpp/core/reeds-shepp-path.hh	/^      inline Configuration_t initial () const$/;"	f	class:hpp::core::ReedsSheppPath
initial	include/hpp/core/steering-method/constant-curvature.hh	/^        inline Configuration_t initial () const$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
initial	include/hpp/core/straight-path.hh	/^      Configuration_t initial () const$/;"	f	class:hpp::core::StraightPath
initial	include/hpp/core/subchain-path.hh	/^      inline Configuration_t initial () const$/;"	f	class:hpp::core::SubchainPath
initial	src/extracted-path.hh	/^      inline Configuration_t initial () const$/;"	f	class:hpp::core::ExtractedPath
initialConfig	include/hpp/core/straight-path.hh	/^      void initialConfig (ConfigurationIn_t initial)$/;"	f	class:hpp::core::StraightPath
initialConfigList	src/path-projector/global.cc	/^      void Global::initialConfigList (const PathPtr_t& path,$/;"	f	class:hpp::core::pathProjector::Global
initial_	include/hpp/core/dubins-path.hh	/^      Configuration_t initial_;$/;"	m	class:hpp::core::DubinsPath
initial_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable Configuration_t initial_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
initial_	include/hpp/core/path-optimization/path-length.hh	/^	Configuration_t initial_;$/;"	m	class:hpp::core::pathOptimization::PathLength
initial_	include/hpp/core/reeds-shepp-path.hh	/^      Configuration_t initial_;$/;"	m	class:hpp::core::ReedsSheppPath
initial_	include/hpp/core/steering-method/constant-curvature.hh	/^        const Configuration_t initial_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
initial_	include/hpp/core/straight-path.hh	/^      Configuration_t initial_;$/;"	m	class:hpp::core::StraightPath
initialize	src/path-optimization/gradient-based.cc	/^      void GradientBased::initialize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::GradientBased
initializePathValidation	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::initializePathValidation$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
initializeProblem	src/problem-solver.cc	/^    void ProblemSolver::initializeProblem (ProblemPtr_t problem)$/;"	f	class:hpp::core::ProblemSolver
initializeProblemConstraints	src/path-optimization/gradient-based.cc	/^      void GradientBased::initializeProblemConstraints ()$/;"	f	class:hpp::core::pathOptimization::GradientBased
inputConf	include/hpp/core/explicit-numerical-constraint.hh	/^      const segments_t& inputConf () const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
inputConf	include/hpp/core/locked-joint.hh	/^      segments_t inputConf () const$/;"	f	class:hpp::core::LockedJoint
inputConfIntervals_	src/implicit-function.hh	/^      Eigen::RowBlockIndices inputConfIntervals_;$/;"	m	class:hpp::core::ImplicitFunction
inputConf_	include/hpp/core/explicit-numerical-constraint.hh	/^      segments_t inputConf_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
inputDerivIntervals_	src/implicit-function.hh	/^      Eigen::RowBlockIndices inputDerivIntervals_;$/;"	m	class:hpp::core::ImplicitFunction
inputDerivativeSize_	src/path-optimization/spline-gradient-based/cost.hh	/^        const size_type inputSize_, inputDerivativeSize_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
inputSize_	src/path-optimization/spline-gradient-based/cost.hh	/^        const size_type inputSize_, inputDerivativeSize_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
inputToOutput	src/implicit-function.hh	/^      const DifferentiableFunctionPtr_t& inputToOutput () const$/;"	f	class:hpp::core::ImplicitFunction
inputToOutput_	include/hpp/core/explicit-numerical-constraint.hh	/^      DifferentiableFunctionPtr_t inputToOutput_, g_, ginv_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
inputToOutput_	src/implicit-function.hh	/^      DifferentiableFunctionPtr_t inputToOutput_;$/;"	m	class:hpp::core::ImplicitFunction
inputVariable	src/explicit-relative-transformation.cc	/^      void inputVariable (JointConstPtr_t joint, std::vector<bool>& conf, std::vector<bool>& vel)$/;"	f	namespace:hpp::core::__anon23
inputVelocity	include/hpp/core/explicit-numerical-constraint.hh	/^      const segments_t& inputVelocity () const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
inputVelocity	include/hpp/core/locked-joint.hh	/^      segments_t inputVelocity () const$/;"	f	class:hpp::core::LockedJoint
inputVelocity_	include/hpp/core/explicit-numerical-constraint.hh	/^      segments_t inputVelocity_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
insert	include/hpp/core/interpolated-path.hh	/^      void insert (const value_type& time, ConfigurationIn_t config)$/;"	f	class:hpp::core::InterpolatedPath
integral	src/path/spline.cc	/^        void spline_basis_function<BernsteinBasis, Degree>::integral$/;"	f	class:hpp::core::path::internal::spline_basis_function
integral	src/path/spline.cc	/^        void spline_basis_function<CanonicalPolynomeBasis, Degree>::integral$/;"	f	class:hpp::core::path::internal::spline_basis_function
integrate	src/path-optimization/gradient-based.cc	/^      void GradientBased::integrate (vectorIn_t x0, vectorIn_t step,$/;"	f	class:hpp::core::pathOptimization::GradientBased
internal	include/hpp/core/container.hh	/^    namespace internal {$/;"	n	namespace:hpp::core
internal	include/hpp/core/path/spline.hh	/^      namespace internal {$/;"	n	namespace:hpp::core::path
internal	src/path/spline.cc	/^      namespace internal {$/;"	n	namespace:hpp::core::path	file:
interpolate	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::interpolate$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
interpolate	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::interpolate$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
interpolationPoints	include/hpp/core/interpolated-path.hh	/^      const InterpolationPoints_t& interpolationPoints () const$/;"	f	class:hpp::core::InterpolatedPath
interrupt	include/hpp/core/path-optimizer.hh	/^      void interrupt () { interrupt_ = true; }$/;"	f	class:hpp::core::PathOptimizer
interrupt	src/path-planner.cc	/^    void PathPlanner::interrupt ()$/;"	f	class:hpp::core::PathPlanner
interrupt	src/problem-solver.cc	/^    void ProblemSolver::interrupt ()$/;"	f	class:hpp::core::ProblemSolver
interrupt_	include/hpp/core/path-optimizer.hh	/^      bool interrupt_;$/;"	m	class:hpp::core::PathOptimizer
interrupt_	include/hpp/core/path-planner.hh	/^      bool interrupt_;$/;"	m	class:hpp::core::PathPlanner
interval_set	src/continuous-collision-checking/body-pair-collision.hh	/^        typedef boost::icl::interval_set<value_type> interval_set;$/;"	t	class:hpp::core::continuousCollisionChecking::BodyPairCollision
interval_t	include/hpp/core/fwd.hh	/^    typedef std::pair<value_type, value_type> interval_t;$/;"	t	namespace:hpp::core
intervalsToSize	include/hpp/core/subchain-path.hh	/^      static size_type intervalsToSize(const segments_t& ints)$/;"	f	class:hpp::core::SubchainPath
intervals_	include/hpp/core/subchain-path.hh	/^      segments_t intervals_;$/;"	m	class:hpp::core::SubchainPath
intervals_	src/continuous-collision-checking/intervals.hh	/^	std::list <interval_t> intervals_;      $/;"	m	class:hpp::core::continuousCollisionChecking::Intervals
is	src/relative-motion.cc	/^        static bool is (const DifferentiableFunctionPtr_t& f, size_type& i1, size_type& i2)$/;"	f	struct:hpp::core::__anon26::check
isEqual	src/equation.cc	/^    bool Equation::isEqual (const Equation& other, bool swapAndTest) const$/;"	f	class:hpp::core::Equation
isEqual	src/locked-joint.cc	/^    bool LockedJoint::isEqual (const Equation& other, bool swapAndTest) const$/;"	f	class:hpp::core::LockedJoint
isEqual	src/numerical-constraint.cc	/^    bool NumericalConstraint::isEqual (const Equation& other, bool swapAndTest)$/;"	f	class:hpp::core::NumericalConstraint
isGoal	src/astar.hh	/^      bool isGoal (const NodePtr_t node)$/;"	f	class:hpp::core::Astar
isInNeighbor	src/node.cc	/^    bool Node::isInNeighbor (const NodePtr_t& n) const$/;"	f	class:hpp::core::Node
isOutNeighbor	src/node.cc	/^    bool Node::isOutNeighbor (const NodePtr_t& n) const$/;"	f	class:hpp::core::Node
isSatisfied	include/hpp/core/path-optimization/linear-constraint.hh	/^        bool isSatisfied (const vector_t& x, const value_type& threshold = Eigen::NumTraits<value_type>::dummy_precision())$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
isSatisfied	src/config-projector.cc	/^    bool ConfigProjector::isSatisfied (ConfigurationIn_t config)$/;"	f	class:hpp::core::ConfigProjector
isSatisfied	src/config-projector.cc	/^    bool ConfigProjector::isSatisfied (ConfigurationIn_t config,$/;"	f	class:hpp::core::ConfigProjector
isSatisfied	src/constraint-set.cc	/^    bool ConstraintSet::isSatisfied (ConfigurationIn_t configuration)$/;"	f	class:hpp::core::ConstraintSet
isSatisfied	src/constraint-set.cc	/^    bool ConstraintSet::isSatisfied (ConfigurationIn_t configuration,$/;"	f	class:hpp::core::ConstraintSet
isSatisfied	src/locked-joint.cc	/^    bool LockedJoint::isSatisfied (ConfigurationIn_t config)$/;"	f	class:hpp::core::LockedJoint
isSatisfied	src/locked-joint.cc	/^    bool LockedJoint::isSatisfied (ConfigurationIn_t config, vector_t& error)$/;"	f	class:hpp::core::LockedJoint
isValid	src/path-optimization/config-optimization.cc	/^      bool ConfigOptimization::isValid (const PathPtr_t& p) const$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
is_pointer	include/hpp/core/container.hh	/^      template <typename T> struct is_pointer : boost::is_pointer<T> {};$/;"	s	namespace:hpp::core::internal
is_pointer	include/hpp/core/container.hh	/^      template <typename T> struct is_pointer<boost::shared_ptr<T> > : boost::true_type {};$/;"	s	namespace:hpp::core::internal
iterMax_	include/hpp/core/path-optimization/gradient-based.hh	/^	std::size_t iterMax_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
iterator	include/hpp/core/container.hh	/^      typedef typename Map_t::      iterator       iterator;$/;"	t	struct:hpp::core::Container
j	include/hpp/core/dubins-path.hh	/^        JointPtr_t j;$/;"	m	struct:hpp::core::DubinsPath::Wheels_t
j	include/hpp/core/steering-method/constant-curvature.hh	/^          JointPtr_t j;$/;"	m	struct:hpp::core::steeringMethod::ConstantCurvature::Wheels_t
jacobian	include/hpp/core/numerical-constraint.hh	/^        matrix_t& jacobian ()$/;"	f	class:hpp::core::NumericalConstraint
jacobian	src/implicit-function.hh	/^        const matrix_t& jacobian (const LiegroupElement&) const { return Jg_; }$/;"	f	struct:hpp::core::ImplicitFunction::IdentityData
jacobian	src/implicit-function.hh	/^        matrix_t& jacobian (const LiegroupElement& qOut) const$/;"	f	struct:hpp::core::ImplicitFunction::GenericGData
jacobian	src/path-optimization/spline-gradient-based/cost.hh	/^        void jacobian (vectorOut_t J, const Splines_t& splines) const$/;"	f	struct:hpp::core::pathOptimization::SquaredLength
jacobian_	include/hpp/core/numerical-constraint.hh	/^        matrix_t jacobian_;$/;"	m	class:hpp::core::NumericalConstraint
joint	include/hpp/core/locked-joint.hh	/^      const JointPtr_t& joint ()$/;"	f	class:hpp::core::LockedJoint
joint1	include/hpp/core/explicit-relative-transformation.hh	/^      const JointConstPtr_t& joint1 () const$/;"	f	class:hpp::core::ExplicitRelativeTransformation
joint1_	include/hpp/core/explicit-relative-transformation.hh	/^      JointConstPtr_t joint1_, joint2_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
joint2	include/hpp/core/explicit-relative-transformation.hh	/^      const JointConstPtr_t& joint2 () const$/;"	f	class:hpp::core::ExplicitRelativeTransformation
joint2_	include/hpp/core/explicit-relative-transformation.hh	/^      JointConstPtr_t joint1_, joint2_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
jointAndShapes	include/hpp/core/problem-solver.hh	/^      Container <JointAndShapes_t>              jointAndShapes;$/;"	m	class:hpp::core::ProblemSolver
jointBoundConstraint	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::jointBoundConstraint$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
jointBoundMatrices	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^      size_type jointBoundMatrices (const DevicePtr_t& d, ConfigurationIn_t neutral,$/;"	f	namespace:hpp::core::pathOptimization
jointConfInterval	src/explicit-relative-transformation.cc	/^      BlockIndex::segments_t jointConfInterval (JointConstPtr_t j) {$/;"	f	namespace:hpp::core::__anon23
jointName	include/hpp/core/locked-joint.hh	/^      const std::string& jointName () const {$/;"	f	class:hpp::core::LockedJoint
jointName_	include/hpp/core/locked-joint.hh	/^      std::string jointName_;$/;"	m	class:hpp::core::LockedJoint
jointVelInterval	src/explicit-relative-transformation.cc	/^      BlockIndex::segments_t jointVelInterval (JointConstPtr_t j) {$/;"	f	namespace:hpp::core::__anon23
joint_	include/hpp/core/joint-bound-validation.hh	/^      JointConstPtr_t joint_;$/;"	m	class:hpp::core::JointBoundValidationReport
joint_	include/hpp/core/locked-joint.hh	/^      JointPtr_t joint_;$/;"	m	class:hpp::core::LockedJoint
joint_	src/continuous-collision-checking/path-velocity.hh	/^	JointPtr_t joint_;$/;"	m	struct:hpp::core::continuousCollisionChecking::CoefficientVelocity
joint_a	src/continuous-collision-checking/body-pair-collision.hh	/^	const JointPtr_t& joint_a () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
joint_a_	src/continuous-collision-checking/body-pair-collision.hh	/^	JointPtr_t joint_a_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
joint_b	src/continuous-collision-checking/body-pair-collision.hh	/^	const JointPtr_t& joint_b () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
joint_b_	src/continuous-collision-checking/body-pair-collision.hh	/^	JointPtr_t joint_b_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
joints	src/continuous-collision-checking/body-pair-collision.hh	/^	const std::vector <se3::JointIndex>& joints () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
joints_	src/continuous-collision-checking/body-pair-collision.hh	/^	std::vector <JointIndex> joints_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
kPRM	include/hpp/core/path-planner/k-prm-star.hh	/^        static const double kPRM;$/;"	m	class:hpp::core::pathPlanner::kPrmStar
kPRM	src/path-planner/k-prm-star.cc	/^      const double kPrmStar::kPRM = 2 * exp (1);$/;"	m	class:hpp::core::pathPlanner::kPrmStar	file:
kPrmStar	include/hpp/core/path-planner/k-prm-star.hh	/^      class HPP_CORE_DLLAPI kPrmStar : public PathPlanner$/;"	c	namespace:hpp::core::pathPlanner
kPrmStar	src/path-planner/k-prm-star.cc	/^      kPrmStar::kPrmStar (const Problem& problem) :$/;"	f	class:hpp::core::pathPlanner::kPrmStar
kPrmStar	src/path-planner/k-prm-star.cc	/^      kPrmStar::kPrmStar (const Problem& problem, const RoadmapPtr_t& roadmap) :$/;"	f	class:hpp::core::pathPlanner::kPrmStar
kPrmStarPtr_t	include/hpp/core/fwd.hh	/^      typedef boost::shared_ptr <kPrmStar> kPrmStarPtr_t;$/;"	t	namespace:hpp::core::pathPlanner
key_type	include/hpp/core/container.hh	/^      typedef typename Map_t::key_type key_type;$/;"	t	struct:hpp::core::Container
lambda_	include/hpp/core/path-optimization/path-length.hh	/^	mutable vector_t lambda_;$/;"	m	class:hpp::core::pathOptimization::PathLength
lambda_	src/path-optimization/spline-gradient-based/cost.hh	/^        vector_t lambda_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
largestSingularValue	src/weighed-distance.cc	/^        template<int N> static value_type largestSingularValue (const Eigen::Matrix<value_type, 3, N>& m)$/;"	f	struct:hpp::core::__anon17::ComputeWeightStep
largestSingularValue	src/weighed-distance.cc	/^      template<> value_type ComputeWeightStep::largestSingularValue<0>(const Eigen::Matrix<value_type, 3, 0>&)$/;"	f	class:hpp::core::__anon17::ComputeWeightStep
largestSingularValue	src/weighed-distance.cc	/^      template<> value_type ComputeWeightStep::largestSingularValue<1>(const Eigen::Matrix<value_type, 3, 1>& m)$/;"	f	class:hpp::core::__anon17::ComputeWeightStep
lastElement	src/continuous-collision-checking/intervals.hh	/^      inline bool lastElement (const std::list <interval_t>& list,$/;"	f	namespace:hpp::core::continuousCollisionChecking
lastIsOptional	src/config-projector.cc	/^    bool ConfigProjector::lastIsOptional () const$/;"	f	class:hpp::core::ConfigProjector
lastIsOptional	src/config-projector.cc	/^    void ConfigProjector::lastIsOptional (bool optional)$/;"	f	class:hpp::core::ConfigProjector
latest	src/problem-solver.cc	/^    ProblemSolverPtr_t ProblemSolver::latest ()$/;"	f	class:hpp::core::ProblemSolver
latest_	include/hpp/core/problem-solver.hh	/^      static ProblemSolverPtr_t latest_;$/;"	m	class:hpp::core::ProblemSolver
latest_	src/problem-solver.cc	/^    ProblemSolverPtr_t ProblemSolver::latest_ = 0x0;$/;"	m	class:hpp::core::ProblemSolver	file:
length	include/hpp/core/path-projector/global.hh	/^            value_type length; \/\/ Length between this config and the previous one$/;"	m	struct:hpp::core::pathProjector::Global::Data
length	include/hpp/core/path.hh	/^      value_type length () const$/;"	f	class:hpp::core::Path
lengths_	include/hpp/core/dubins-path.hh	/^      Lengths_t lengths_;$/;"	m	class:hpp::core::DubinsPath
lengths_	include/hpp/core/reeds-shepp-path.hh	/^      Lengths_t lengths_;$/;"	m	class:hpp::core::ReedsSheppPath
lineSearch	src/path-projector/progressive.cc	/^      constraints::lineSearch::Constant lineSearch;$/;"	m	namespace:hpp::core::pathProjector	file:
lineSearchType_	include/hpp/core/config-projector.hh	/^      LineSearchType lineSearchType_;$/;"	m	class:hpp::core::ConfigProjector
linearize	src/path-optimization/collision-constraints-result.hh	/^	bool linearize (const PathVectorPtr_t& path, matrixOut_t jacobian,$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
linearize	src/path-optimization/spline-gradient-based-constraint.cc	/^          void linearize (const SplinePtr_t& spline, const SplineOptimizationData& sod,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions
linearize	src/path-optimization/spline-gradient-based-constraint.cc	/^          void linearize (const Splines_t& splines, const SplineOptimizationDatas_t& ss, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions
linearize	src/path-optimization/spline-gradient-based.cc	/^        void linearize (const SplinePtr_t& spline, const SplineOptimizationData& sod,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
linearize	src/path-optimization/spline-gradient-based.cc	/^        void linearize (const Splines_t& splines, const SplineOptimizationDatas_t& ss, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
linearize	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void linearize (const SplinePtr_t& spline, const SplineOptimizationData& sod,$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
linearize	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void linearize (const Splines_t& splines, const SplineOptimizationDatas_t& ss, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
linkNodes	src/path-planner/k-prm-star.cc	/^      void kPrmStar::linkNodes ()$/;"	f	class:hpp::core::pathPlanner::kPrmStar
list	src/continuous-collision-checking/intervals.hh	/^	const std::list <interval_t>& list () const$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
llt	include/hpp/core/path-optimization/quadratic-program.hh	/^        LLT_t llt;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
llt	src/path-optimization/spline-gradient-based-constraint.cc	/^          LLT_t llt;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
llt	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        LLT_t llt;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
localPathId_	src/path-optimization/collision-constraints-result.hh	/^	size_type localPathId_; \/\/ index in global path$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
lockedJoints	include/hpp/core/config-projector.hh	/^      LockedJoints_t lockedJoints () const {$/;"	f	class:hpp::core::ConfigProjector
lockedJoints	include/hpp/core/problem-solver.hh	/^      Container <LockedJointPtr_t>              lockedJoints;$/;"	m	class:hpp::core::ProblemSolver
lockedJoints_	include/hpp/core/config-projector.hh	/^      LockedJoints_t lockedJoints_;$/;"	m	class:hpp::core::ConfigProjector
lowerBound_	include/hpp/core/joint-bound-validation.hh	/^      value_type lowerBound_;$/;"	m	class:hpp::core::JointBoundValidationReport
lowerBounds_	src/nearest-neighbor/k-d-tree.hh	/^      vector_t lowerBounds_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
makeCollisionPair	src/collision-validation.cc	/^      inline CollisionPair_t makeCollisionPair (const DevicePtr_t& d, const se3::CollisionPair& p)$/;"	f	namespace:hpp::core::__anon9
makeFunction	src/locked-joint.cc	/^        DifferentiableFunctionPtr_t makeFunction ($/;"	f	namespace:hpp::core::__anon20
manifoldStep	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::manifoldStep$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
map	include/hpp/core/container.hh	/^      Map_t map;$/;"	m	struct:hpp::core::Container
mapped_type	include/hpp/core/container.hh	/^      typedef typename Map_t::mapped_type mapped_type;$/;"	t	struct:hpp::core::Container
matrix	src/relative-motion.cc	/^    RelativeMotion::matrix_type RelativeMotion::matrix (const DevicePtr_t& dev)$/;"	f	class:hpp::core::RelativeMotion
matrix3_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::matrix3_t matrix3_t;$/;"	t	namespace:hpp::core
matrix6_t	include/hpp/core/fwd.hh	/^    typedef constraints::matrix6_t matrix6_t;$/;"	t	namespace:hpp::core
matrixIn_t	include/hpp/core/fwd.hh	/^    typedef constraints::matrixIn_t matrixIn_t;$/;"	t	namespace:hpp::core
matrixOut_t	include/hpp/core/fwd.hh	/^    typedef constraints::matrixOut_t matrixOut_t;$/;"	t	namespace:hpp::core
matrix_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::matrix_t matrix_t;$/;"	t	namespace:hpp::core
matrix_type	include/hpp/core/relative-motion.hh	/^      typedef Eigen::Matrix<RelativeMotionType, Eigen::Dynamic, Eigen::Dynamic> matrix_type;$/;"	t	struct:hpp::core::RelativeMotion
maxIterPathPlanning	include/hpp/core/problem-solver.hh	/^      size_type maxIterPathPlanning () const$/;"	f	class:hpp::core::ProblemSolver
maxIterPathPlanning	src/problem-solver.cc	/^    void ProblemSolver::maxIterPathPlanning (size_type iterations)$/;"	f	class:hpp::core::ProblemSolver
maxIterPathPlanning_	include/hpp/core/problem-solver.hh	/^      unsigned long int maxIterPathPlanning_;$/;"	m	class:hpp::core::ProblemSolver
maxIterProjection	include/hpp/core/problem-solver.hh	/^      size_type maxIterProjection () const$/;"	f	class:hpp::core::ProblemSolver
maxIterProjection	src/problem-solver.cc	/^    void ProblemSolver::maxIterProjection (size_type iterations)$/;"	f	class:hpp::core::ProblemSolver
maxIterProjection_	include/hpp/core/problem-solver.hh	/^      size_type maxIterProjection_;$/;"	m	class:hpp::core::ProblemSolver
maxIterations	src/config-projector.cc	/^    size_type ConfigProjector::maxIterations () const$/;"	f	class:hpp::core::ConfigProjector
maxIterations	src/config-projector.cc	/^    void ConfigProjector::maxIterations (size_type iterations)$/;"	f	class:hpp::core::ConfigProjector
maxIterations	src/path-planner.cc	/^    void PathPlanner::maxIterations (const unsigned long int& n)$/;"	f	class:hpp::core::PathPlanner
maxIterations_	include/hpp/core/path-planner.hh	/^      unsigned long int maxIterations_;$/;"	m	class:hpp::core::PathPlanner
maxPathLength_	include/hpp/core/path-projector/dichotomy.hh	/^          value_type maxPathLength_;$/;"	m	class:hpp::core::pathProjector::Dichotomy
maxVelocity	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::maxVelocity (vectorOut_t res) const$/;"	f	class:hpp::core::path::Spline
maximalVelocity	src/continuous-collision-checking/body-pair-collision.hh	/^	value_type maximalVelocity () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
maximalVelocity_	src/continuous-collision-checking/path-velocity.hh	/^	value_type maximalVelocity_;$/;"	m	struct:hpp::core::continuousCollisionChecking::PathVelocity
meanBounds	src/dubins-path.cc	/^    inline value_type meanBounds(const JointPtr_t& j, const size_type& i)$/;"	f	namespace:hpp::core
meanBounds	src/reeds-shepp-path.cc	/^    inline value_type meanBounds(const JointPtr_t& j, const size_type& i)$/;"	f	namespace:hpp::core
meanBounds	src/steering-method/constant-curvature.cc	/^      inline value_type meanBounds(const JointPtr_t& j, const size_type& i)$/;"	f	namespace:hpp::core::steeringMethod
merge	src/connected-component.cc	/^    void ConnectedComponent::merge (const ConnectedComponentPtr_t& other)$/;"	f	class:hpp::core::ConnectedComponent
merge	src/nearest-neighbor/basic.hh	/^      virtual void merge (ConnectedComponentPtr_t, ConnectedComponentPtr_t)$/;"	f	class:hpp::core::nearestNeighbor::Basic
merge	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::merge(ConnectedComponentPtr_t cc1,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
merge	src/roadmap.cc	/^    void Roadmap::merge (const ConnectedComponentPtr_t& cc1,$/;"	f	class:hpp::core::Roadmap
mod2pi	src/dubins-path.cc	/^    double mod2pi( double theta )$/;"	f	namespace:hpp::core
mod2pi	src/dubins.cc	/^double mod2pi( double theta )$/;"	f
mod2pi	src/reeds-shepp-path.cc	/^    inline value_type mod2pi(const value_type& x)$/;"	f	namespace:hpp::core
msg_	include/hpp/core/projection-error.hh	/^      std::string msg_;$/;"	m	struct:hpp::core::projection_error
n1_	include/hpp/core/edge.hh	/^      NodePtr_t n1_;$/;"	m	class:hpp::core::Edge
n2_	include/hpp/core/edge.hh	/^      NodePtr_t n2_;$/;"	m	class:hpp::core::Edge
nSplines_	src/path-optimization/spline-gradient-based/cost.hh	/^        const std::size_t nSplines_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
name	include/hpp/core/constraint.hh	/^      const std::string& name () const$/;"	f	class:hpp::core::Constraint
name	src/continuous-collision-checking/body-pair-collision.hh	/^	std::string name () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
name_	include/hpp/core/constraint.hh	/^      std::string name_;$/;"	m	class:hpp::core::Constraint
nbNonLockedDofs_	src/path-optimization/collision-constraints-result.hh	/^	size_type nbNonLockedDofs_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
nbPaths_	include/hpp/core/path-optimization/path-length.hh	/^	std::size_t nbPaths_;$/;"	m	class:hpp::core::pathOptimization::PathLength
nbWaypoints_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable size_type nbWaypoints_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
nbWaypoints_	src/path-optimization/collision-constraints-result.hh	/^	size_type nbWaypoints_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
nearestNeighbor	include/hpp/core/fwd.hh	/^    namespace nearestNeighbor {$/;"	n	namespace:hpp::core
nearestNeighbor	src/nearest-neighbor/basic.cc	/^    namespace nearestNeighbor {$/;"	n	namespace:hpp::core	file:
nearestNeighbor	src/nearest-neighbor/basic.hh	/^    namespace nearestNeighbor {$/;"	n	namespace:hpp::core
nearestNeighbor	src/nearest-neighbor/k-d-tree.cc	/^    namespace nearestNeighbor {$/;"	n	namespace:hpp::core	file:
nearestNeighbor	src/nearest-neighbor/k-d-tree.hh	/^    namespace nearestNeighbor {$/;"	n	namespace:hpp::core
nearestNeighbor	src/roadmap.cc	/^    NearestNeighborPtr_t Roadmap::nearestNeighbor(){$/;"	f	class:hpp::core::Roadmap
nearestNeighbor	src/roadmap.cc	/^    void Roadmap::nearestNeighbor(NearestNeighborPtr_t nearestNeighbor){$/;"	f	class:hpp::core::Roadmap
nearestNeighbor_	include/hpp/core/roadmap.hh	/^      NearestNeighborPtr_t nearestNeighbor_;$/;"	m	class:hpp::core::Roadmap
nearestNode	src/roadmap.cc	/^    Roadmap::nearestNode (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::Roadmap
nearestNodes	src/roadmap.cc	/^    Nodes_t Roadmap::nearestNodes (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::Roadmap
nodeStatus_	include/hpp/core/visibility-prm-planner.hh	/^      std::map <NodePtr_t, bool> nodeStatus_; \/\/ true for guard node$/;"	m	class:hpp::core::VisibilityPrmPlanner
nodes	include/hpp/core/connected-component.hh	/^      const NodeVector_t& nodes () const$/;"	f	class:hpp::core::ConnectedComponent
nodes	include/hpp/core/roadmap.hh	/^      const Nodes_t& nodes () const$/;"	f	class:hpp::core::Roadmap
nodesMap_	src/nearest-neighbor/k-d-tree.hh	/^      NodesMap_t nodesMap_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
nodes_	include/hpp/core/connected-component.hh	/^      NodeVector_t nodes_;$/;"	m	class:hpp::core::ConnectedComponent
nodes_	include/hpp/core/parser/roadmap-factory.hh	/^          Nodes_t nodes_;$/;"	m	class:hpp::core::parser::RoadmapFactory
nodes_	include/hpp/core/roadmap.hh	/^      Nodes_t nodes_;$/;"	m	class:hpp::core::Roadmap
nonConstRightHandSide	src/equation.cc	/^    vectorOut_t Equation::nonConstRightHandSide ()$/;"	f	class:hpp::core::Equation
numToStr	src/locked-joint.cc	/^	std::string numToStr (const T& v) {$/;"	f	namespace:hpp::core::__anon20
numberConfigValidations	src/config-validations.cc	/^    size_type ConfigValidations::numberConfigValidations () const$/;"	f	class:hpp::core::ConfigValidations
numberDof	src/locked-joint.cc	/^    size_type LockedJoint::numberDof () const$/;"	f	class:hpp::core::LockedJoint
numberDofs_	include/hpp/core/path-optimization/gradient-based.hh	/^	size_type numberDofs_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
numberDofs_	include/hpp/core/path-optimization/path-length.hh	/^	size_type numberDofs_;$/;"	m	class:hpp::core::pathOptimization::PathLength
numberNodes_	include/hpp/core/path-planner/k-prm-star.hh	/^        std::size_t numberNodes_;$/;"	m	class:hpp::core::pathPlanner::kPrmStar
numberNonLockedDof	src/config-projector.cc	/^    size_type ConfigProjector::numberNonLockedDof () const$/;"	f	class:hpp::core::ConfigProjector
numberNonLockedDof	src/constraint-set.cc	/^    size_type ConstraintSet::numberNonLockedDof () const$/;"	f	class:hpp::core::ConstraintSet
numberOfConsecutiveFailurePerJoints	include/hpp/core/path-optimization/partial-shortcut.hh	/^            std::size_t numberOfConsecutiveFailurePerJoints;$/;"	m	struct:hpp::core::pathOptimization::PartialShortcut::Parameters
numberOfConsecutiveFailurePerJoints	include/hpp/core/path-optimization/partial-shortcut.hh	/^        static std::size_t numberOfConsecutiveFailurePerJoints ()$/;"	f	struct:hpp::core::pathOptimization::PartialShortcutTraits
numberOfIterations	include/hpp/core/path-optimization/config-optimization.hh	/^            std::size_t numberOfIterations;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
numberOfIterations	include/hpp/core/path-optimization/config-optimization.hh	/^        static std::size_t numberOfIterations () { return 3; }$/;"	f	struct:hpp::core::pathOptimization::ConfigOptimizationTraits
numberOfPass	include/hpp/core/path-optimization/config-optimization.hh	/^            std::size_t numberOfPass;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
numberOfPass	include/hpp/core/path-optimization/config-optimization.hh	/^        static std::size_t numberOfPass () { return 5; }$/;"	f	struct:hpp::core::pathOptimization::ConfigOptimizationTraits
numberPaths	include/hpp/core/path-vector.hh	/^      std::size_t numberPaths () const$/;"	f	class:hpp::core::PathVector
numericalConstraint	include/hpp/core/problem-solver.hh	/^      NumericalConstraintPtr_t numericalConstraint (const std::string& name)$/;"	f	class:hpp::core::ProblemSolver
numericalConstraints	include/hpp/core/config-projector.hh	/^      NumericalConstraints_t numericalConstraints () const$/;"	f	class:hpp::core::ConfigProjector
numericalConstraints	include/hpp/core/problem-solver.hh	/^      Container <NumericalConstraintPtr_t>      numericalConstraints;$/;"	m	class:hpp::core::ProblemSolver
oMi_	src/times-frame-function.hh	/^      Transform3f oMi_;$/;"	m	struct:hpp::core::TimesFrameFunction
oQi_	src/times-frame-function.hh	/^      Quaternion_t oQi_;$/;"	m	struct:hpp::core::TimesFrameFunction
object1	include/hpp/core/collision-validation-report.hh	/^      CollisionObjectConstPtr_t object1;$/;"	m	struct:hpp::core::CollisionValidationReport
object1_	src/path-optimization/collision-constraints-result.hh	/^	CollisionObjectConstPtr_t object1_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
object1_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^        CollisionObjectConstPtr_t object1_, object2_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
object2	include/hpp/core/collision-validation-report.hh	/^      CollisionObjectConstPtr_t object2;$/;"	m	struct:hpp::core::CollisionValidationReport
object2_	src/path-optimization/collision-constraints-result.hh	/^	CollisionObjectConstPtr_t object2_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
object2_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^        CollisionObjectConstPtr_t object1_, object2_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
obsModel	src/problem-solver.cc	/^      const Model obsModel = initObstacleModel();$/;"	m	namespace:hpp::core::__anon22	file:
obstacle	src/problem-solver.cc	/^    CollisionObjectPtr_t ProblemSolver::obstacle (const std::string& name) const$/;"	f	class:hpp::core::ProblemSolver
obstacleData_	include/hpp/core/problem-solver.hh	/^      pinocchio::GeomDataPtr_t  obstacleData_;$/;"	m	class:hpp::core::ProblemSolver
obstacleModel_	include/hpp/core/problem-solver.hh	/^      pinocchio::GeomModelPtr_t obstacleModel_;$/;"	m	class:hpp::core::ProblemSolver
obstacleNames	src/problem-solver.cc	/^    std::list <std::string> ProblemSolver::obstacleNames$/;"	f	class:hpp::core::ProblemSolver
obstacles	src/distance-between-objects.cc	/^    void DistanceBetweenObjects::obstacles (const ObjectStdVector_t& obstacles)$/;"	f	class:hpp::core::DistanceBetweenObjects
omega	src/explicit-relative-transformation.cc	/^      inline ConstHalfJacobian_t omega(const JointJacobian_t& j) { return j.bottomRows<3>(); }$/;"	f	namespace:hpp::core::__anon23
oneMP	src/reeds-shepp-path.cc	/^      const vector2_t oneMP = (vector2_t() << -1,1).finished();$/;"	m	namespace:hpp::core::__anon24	file:
onePM	src/reeds-shepp-path.cc	/^      const vector2_t onePM = (vector2_t() << 1,-1).finished();$/;"	m	namespace:hpp::core::__anon24	file:
oneStep	src/bi-rrt-planner.cc	/^    void BiRRTPlanner::oneStep ()$/;"	f	class:hpp::core::BiRRTPlanner
oneStep	src/config-projector.cc	/^    bool ConfigProjector::oneStep (ConfigurationOut_t configuration,$/;"	f	class:hpp::core::ConfigProjector
oneStep	src/diffusing-planner.cc	/^    void DiffusingPlanner::oneStep ()$/;"	f	class:hpp::core::DiffusingPlanner
oneStep	src/path-planner/k-prm-star.cc	/^      void kPrmStar::oneStep ()$/;"	f	class:hpp::core::pathPlanner::kPrmStar
oneStep	src/plan-and-optimize.cc	/^    void PlanAndOptimize::oneStep ()$/;"	f	class:hpp::core::PlanAndOptimize
oneStep	src/visibility-prm-planner.cc	/^    void VisibilityPrmPlanner::oneStep ()$/;"	f	class:hpp::core::VisibilityPrmPlanner
onlyFullShortcut	include/hpp/core/path-optimization/partial-shortcut.hh	/^            bool onlyFullShortcut;$/;"	m	struct:hpp::core::pathOptimization::PartialShortcut::Parameters
onlyFullShortcut	include/hpp/core/path-optimization/partial-shortcut.hh	/^        static bool        onlyFullShortcut ()$/;"	f	struct:hpp::core::pathOptimization::PartialShortcutTraits
open_	src/astar.hh	/^      Nodes_t open_;$/;"	m	class:hpp::core::Astar
operator 	src/implicit-function.hh	/^    template <> inline void ValueVisitor::operator () <SE3> (const SE3&)$/;"	f	class:hpp::core::ValueVisitor
operator ()	include/hpp/core/distance.hh	/^      value_type operator () (ConfigurationIn_t q1,$/;"	f	class:hpp::core::Distance
operator ()	include/hpp/core/distance.hh	/^      value_type operator () (NodePtr_t n1, NodePtr_t n2) const$/;"	f	class:hpp::core::Distance
operator ()	include/hpp/core/path.hh	/^      Configuration_t operator () (const value_type& time, bool& success) const$/;"	f	class:hpp::core::Path
operator ()	include/hpp/core/path.hh	/^      bool operator () (ConfigurationOut_t result, const value_type& time)$/;"	f	class:hpp::core::Path
operator ()	include/hpp/core/steering-method.hh	/^      PathPtr_t operator() (ConfigurationIn_t q1,$/;"	f	class:hpp::core::SteeringMethod
operator ()	src/astar.hh	/^	bool operator () (const NodePtr_t& n1, const NodePtr_t& n2)$/;"	f	struct:hpp::core::Astar::SortFunctor
operator ()	src/continuous-collision-checking.cc	/^	bool operator() (const JointIndexPair_t& p0, const JointIndexPair_t& p1) const$/;"	f	struct:hpp::core::__anon7::JointIndexPairCompare_t
operator ()	src/continuous-collision-checking/progressive.cc	/^          bool operator() (const JointIndexPair_t& p0, const JointIndexPair_t& p1) const$/;"	f	struct:hpp::core::continuousCollisionChecking::__anon18::JointIndexPairCompare_t
operator ()	src/implicit-function.hh	/^      template <typename LgT> inline void operator () (const LgT&)$/;"	f	struct:hpp::core::JacobianVisitor
operator ()	src/implicit-function.hh	/^      template <typename LgT> void operator () (const LgT&)$/;"	f	struct:hpp::core::ValueVisitor
operator ()	src/nearest-neighbor/basic.cc	/^          bool operator () (const DistAndNode_t& r,$/;"	f	struct:hpp::core::nearestNeighbor::__anon21::DistAndNodeComp_t
operator ()	src/problem-solver.cc	/^        bool operator() (const CollisionObjectPtr_t co) const {$/;"	f	struct:hpp::core::__anon22::FindCollisionObject
operator <<	include/hpp/core/constraint.hh	/^    inline std::ostream& operator<< (std::ostream& os,$/;"	f	namespace:hpp::core
operator <<	include/hpp/core/locked-joint.hh	/^    inline std::ostream& operator<< (std::ostream& os, const LockedJoint& lj)$/;"	f	namespace:hpp::core
operator <<	include/hpp/core/path.hh	/^    inline std::ostream& operator<< (std::ostream& os, const Path& path)$/;"	f	namespace:hpp::core
operator <<	include/hpp/core/validation-report.hh	/^    inline std::ostream& operator<< (std::ostream& os,$/;"	f	namespace:hpp::core
operator <<	src/continuous-collision-checking/body-pair-collision.hh	/^      inline std::ostream& operator<< (std::ostream& os, const BodyPairCollision& b)$/;"	f	namespace:hpp::core::continuousCollisionChecking
operator <<	src/continuous-collision-checking/intervals.hh	/^inline std::ostream& operator<<$/;"	f
operator <<	src/node.cc	/^    std::ostream& operator<< (std::ostream& os, const Node& n)$/;"	f	namespace:hpp::core
operator <<	src/roadmap.cc	/^    std::ostream& operator<< (std::ostream& os, const hpp::core::Roadmap& r)$/;"	f	namespace:hpp::core
operator <<	src/weighed-distance.cc	/^    std::ostream& operator<< (std::ostream& os, const std::vector <value_type>& v)$/;"	f	namespace:hpp::core
operator ==	include/hpp/core/equation.hh	/^	bool operator== (const Equation& other) const$/;"	f	class:hpp::core::Equation
optimize	src/config-projector.cc	/^    bool ConfigProjector::optimize (ConfigurationOut_t configuration,$/;"	f	class:hpp::core::ConfigProjector
optimize	src/path-optimization/config-optimization.cc	/^      PathVectorPtr_t ConfigOptimization::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
optimize	src/path-optimization/config-optimization.cc	/^      bool ConfigOptimization::Optimizer::optimize (ConfigurationOut_t q,$/;"	f	class:hpp::core::pathOptimization::ConfigOptimization::Optimizer
optimize	src/path-optimization/gradient-based.cc	/^      PathVectorPtr_t GradientBased::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::GradientBased
optimize	src/path-optimization/partial-shortcut.cc	/^      PathVectorPtr_t PartialShortcut::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::PartialShortcut
optimize	src/path-optimization/simple-time-parameterization.cc	/^      PathVectorPtr_t SimpleTimeParameterization::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::SimpleTimeParameterization
optimize	src/path-optimization/spline-gradient-based-constraint.cc	/^        PathVectorPtr_t SplineGradientBasedConstraint<_PB, _SO>::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
optimize	src/path-optimization/spline-gradient-based.cc	/^      PathVectorPtr_t SplineGradientBased<_PB, _SO>::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
optimize	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      PathVectorPtr_t SplineGradientBased<_PB, _SO>::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
optimize	src/random-shortcut.cc	/^    PathVectorPtr_t RandomShortcut::optimize (const PathVectorPtr_t& path)$/;"	f	class:hpp::core::RandomShortcut
optimizeFullPath	src/path-optimization/partial-shortcut.cc	/^      PathVectorPtr_t PartialShortcut::optimizeFullPath ($/;"	f	class:hpp::core::pathOptimization::PartialShortcut
optimizePath	src/problem-solver.cc	/^    void ProblemSolver::optimizePath (PathVectorPtr_t path)$/;"	f	class:hpp::core::ProblemSolver
optimizeRandom	src/path-optimization/partial-shortcut.cc	/^      PathVectorPtr_t PartialShortcut::optimizeRandom ($/;"	f	class:hpp::core::pathOptimization::PartialShortcut
optimizers_	include/hpp/core/plan-and-optimize.hh	/^      Optimizers_t optimizers_;$/;"	m	class:hpp::core::PlanAndOptimize
original_	include/hpp/core/subchain-path.hh	/^      PathPtr_t original_;$/;"	m	class:hpp::core::SubchainPath
original_	src/extracted-path.hh	/^      PathPtr_t original_;$/;"	m	class:hpp::core::ExtractedPath
outConf_	include/hpp/core/explicit-relative-transformation.hh	/^      RowBlockIndices outConf_ , outVel_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
outEdges	src/node.cc	/^    const Edges_t& Node::outEdges () const$/;"	f	class:hpp::core::Node
outEdges_	include/hpp/core/node.hh	/^      Edges_t outEdges_;$/;"	m	class:hpp::core::Node
outJacobian_	src/implicit-function.hh	/^      const Eigen::MatrixBlocks <false, false>& outJacobian_;$/;"	m	struct:hpp::core::JacobianVisitor
outJacobian_	src/implicit-function.hh	/^      std::vector <Eigen::MatrixBlocks <false, false> > outJacobian_;$/;"	m	class:hpp::core::ImplicitFunction
outVel_	include/hpp/core/explicit-relative-transformation.hh	/^      RowBlockIndices outConf_ , outVel_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
outputConf	include/hpp/core/explicit-numerical-constraint.hh	/^      const segments_t& outputConf () const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
outputConf	include/hpp/core/locked-joint.hh	/^      segments_t outputConf () const$/;"	f	class:hpp::core::LockedJoint
outputConfIntervals_	src/implicit-function.hh	/^      Eigen::RowBlockIndices outputConfIntervals_;$/;"	m	class:hpp::core::ImplicitFunction
outputConf_	include/hpp/core/explicit-numerical-constraint.hh	/^      segments_t outputConf_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
outputDerivIntervals_	src/implicit-function.hh	/^      Eigen::RowBlockIndices outputDerivIntervals_;$/;"	m	class:hpp::core::ImplicitFunction
outputDerivativeSize	include/hpp/core/path.hh	/^      size_type outputDerivativeSize () const$/;"	f	class:hpp::core::Path
outputDerivativeSize_	include/hpp/core/path.hh	/^      size_type outputDerivativeSize_;$/;"	m	class:hpp::core::Path
outputFunction	include/hpp/core/explicit-numerical-constraint.hh	/^      inline DifferentiableFunctionPtr_t outputFunction() const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
outputFunctionInverse	include/hpp/core/explicit-numerical-constraint.hh	/^      inline DifferentiableFunctionPtr_t outputFunctionInverse() const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
outputSize	include/hpp/core/path.hh	/^      size_type outputSize () const$/;"	f	class:hpp::core::Path
outputSize_	include/hpp/core/path.hh	/^      size_type outputSize_;$/;"	m	class:hpp::core::Path
outputVelocity	include/hpp/core/explicit-numerical-constraint.hh	/^      const segments_t& outputVelocity () const$/;"	f	class:hpp::core::ExplicitNumericalConstraint
outputVelocity	include/hpp/core/locked-joint.hh	/^      segments_t outputVelocity () const$/;"	f	class:hpp::core::LockedJoint
outputVelocity_	include/hpp/core/explicit-numerical-constraint.hh	/^      segments_t outputVelocity_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
p0_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable vector_t p_, p0_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
p_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable vector_t p_, p0_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
pairs	src/continuous-collision-checking/body-pair-collision.hh	/^	const CollisionPairs_t& pairs () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
pairs_	src/continuous-collision-checking/body-pair-collision.hh	/^        CollisionPairs_t pairs_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
paramAtTime	include/hpp/core/path.hh	/^      value_type paramAtTime (const value_type& time) const$/;"	f	class:hpp::core::Path
paramDerivativeCoeff	src/path-optimization/spline-gradient-based-constraint.cc	/^          mutable typename Spline::BasisFunctionVector_t paramDerivativeCoeff;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
paramDerivativeCoeff	src/path-optimization/spline-gradient-based.cc	/^        mutable typename Spline::BasisFunctionVector_t paramDerivativeCoeff;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
paramDerivativeCoeff	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        mutable typename Spline::BasisFunctionVector_t paramDerivativeCoeff;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
paramDerivativeSize_	src/path-optimization/spline-gradient-based/cost.hh	/^        const size_type paramSize_, paramDerivativeSize_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
paramLength	include/hpp/core/path.hh	/^      value_type paramLength() const$/;"	f	class:hpp::core::Path
paramRange	include/hpp/core/path.hh	/^      const interval_t& paramRange () const$/;"	f	class:hpp::core::Path
paramRange_	include/hpp/core/path.hh	/^      interval_t paramRange_;$/;"	m	class:hpp::core::Path
paramSize_	src/path-optimization/spline-gradient-based/cost.hh	/^        const size_type paramSize_, paramDerivativeSize_;$/;"	m	struct:hpp::core::pathOptimization::SquaredLength
parameter	include/hpp/core/path-validation-report.hh	/^      value_type parameter;$/;"	m	struct:hpp::core::PathValidationReport
parameterDerivativeCoefficients	include/hpp/core/path/spline.hh	/^          void parameterDerivativeCoefficients (vectorOut_t res, const value_type& t) const$/;"	f	class:hpp::core::path::Spline
parameterIntegrate	include/hpp/core/path/spline.hh	/^          void parameterIntegrate (vectorIn_t dParam)$/;"	f	class:hpp::core::path::Spline
parameterSize	include/hpp/core/path/spline.hh	/^          size_type parameterSize () const$/;"	f	class:hpp::core::path::Spline
parameterSize_	include/hpp/core/path/spline.hh	/^          size_type parameterSize_;$/;"	m	class:hpp::core::path::Spline
parameterizedPairs_	include/hpp/core/collision-validation.hh	/^                       parameterizedPairs_,$/;"	m	class:hpp::core::CollisionValidation
parameters	include/hpp/core/path-optimization/config-optimization.hh	/^          } parameters;$/;"	m	class:hpp::core::pathOptimization::ConfigOptimization	typeref:struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
parameters	include/hpp/core/path-optimization/partial-shortcut.hh	/^          } parameters;$/;"	m	class:hpp::core::pathOptimization::PartialShortcut	typeref:struct:hpp::core::pathOptimization::PartialShortcut::Parameters
parameters	include/hpp/core/path/spline.hh	/^          const ParameterMatrix_t& parameters () const$/;"	f	class:hpp::core::path::Spline
parameters	include/hpp/core/path/spline.hh	/^          void parameters (const ParameterMatrix_t& m)$/;"	f	class:hpp::core::path::Spline
parameters	include/hpp/core/problem.hh	/^      Container < boost::any > parameters;$/;"	m	class:hpp::core::Problem
parameters	include/hpp/core/time-parameterization/polynomial.hh	/^          const vector_t& parameters () const$/;"	f	class:hpp::core::timeParameterization::Polynomial
parameters_	include/hpp/core/path/spline.hh	/^          ParameterMatrix_t parameters_;$/;"	m	class:hpp::core::path::Spline
parentJoint_	include/hpp/core/explicit-relative-transformation.hh	/^      JointConstPtr_t parentJoint_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
parent_	src/astar.hh	/^      Parent_t parent_;$/;"	m	class:hpp::core::Astar
parent_t	include/hpp/core/dubins-path.hh	/^      typedef core::Path parent_t;$/;"	t	class:hpp::core::DubinsPath
parent_t	include/hpp/core/interpolated-path.hh	/^      typedef Path parent_t;$/;"	t	class:hpp::core::InterpolatedPath
parent_t	include/hpp/core/path-vector.hh	/^      typedef Path parent_t;$/;"	t	class:hpp::core::PathVector
parent_t	include/hpp/core/path/hermite.hh	/^        typedef Spline<BernsteinBasis,3> parent_t;$/;"	t	class:hpp::core::path::Hermite
parent_t	include/hpp/core/reeds-shepp-path.hh	/^      typedef core::PathVector parent_t;$/;"	t	class:hpp::core::ReedsSheppPath
parent_t	include/hpp/core/steering-method/constant-curvature.hh	/^        typedef Path parent_t;$/;"	t	class:hpp::core::steeringMethod::ConstantCurvature
parent_t	include/hpp/core/straight-path.hh	/^      typedef Path parent_t;$/;"	t	class:hpp::core::StraightPath
parent_t	include/hpp/core/subchain-path.hh	/^      typedef Path parent_t;$/;"	t	class:hpp::core::SubchainPath
parent_t	src/extracted-path.hh	/^      typedef Path parent_t;$/;"	t	class:hpp::core::ExtractedPath
parser	include/hpp/core/parser/roadmap-factory.hh	/^    namespace parser {$/;"	n	namespace:hpp::core
parser	src/parser/roadmap-factory.cc	/^    namespace parser {$/;"	n	namespace:hpp::core	file:
pass	src/path-optimization/config-optimization.cc	/^      bool ConfigOptimization::pass ($/;"	f	class:hpp::core::pathOptimization::ConfigOptimization
passiveDofs	include/hpp/core/problem-solver.hh	/^      Container <segments_t>                    passiveDofs;$/;"	m	class:hpp::core::ProblemSolver
passiveDofsMap_	include/hpp/core/problem-solver.hh	/^      segmentsMap_t passiveDofsMap_;$/;"	m	class:hpp::core::ProblemSolver
path	include/hpp/core/edge.hh	/^      PathPtr_t path () const$/;"	f	class:hpp::core::Edge
path	include/hpp/core/fwd.hh	/^    namespace path {$/;"	n	namespace:hpp::core
path	include/hpp/core/path/hermite.hh	/^    namespace path {$/;"	n	namespace:hpp::core
path	include/hpp/core/path/spline.hh	/^    namespace path {$/;"	n	namespace:hpp::core
path	src/continuous-collision-checking/body-pair-collision.hh	/^	PathConstPtr_t path () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
path	src/continuous-collision-checking/body-pair-collision.hh	/^	void path (const PathPtr_t& path, bool reverse)$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
path	src/path/hermite.cc	/^    namespace path {$/;"	n	namespace:hpp::core	file:
path	src/path/spline.cc	/^    namespace path {$/;"	n	namespace:hpp::core	file:
pathAtRank	src/path-vector.cc	/^    PathPtr_t PathVector::pathAtRank (std::size_t rank) const$/;"	f	class:hpp::core::PathVector
pathExists	src/roadmap.cc	/^    bool Roadmap::pathExists () const$/;"	f	class:hpp::core::Roadmap
pathLength	src/path-optimization/config-optimization.cc	/^        static value_type pathLength (const PathVectorPtr_t& path,$/;"	f	namespace:hpp::core::pathOptimization::__anon10
pathLength	src/path-optimization/partial-shortcut.cc	/^        static value_type pathLength (const PathVectorPtr_t& path,$/;"	f	namespace:hpp::core::pathOptimization::__anon13
pathOptimization	include/hpp/core/fwd.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/config-optimization.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/cost.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/gradient-based.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/linear-constraint.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/partial-shortcut.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/path-length.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/quadratic-program.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/simple-time-parameterization.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/spline-gradient-based-constraint.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	include/hpp/core/path-optimization/spline-gradient-based.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	src/path-optimization/collision-constraints-result.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	src/path-optimization/config-optimization.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/gradient-based.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/linear-constraint.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/partial-shortcut.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/path-length.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/quadratic-program.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/simple-time-parameterization.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/spline-gradient-based-abstract.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/spline-gradient-based-constraint.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/spline-gradient-based.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimization	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	src/path-optimization/spline-gradient-based/cost.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core
pathOptimization	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^    namespace pathOptimization {$/;"	n	namespace:hpp::core	file:
pathOptimizer	include/hpp/core/problem-solver.hh	/^      const PathOptimizerPtr_t& pathOptimizer (std::size_t rank) const$/;"	f	class:hpp::core::ProblemSolver
pathOptimizerTypes	include/hpp/core/problem-solver.hh	/^      PathOptimizerTypes_t pathOptimizerTypes () const {$/;"	f	class:hpp::core::ProblemSolver
pathOptimizerTypes_	include/hpp/core/problem-solver.hh	/^      PathOptimizerTypes_t pathOptimizerTypes_;$/;"	m	class:hpp::core::ProblemSolver
pathOptimizers	include/hpp/core/problem-solver.hh	/^      Container <PathOptimizerBuilder_t>        pathOptimizers;$/;"	m	class:hpp::core::ProblemSolver
pathOptimizers_	include/hpp/core/problem-solver.hh	/^      PathOptimizers_t pathOptimizers_;$/;"	m	class:hpp::core::ProblemSolver
pathPlanner	include/hpp/core/fwd.hh	/^    namespace pathPlanner {$/;"	n	namespace:hpp::core
pathPlanner	include/hpp/core/path-planner/k-prm-star.hh	/^    namespace pathPlanner {$/;"	n	namespace:hpp::core
pathPlanner	include/hpp/core/problem-solver.hh	/^      const PathPlannerPtr_t& pathPlanner () const$/;"	f	class:hpp::core::ProblemSolver
pathPlanner	src/path-planner/k-prm-star.cc	/^    namespace pathPlanner {$/;"	n	namespace:hpp::core	file:
pathPlannerType	include/hpp/core/problem-solver.hh	/^      const std::string& pathPlannerType () const {$/;"	f	class:hpp::core::ProblemSolver
pathPlannerType	src/problem-solver.cc	/^    void ProblemSolver::pathPlannerType (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
pathPlannerType_	include/hpp/core/problem-solver.hh	/^      std::string pathPlannerType_;$/;"	m	class:hpp::core::ProblemSolver
pathPlanner_	include/hpp/core/plan-and-optimize.hh	/^      const PathPlannerPtr_t pathPlanner_;$/;"	m	class:hpp::core::PlanAndOptimize
pathPlanner_	include/hpp/core/problem-solver.hh	/^      PathPlannerPtr_t pathPlanner_;$/;"	m	class:hpp::core::ProblemSolver
pathPlanners	include/hpp/core/problem-solver.hh	/^      Container <PathPlannerBuilder_t>          pathPlanners;$/;"	m	class:hpp::core::ProblemSolver
pathProjector	include/hpp/core/fwd.hh	/^    namespace pathProjector {$/;"	n	namespace:hpp::core
pathProjector	include/hpp/core/path-projector/dichotomy.hh	/^    namespace pathProjector {$/;"	n	namespace:hpp::core
pathProjector	include/hpp/core/path-projector/global.hh	/^    namespace pathProjector {$/;"	n	namespace:hpp::core
pathProjector	include/hpp/core/path-projector/progressive.hh	/^    namespace pathProjector {$/;"	n	namespace:hpp::core
pathProjector	include/hpp/core/path-projector/recursive-hermite.hh	/^    namespace pathProjector {$/;"	n	namespace:hpp::core
pathProjector	include/hpp/core/problem.hh	/^      PathProjectorPtr_t pathProjector () const$/;"	f	class:hpp::core::Problem
pathProjector	include/hpp/core/problem.hh	/^      void pathProjector (const PathProjectorPtr_t& pathProjector)$/;"	f	class:hpp::core::Problem
pathProjector	src/path-projector/dichotomy.cc	/^    namespace pathProjector {$/;"	n	namespace:hpp::core	file:
pathProjector	src/path-projector/global.cc	/^    namespace pathProjector {$/;"	n	namespace:hpp::core	file:
pathProjector	src/path-projector/progressive.cc	/^    namespace pathProjector {$/;"	n	namespace:hpp::core	file:
pathProjector	src/path-projector/recursive-hermite.cc	/^    namespace pathProjector {$/;"	n	namespace:hpp::core	file:
pathProjectorTolerance_	include/hpp/core/problem-solver.hh	/^      value_type pathProjectorTolerance_;$/;"	m	class:hpp::core::ProblemSolver
pathProjectorType	include/hpp/core/problem-solver.hh	/^      const std::string& pathProjectorType (value_type& tolerance) const {$/;"	f	class:hpp::core::ProblemSolver
pathProjectorType	src/problem-solver.cc	/^    void ProblemSolver::pathProjectorType (const std::string& type,$/;"	f	class:hpp::core::ProblemSolver
pathProjectorType_	include/hpp/core/problem-solver.hh	/^      std::string pathProjectorType_;$/;"	m	class:hpp::core::ProblemSolver
pathProjector_	include/hpp/core/problem.hh	/^      PathProjectorPtr_t pathProjector_;$/;"	m	class:hpp::core::Problem
pathProjectors	include/hpp/core/problem-solver.hh	/^      Container <PathProjectorBuilder_t>        pathProjectors;$/;"	m	class:hpp::core::ProblemSolver
pathToVector	include/hpp/core/path-optimization/gradient-based.hh	/^	void pathToVector (const PathVectorPtr_t& path, vectorOut_t x) const {$/;"	f	class:hpp::core::pathOptimization::GradientBased
pathValidation	include/hpp/core/problem.hh	/^      PathValidationPtr_t pathValidation () const$/;"	f	class:hpp::core::Problem
pathValidation	src/problem.cc	/^    void Problem::pathValidation (const PathValidationPtr_t& pathValidation)$/;"	f	class:hpp::core::Problem
pathValidationTolerance_	include/hpp/core/problem-solver.hh	/^      value_type pathValidationTolerance_;$/;"	m	class:hpp::core::ProblemSolver
pathValidationType	include/hpp/core/problem-solver.hh	/^      const std::string& pathValidationType (value_type& tolerance) const {$/;"	f	class:hpp::core::ProblemSolver
pathValidationType	src/problem-solver.cc	/^    void ProblemSolver::pathValidationType (const std::string& type,$/;"	f	class:hpp::core::ProblemSolver
pathValidationType_	include/hpp/core/problem-solver.hh	/^      std::string pathValidationType_;$/;"	m	class:hpp::core::ProblemSolver
pathValidation_	include/hpp/core/problem.hh	/^      PathValidationPtr_t pathValidation_;$/;"	m	class:hpp::core::Problem
pathValidations	include/hpp/core/problem-solver.hh	/^      Container <PathValidationBuilder_t>       pathValidations;$/;"	m	class:hpp::core::ProblemSolver
pathVelocity_	src/continuous-collision-checking/body-pair-collision.hh	/^	PathVelocity pathVelocity_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
path_	include/hpp/core/edge.hh	/^      PathPtr_t path_;$/;"	m	class:hpp::core::Edge
path_	src/continuous-collision-checking/body-pair-collision.hh	/^	PathPtr_t path_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
path_	src/continuous-collision-checking/path-velocity.hh	/^        PathPtr_t path_;$/;"	m	struct:hpp::core::continuousCollisionChecking::PathVelocity
paths	include/hpp/core/problem-solver.hh	/^      const PathVectors_t& paths () const$/;"	f	class:hpp::core::ProblemSolver
paths_	include/hpp/core/path-vector.hh	/^      Paths_t paths_;$/;"	m	class:hpp::core::PathVector
paths_	include/hpp/core/problem-solver.hh	/^      PathVectors_t paths_;$/;"	m	class:hpp::core::ProblemSolver
permutation_	include/hpp/core/parser/roadmap-factory.hh	/^          SizeVector_t permutation_;$/;"	m	class:hpp::core::parser::RoadmapFactory
permuteAndCreateConfiguration	src/parser/roadmap-factory.cc	/^      ConfigurationPtr_t RoadmapFactory::permuteAndCreateConfiguration ($/;"	f	class:hpp::core::parser::RoadmapFactory
pi	src/reeds-shepp-path.cc	/^      const value_type pi = boost::math::constants::pi<value_type>();$/;"	m	namespace:hpp::core::__anon24	file:
polar	src/reeds-shepp-path.cc	/^    inline void polar(const value_type& x, const value_type& y, value_type &r, value_type &theta)$/;"	f	namespace:hpp::core
posAlongLocalPath_	src/path-optimization/collision-constraints-result.hh	/^	value_type posAlongLocalPath_; \/\/ posAlongLocalPath_ \\in [0,1]$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
powersOfT_	include/hpp/core/path/spline.hh	/^          mutable PowersOfT_t powersOfT_;$/;"	m	class:hpp::core::path::Spline
prepareSolveStepByStep	src/problem-solver.cc	/^    bool ProblemSolver::prepareSolveStepByStep ()$/;"	f	class:hpp::core::ProblemSolver
print	include/hpp/core/collision-validation-report.hh	/^      virtual std::ostream& print (std::ostream& os) const$/;"	f	struct:hpp::core::CollisionValidationReport
print	include/hpp/core/container.hh	/^      std::ostream& print (std::ostream& os) const$/;"	f	struct:hpp::core::Container
print	include/hpp/core/dubins-path.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::DubinsPath
print	include/hpp/core/interpolated-path.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::InterpolatedPath
print	include/hpp/core/joint-bound-validation.hh	/^      virtual std::ostream& print (std::ostream& os) const$/;"	f	class:hpp::core::JointBoundValidationReport
print	include/hpp/core/path-validation-report.hh	/^      virtual std::ostream& print (std::ostream& os) const$/;"	f	struct:hpp::core::PathValidationReport
print	include/hpp/core/path-vector.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::PathVector
print	include/hpp/core/path/hermite.hh	/^        virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::path::Hermite
print	include/hpp/core/straight-path.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::StraightPath
print	include/hpp/core/subchain-path.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::SubchainPath
print	src/config-projector.cc	/^    std::ostream& ConfigProjector::print (std::ostream& os) const$/;"	f	class:hpp::core::ConfigProjector
print	src/constraint-set.cc	/^    std::ostream& ConstraintSet::print (std::ostream& os) const$/;"	f	class:hpp::core::ConstraintSet
print	src/continuous-collision-checking/body-pair-collision.hh	/^	std::ostream& print (std::ostream& os) const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
print	src/continuous-collision-checking/intervals.hh	/^	std::ostream& print (std::ostream& os) const$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
print	src/extracted-path.hh	/^      virtual std::ostream& print (std::ostream &os) const$/;"	f	class:hpp::core::ExtractedPath
print	src/locked-joint.cc	/^    std::ostream& LockedJoint::print (std::ostream& os) const$/;"	f	class:hpp::core::LockedJoint
print	src/node.cc	/^    std::ostream& Node::print (std::ostream& os) const$/;"	f	class:hpp::core::Node
print	src/path.cc	/^    std::ostream& Path::print (std::ostream& os) const$/;"	f	class:hpp::core::Path
print	src/path/spline.cc	/^      std::ostream& Spline<_SplineType, _Order>::print (std::ostream& os) const$/;"	f	class:hpp::core::path::Spline
print	src/reeds-shepp-path.cc	/^    std::ostream& ReedsSheppPath::print (std::ostream &os) const$/;"	f	class:hpp::core::ReedsSheppPath
print	src/roadmap.cc	/^    std::ostream& Roadmap::print (std::ostream& os) const$/;"	f	class:hpp::core::Roadmap
print	src/steering-method/constant-curvature.cc	/^      std::ostream& ConstantCurvature::print (std::ostream &os) const$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
problem	include/hpp/core/path-optimizer.hh	/^      const Problem& problem () const$/;"	f	class:hpp::core::PathOptimizer
problem	include/hpp/core/problem-solver.hh	/^      ProblemPtr_t problem ()$/;"	f	class:hpp::core::ProblemSolver
problem	include/hpp/core/problem-target.hh	/^      void problem (const ProblemPtr_t& problem)$/;"	f	class:hpp::core::ProblemTarget
problem	include/hpp/core/steering-method.hh	/^      const Problem& problem() const$/;"	f	class:hpp::core::SteeringMethod
problem	src/path-planner.cc	/^    const Problem& PathPlanner::problem () const$/;"	f	class:hpp::core::PathPlanner
problem	src/problem-solver.cc	/^    void ProblemSolver::problem (ProblemPtr_t problem)$/;"	f	class:hpp::core::ProblemSolver
problemTarget	include/hpp/core/fwd.hh	/^    namespace problemTarget {$/;"	n	namespace:hpp::core
problemTarget	include/hpp/core/problem-target/goal-configurations.hh	/^    namespace problemTarget {$/;"	n	namespace:hpp::core
problemTarget	include/hpp/core/problem-target/task-target.hh	/^    namespace problemTarget {$/;"	n	namespace:hpp::core
problemTarget	src/problem-target/goal-configurations.cc	/^    namespace problemTarget {$/;"	n	namespace:hpp::core	file:
problemTarget	src/problem-target/task-target.cc	/^    namespace problemTarget {$/;"	n	namespace:hpp::core	file:
problem_	include/hpp/core/parser/roadmap-factory.hh	/^          ProblemPtr_t problem_;$/;"	m	class:hpp::core::parser::RoadmapFactory
problem_	include/hpp/core/path-optimizer.hh	/^      const Problem& problem_;$/;"	m	class:hpp::core::PathOptimizer
problem_	include/hpp/core/path-planner.hh	/^      const Problem& problem_;$/;"	m	class:hpp::core::PathPlanner
problem_	include/hpp/core/problem-solver.hh	/^      ProblemPtr_t problem_;$/;"	m	class:hpp::core::ProblemSolver
problem_	include/hpp/core/problem-target.hh	/^      ProblemPtr_t problem_;$/;"	m	class:hpp::core::ProblemTarget
problem_	include/hpp/core/steering-method.hh	/^      const Problem& problem_;$/;"	m	class:hpp::core::SteeringMethod
progressionMargin	include/hpp/core/path-optimization/partial-shortcut.hh	/^            value_type progressionMargin;$/;"	m	struct:hpp::core::pathOptimization::PartialShortcut::Parameters
progressionMargin	include/hpp/core/path-optimization/partial-shortcut.hh	/^        static value_type  progressionMargin ()$/;"	f	struct:hpp::core::pathOptimization::PartialShortcutTraits
proj	include/hpp/core/path-optimization/config-optimization.hh	/^            ConfigProjectorPtr_t proj;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Optimizer
projMinusFrom_	include/hpp/core/config-projector.hh	/^      mutable vector_t projMinusFrom_;$/;"	m	class:hpp::core::ConfigProjector
project	src/path-projector/global.cc	/^      bool Global::project (const PathPtr_t& path, PathPtr_t& proj) const$/;"	f	class:hpp::core::pathProjector::Global
project	src/path-projector/progressive.cc	/^      bool Progressive::project (const PathPtr_t& path, PathPtr_t& proj) const$/;"	f	class:hpp::core::pathProjector::Progressive
project	src/path-projector/recursive-hermite.cc	/^      bool RecursiveHermite::project (const PathPtr_t& path, PathPtr_t& proj) const$/;"	f	class:hpp::core::pathProjector::RecursiveHermite
project2	src/path-projector/global.cc	/^      bool Global::project2 (const PathPtr_t& path, PathPtr_t& proj) const$/;"	f	class:hpp::core::pathProjector::Global
projectOnConstraints	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::projectOnConstraints$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
projectOnKernel	src/config-projector.cc	/^    void ConfigProjector::projectOnKernel (ConfigurationIn_t from,$/;"	f	class:hpp::core::ConfigProjector
projectOneStep	src/path-projector/global.cc	/^      bool Global::projectOneStep (ConfigProjector& p,$/;"	f	class:hpp::core::pathProjector::Global
projectVectorOnKernel	src/config-projector.cc	/^    void ConfigProjector::projectVectorOnKernel (ConfigurationIn_t from,$/;"	f	class:hpp::core::ConfigProjector
projectVelocities	src/path/hermite.cc	/^      void Hermite::projectVelocities (ConfigurationIn_t qi, ConfigurationIn_t qe)$/;"	f	class:hpp::core::path::Hermite
projected	include/hpp/core/path-projector/global.hh	/^            bool projected;$/;"	m	struct:hpp::core::pathProjector::Global::Data
projection_error	include/hpp/core/projection-error.hh	/^      projection_error () : msg_ () {}$/;"	f	struct:hpp::core::projection_error
projection_error	include/hpp/core/projection-error.hh	/^      projection_error (const projection_error& other) throw ()$/;"	f	struct:hpp::core::projection_error
projection_error	include/hpp/core/projection-error.hh	/^      projection_error (const std::string& msg) : msg_ (msg) {}$/;"	f	struct:hpp::core::projection_error
projection_error	include/hpp/core/projection-error.hh	/^    struct HPP_CORE_DLLAPI projection_error : public std::exception$/;"	s	namespace:hpp::core
push_node	include/hpp/core/roadmap.hh	/^      virtual void push_node (const NodePtr_t& n)$/;"	f	class:hpp::core::Roadmap
q	include/hpp/core/path-projector/global.hh	/^            Configuration_t q;$/;"	m	struct:hpp::core::pathProjector::Global::Data
q	src/path-optimization/spline-gradient-based-constraint.cc	/^          mutable Configuration_t q;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
q	src/path-optimization/spline-gradient-based.cc	/^        mutable Configuration_t q;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
q	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        mutable Configuration_t q;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
qColl_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	Configuration_t qFree_, qColl_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
qFree_	src/path-optimization/collision-constraints-result.hh	/^	Configuration_t qFree_;$/;"	m	class:hpp::core::pathOptimization::CollisionConstraint
qFree_	src/path-optimization/collision-constraints-result.hh	/^	Configuration_t qFree_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
qFree_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	Configuration_t qFree_, qColl_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
qIn_	src/implicit-function.hh	/^      mutable vector_t qIn_;$/;"	m	class:hpp::core::ImplicitFunction
qOut_	src/implicit-function.hh	/^      mutable LiegroupElement f_qIn_, qOut_;$/;"	m	class:hpp::core::ImplicitFunction
qOut_	src/implicit-function.hh	/^      vectorIn_t qOut_, f_qIn_;$/;"	m	struct:hpp::core::JacobianVisitor
qOut_	src/implicit-function.hh	/^      vectorIn_t qOut_, f_qIn_;$/;"	m	struct:hpp::core::ValueVisitor
qProj_	include/hpp/core/bi-rrt-planner.hh	/^      mutable Configuration_t qProj_;$/;"	m	class:hpp::core::BiRRTPlanner
qProj_	include/hpp/core/diffusing-planner.hh	/^      mutable Configuration_t qProj_;$/;"	m	class:hpp::core::DiffusingPlanner
q_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable vector_t qsmall_, q_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
q_	include/hpp/core/path-projector/global.hh	/^          mutable Configuration_t q_;$/;"	m	class:hpp::core::pathProjector::Global
q_	include/hpp/core/subchain-path.hh	/^      mutable Configuration_t q_;$/;"	m	class:hpp::core::SubchainPath
qi_	include/hpp/core/dubins-path.hh	/^      vector3_t qi_;       \/\/ the initial configuration$/;"	m	class:hpp::core::DubinsPath
qsmall_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable vector_t qsmall_, q_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
radius_	src/path-optimization/collision-constraints-result.hh	/^	value_type radius_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
rank	include/hpp/core/path-optimization/linear-constraint.hh	/^        size_type rank;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
rankAtParam	src/path-vector.cc	/^    std::size_t PathVector::rankAtParam (const value_type& param,$/;"	f	class:hpp::core::PathVector
rankInConfiguration	src/locked-joint.cc	/^    size_type LockedJoint::rankInConfiguration () const$/;"	f	class:hpp::core::LockedJoint
rankInVelocity	src/locked-joint.cc	/^    size_type LockedJoint::rankInVelocity () const$/;"	f	class:hpp::core::LockedJoint
rank_	include/hpp/core/joint-bound-validation.hh	/^      size_type rank_;$/;"	m	class:hpp::core::JointBoundValidationReport
ratios	src/path-optimization/spline-gradient-based-constraint.cc	/^          std::vector<value_type> ratios;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
ratios	src/path-optimization/spline-gradient-based.cc	/^        std::vector<value_type> ratios;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
ratios	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        std::vector<value_type> ratios;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
reachableFrom	include/hpp/core/connected-component.hh	/^      const RawPtrs_t& reachableFrom () const$/;"	f	class:hpp::core::ConnectedComponent
reachableFrom_	include/hpp/core/connected-component.hh	/^      RawPtrs_t reachableFrom_;$/;"	m	class:hpp::core::ConnectedComponent
reachableTo	include/hpp/core/connected-component.hh	/^      const RawPtrs_t& reachableTo () const$/;"	f	class:hpp::core::ConnectedComponent
reachableTo_	include/hpp/core/connected-component.hh	/^      RawPtrs_t reachableTo_;$/;"	m	class:hpp::core::ConnectedComponent
reached	src/problem-target/goal-configurations.cc	/^      bool GoalConfigurations::reached (const RoadmapPtr_t& roadmap) const$/;"	f	class:hpp::core::problemTarget::GoalConfigurations
reached	src/problem-target/task-target.cc	/^      bool TaskTarget::reached (const RoadmapPtr_t& \/*roadmap*\/) const$/;"	f	class:hpp::core::problemTarget::TaskTarget
readRoadmap	src/parser/roadmap-factory.cc	/^      RoadmapPtr_t readRoadmap (const std::string& fn, const ProblemPtr_t& problem)$/;"	f	namespace:hpp::core::parser
readRoadmap	src/parser/roadmap-factory.cc	/^      RoadmapPtr_t readRoadmap (const std::string& fn,$/;"	f	namespace:hpp::core::parser
recurse	src/path-projector/recursive-hermite.cc	/^      bool RecursiveHermite::recurse (const HermitePtr_t& path, PathVectorPtr_t& proj,$/;"	f	class:hpp::core::pathProjector::RecursiveHermite
recurseSetRelMotion	src/relative-motion.cc	/^    void RelativeMotion::recurseSetRelMotion(matrix_type& matrix,$/;"	f	class:hpp::core::RelativeMotion
reduceConstraint	include/hpp/core/path-optimization/linear-constraint.hh	/^        bool reduceConstraint (const LinearConstraint& lc, LinearConstraint& lcr, bool computeRank = true) const$/;"	f	struct:hpp::core::pathOptimization::LinearConstraint
reduced	include/hpp/core/path-optimization/quadratic-program.hh	/^        void reduced (const LinearConstraint& lc, QuadraticProgram& QPr) const$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
reduced	src/path-optimization/spline-gradient-based-constraint.cc	/^          void reduced (const LinearConstraint& lc, QuadraticProblem& QPr) const$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
reduced	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void reduced (const LinearConstraint& lc, QuadraticProblem& QPr) const$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
refine_	src/continuous-collision-checking/path-velocity.hh	/^        bool refine_;$/;"	m	struct:hpp::core::continuousCollisionChecking::PathVelocity
reinterpolate	src/path-projector/global.cc	/^      size_type Global::reinterpolate (const DevicePtr_t& robot,$/;"	f	class:hpp::core::pathProjector::Global
remove	src/problem-solver.cc	/^      template<typename Container> void remove(Container& vector, std::size_t pos)$/;"	f	namespace:hpp::core::__anon22
remove	src/problem-solver.cc	/^      void remove(ObjectStdVector_t& vector, const GeomIndex& i)$/;"	f	namespace:hpp::core::__anon22
removeFirstElement	src/constraint-set.cc	/^    void ConstraintSet::removeFirstElement ()$/;"	f	class:hpp::core::ConstraintSet
removeLastConstraint	src/path-optimization/spline-gradient-based-constraint.cc	/^          void removeLastConstraint (const std::size_t& n, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions
removeLastConstraint	src/path-optimization/spline-gradient-based.cc	/^        void removeLastConstraint (const std::size_t& n, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
removeLastConstraint	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void removeLastConstraint (const std::size_t& n, LinearConstraint& lc)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions
removeLockedJoints	include/hpp/core/path-optimization/partial-shortcut.hh	/^            bool removeLockedJoints;$/;"	m	struct:hpp::core::pathOptimization::PartialShortcut::Parameters
removeLockedJoints	include/hpp/core/path-optimization/partial-shortcut.hh	/^        static bool        removeLockedJoints ()$/;"	f	struct:hpp::core::pathOptimization::PartialShortcutTraits
removeObjectTo_b	src/continuous-collision-checking/body-pair-collision.hh	/^	bool removeObjectTo_b (const CollisionObjectConstPtr_t& object)$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
removeObstacle	src/problem-solver.cc	/^    void ProblemSolver::removeObstacle (const std::string& name)$/;"	f	class:hpp::core::ProblemSolver
removeObstacleFromJoint	include/hpp/core/config-validation.hh	/^      virtual void removeObstacleFromJoint(const JointPtr_t&,$/;"	f	class:hpp::core::ConfigValidation
removeObstacleFromJoint	include/hpp/core/path-validation.hh	/^      virtual void removeObstacleFromJoint (const JointPtr_t&,$/;"	f	class:hpp::core::PathValidation
removeObstacleFromJoint	src/collision-validation.cc	/^    void CollisionValidation::removeObstacleFromJoint$/;"	f	class:hpp::core::CollisionValidation
removeObstacleFromJoint	src/config-validations.cc	/^    void ConfigValidations::removeObstacleFromJoint$/;"	f	class:hpp::core::ConfigValidations
removeObstacleFromJoint	src/continuous-collision-checking.cc	/^    void ContinuousCollisionChecking::removeObstacleFromJoint$/;"	f	class:hpp::core::ContinuousCollisionChecking
removeObstacleFromJoint	src/discretized-path-validation.cc	/^    void DiscretizedPathValidation::removeObstacleFromJoint$/;"	f	class:hpp::core::DiscretizedPathValidation
removeObstacleFromJoint	src/path-validations.cc	/^    void PathValidations::removeObstacleFromJoint$/;"	f	class:hpp::core::PathValidations
removeObstacleFromJoint	src/problem-solver.cc	/^    void ProblemSolver::removeObstacleFromJoint$/;"	f	class:hpp::core::ProblemSolver
removeObstacleFromJoint	src/problem.cc	/^    void Problem::removeObstacleFromJoint (const JointPtr_t& joint,$/;"	f	class:hpp::core::Problem
remove_pointer	include/hpp/core/container.hh	/^      template <typename T> struct remove_pointer : boost::remove_pointer<T> {};$/;"	s	namespace:hpp::core::internal
remove_pointer	include/hpp/core/container.hh	/^      template <typename T> struct remove_pointer<boost::shared_ptr<T> > { typedef T type; };$/;"	s	namespace:hpp::core::internal
remove_pointer	include/hpp/core/container.hh	/^      template <typename T> struct remove_pointer<const boost::shared_ptr<T> > { typedef T type; };$/;"	s	namespace:hpp::core::internal
resetConfigValidations	src/problem.cc	/^    void Problem::resetConfigValidations ()$/;"	f	class:hpp::core::Problem
resetConstraints	src/problem-solver.cc	/^    void ProblemSolver::resetConstraints ()$/;"	f	class:hpp::core::ProblemSolver
resetGoalConfigs	src/problem-solver.cc	/^    void ProblemSolver::resetGoalConfigs ()$/;"	f	class:hpp::core::ProblemSolver
resetGoalConfigs	src/problem.cc	/^    void Problem::resetGoalConfigs ()$/;"	f	class:hpp::core::Problem
resetGoalNodes	include/hpp/core/roadmap.hh	/^      void resetGoalNodes ()$/;"	f	class:hpp::core::Roadmap
resetProblem	src/problem-solver.cc	/^    void ProblemSolver::resetProblem ()$/;"	f	class:hpp::core::ProblemSolver
resetRoadmap	src/problem-solver.cc	/^    void ProblemSolver::resetRoadmap ()$/;"	f	class:hpp::core::ProblemSolver
reshape	src/path-optimization/spline-gradient-based-abstract.cc	/^      ConstVectorMap_t reshape (const Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based-abstract.cc	/^      VectorMap_t reshape (Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based-constraint.cc	/^        ConstVectorMap_t reshape (const Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based-constraint.cc	/^        VectorMap_t reshape (Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based.cc	/^      ConstVectorMap_t reshape (const Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based.cc	/^      VectorMap_t reshape (Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      ConstVectorMap_t reshape (const Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
reshape	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      VectorMap_t reshape (Eigen::Matrix<value_type, NbRows, Eigen::Dynamic, Eigen::RowMajor>& parameters)$/;"	f	namespace:hpp::core::pathOptimization
residualError	src/config-projector.cc	/^    value_type ConfigProjector::residualError() const$/;"	f	class:hpp::core::ConfigProjector
result	include/hpp/core/collision-validation-report.hh	/^      fcl::CollisionResult result;$/;"	m	struct:hpp::core::CollisionValidationReport
result_	src/implicit-function.hh	/^      matrixOut_t result_;$/;"	m	struct:hpp::core::JacobianVisitor
result_	src/implicit-function.hh	/^      mutable LiegroupElement result_;$/;"	m	class:hpp::core::ImplicitFunction
result_	src/implicit-function.hh	/^      vector_t result_;$/;"	m	struct:hpp::core::ValueVisitor
reverse	src/interpolated-path.cc	/^    PathPtr_t InterpolatedPath::reverse () const$/;"	f	class:hpp::core::InterpolatedPath
reverse	src/path.cc	/^    PathPtr_t Path::reverse () const$/;"	f	class:hpp::core::Path
reverse_	src/continuous-collision-checking/body-pair-collision.hh	/^	bool reverse_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
reversed_	src/extracted-path.hh	/^      bool reversed_;$/;"	m	class:hpp::core::ExtractedPath
rgrad_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable rowvector_t rgrad_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
rho_	include/hpp/core/dubins-path.hh	/^      value_type rho_;$/;"	m	class:hpp::core::DubinsPath
rho_	include/hpp/core/reeds-shepp-path.hh	/^      value_type rho_;$/;"	m	class:hpp::core::ReedsSheppPath
rho_	include/hpp/core/steering-method/car-like.hh	/^          value_type rho_;$/;"	m	class:hpp::core::steeringMethod::CarLike
rhsRealSize_	include/hpp/core/equation.hh	/^        size_type rhsRealSize_;$/;"	m	class:hpp::core::Equation
rhsSize	src/equation.cc	/^    size_type Equation::rhsSize () const$/;"	f	class:hpp::core::Equation
rhs_	include/hpp/core/equation.hh	/^        vector_t rhs_;$/;"	m	class:hpp::core::Equation
rhs_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable vector_t rhs_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
rightHandSide	src/config-projector.cc	/^    vector_t ConfigProjector::rightHandSide () const$/;"	f	class:hpp::core::ConfigProjector
rightHandSide	src/config-projector.cc	/^    void ConfigProjector::rightHandSide ($/;"	f	class:hpp::core::ConfigProjector
rightHandSide	src/config-projector.cc	/^    void ConfigProjector::rightHandSide (const vector_t& small)$/;"	f	class:hpp::core::ConfigProjector
rightHandSide	src/equation.cc	/^    vectorIn_t Equation::rightHandSide () const$/;"	f	class:hpp::core::Equation
rightHandSide	src/equation.cc	/^    void Equation::rightHandSide (vectorIn_t rhs)$/;"	f	class:hpp::core::Equation
rightHandSideFromConfig	src/config-projector.cc	/^    vector_t ConfigProjector::rightHandSideFromConfig (ConfigurationIn_t config)$/;"	f	class:hpp::core::ConfigProjector
rightHandSideFromConfig	src/config-projector.cc	/^    void ConfigProjector::rightHandSideFromConfig ($/;"	f	class:hpp::core::ConfigProjector
rightHandSideFromConfig	src/locked-joint.cc	/^    void LockedJoint::rightHandSideFromConfig (ConfigurationIn_t config)$/;"	f	class:hpp::core::LockedJoint
rightHandSideFromConfig	src/numerical-constraint.cc	/^    void NumericalConstraint::rightHandSideFromConfig (ConfigurationIn_t config)$/;"	f	class:hpp::core::NumericalConstraint
roadmap	include/hpp/core/parser/roadmap-factory.hh	/^          RoadmapPtr_t roadmap () const {$/;"	f	class:hpp::core::parser::RoadmapFactory
roadmap	include/hpp/core/problem-solver.hh	/^      const RoadmapPtr_t& roadmap () const$/;"	f	class:hpp::core::ProblemSolver
roadmap	include/hpp/core/problem-solver.hh	/^      void roadmap (const RoadmapPtr_t& roadmap)$/;"	f	class:hpp::core::ProblemSolver
roadmap	src/path-planner.cc	/^    const RoadmapPtr_t& PathPlanner::roadmap () const$/;"	f	class:hpp::core::PathPlanner
roadmap_	include/hpp/core/parser/roadmap-factory.hh	/^          RoadmapPtr_t roadmap_;$/;"	m	class:hpp::core::parser::RoadmapFactory
roadmap_	include/hpp/core/path-planner.hh	/^      const RoadmapPtr_t roadmap_;$/;"	m	class:hpp::core::PathPlanner
roadmap_	include/hpp/core/problem-solver.hh	/^      RoadmapPtr_t roadmap_;$/;"	m	class:hpp::core::ProblemSolver
roadmap_	src/astar.hh	/^      RoadmapPtr_t roadmap_;$/;"	m	class:hpp::core::Astar
robot	include/hpp/core/config-projector.hh	/^      const DevicePtr_t& robot () const$/;"	f	class:hpp::core::ConfigProjector
robot	include/hpp/core/problem.hh	/^      const DevicePtr_t& robot () const {$/;"	f	class:hpp::core::Problem
robot	include/hpp/core/weighed-distance.hh	/^      const DevicePtr_t& robot () const$/;"	f	class:hpp::core::WeighedDistance
robot	src/problem-solver.cc	/^    const DevicePtr_t& ProblemSolver::robot () const$/;"	f	class:hpp::core::ProblemSolver
robot	src/problem-solver.cc	/^    void ProblemSolver::robot (const DevicePtr_t& robot)$/;"	f	class:hpp::core::ProblemSolver
robotNbNonLockedDofs_	include/hpp/core/path-optimization/gradient-based.hh	/^	size_type robotNbNonLockedDofs_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
robotNumberDofs_	include/hpp/core/path-optimization/gradient-based.hh	/^	size_type robotNumberDofs_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
robotNumberDofs_	src/path-optimization/collision-constraints-result.hh	/^	size_type robotNumberDofs_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
robotType	src/problem-solver.cc	/^    const std::string& ProblemSolver::robotType () const$/;"	f	class:hpp::core::ProblemSolver
robotType	src/problem-solver.cc	/^    void ProblemSolver::robotType (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
robotType_	include/hpp/core/problem-solver.hh	/^      std::string robotType_;$/;"	m	class:hpp::core::ProblemSolver
robot_	include/hpp/core/basic-configuration-shooter.hh	/^      const DevicePtr_t& robot_;$/;"	m	class:hpp::core::BasicConfigurationShooter
robot_	include/hpp/core/collision-validation.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::CollisionValidation
robot_	include/hpp/core/config-projector.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::ConfigProjector
robot_	include/hpp/core/continuous-collision-checking.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::ContinuousCollisionChecking
robot_	include/hpp/core/discretized-path-validation.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::DiscretizedPathValidation
robot_	include/hpp/core/distance-between-objects.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::DistanceBetweenObjects
robot_	include/hpp/core/explicit-relative-transformation.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
robot_	include/hpp/core/joint-bound-validation.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::JointBoundValidation
robot_	include/hpp/core/path-optimization/gradient-based.hh	/^	DevicePtr_t robot_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
robot_	include/hpp/core/path-optimization/path-length.hh	/^	DevicePtr_t robot_;$/;"	m	class:hpp::core::pathOptimization::PathLength
robot_	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          DevicePtr_t robot_;$/;"	m	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
robot_	include/hpp/core/path/spline.hh	/^          DevicePtr_t robot_;$/;"	m	class:hpp::core::path::Spline
robot_	include/hpp/core/problem-solver.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::ProblemSolver
robot_	include/hpp/core/problem.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::Problem
robot_	include/hpp/core/steering-method/constant-curvature.hh	/^        const DevicePtr_t robot_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
robot_	include/hpp/core/weighed-distance.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::WeighedDistance
robot_	src/implicit-function.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::ImplicitFunction
robot_	src/nearest-neighbor/k-d-tree.hh	/^      DevicePtr_t robot_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
robot_	src/path-optimization/collision-constraints-result.hh	/^	DevicePtr_t robot_;$/;"	m	class:hpp::core::pathOptimization::CollisionConstraint
robot_	src/path-optimization/collision-constraints-result.hh	/^	DevicePtr_t robot_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
robot_	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	DevicePtr_t robot_;$/;"	m	class:hpp::core::pathOptimization::CollisionFunction
robots	include/hpp/core/problem-solver.hh	/^      Container <RobotBuilder_t>                robots;$/;"	m	class:hpp::core::ProblemSolver
rotate	src/reeds-shepp-path.cc	/^      template <typename D1, typename D2> inline vector2_t rotate$/;"	f	namespace:hpp::core::__anon24
rowInJacobian	src/path-optimization/collision-constraints-result.hh	/^	size_type rowInJacobian () const { return rowInJacobian_;}$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
rowInJacobian_	src/path-optimization/collision-constraints-result.hh	/^	size_type rowInJacobian_;$/;"	m	struct:hpp::core::pathOptimization::CollisionConstraintsResult
rowParameters	include/hpp/core/path/spline.hh	/^          ConstParameterVector_t rowParameters () const$/;"	f	class:hpp::core::path::Spline
rowParameters	include/hpp/core/path/spline.hh	/^          void rowParameters (vectorIn_t p)$/;"	f	class:hpp::core::path::Spline
rows	src/path-optimization/spline-gradient-based-constraint.cc	/^          std::vector<size_type> rows;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
rows	src/path-optimization/spline-gradient-based.cc	/^        std::vector<size_type> rows;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
rows	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        std::vector<size_type> rows;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
rowvector_t	include/hpp/core/fwd.hh	/^    typedef Eigen::Matrix<value_type, 1, Eigen::Dynamic> rowvector_t;$/;"	t	namespace:hpp::core
run	src/implicit-function.hh	/^      static void run (JacobianVisitor<GisIdentity>& v)$/;"	f	struct:hpp::core::JacobianVisitorImpl
run	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^        static void run (const size_type& idxV,$/;"	f	struct:hpp::core::pathOptimization::JointBoundConstraintAlgo
run	src/path-optimization/spline-gradient-based/joint-bounds.hh	/^        static void run (const size_type&,$/;"	f	struct:hpp::core::pathOptimization::JointBoundConstraintAlgo
run	src/random-shortcut.cc	/^      static inline value_type run (const PathVectorPtr_t& path,$/;"	f	struct:hpp::core::PathLength
rzId_	include/hpp/core/dubins-path.hh	/^      const size_type xyId_,rzId_;$/;"	m	class:hpp::core::DubinsPath
rzId_	include/hpp/core/reeds-shepp-path.hh	/^      const size_type xyId_,rzId_;$/;"	m	class:hpp::core::ReedsSheppPath
rzId_	include/hpp/core/steering-method/car-like.hh	/^          size_type xyId_, rzId_;$/;"	m	class:hpp::core::steeringMethod::CarLike
rzId_	include/hpp/core/steering-method/constant-curvature.hh	/^        const size_type xyId_,rzId_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
rz_	include/hpp/core/steering-method/car-like.hh	/^          JointPtr_t xy_, rz_;$/;"	m	class:hpp::core::steeringMethod::CarLike
sInOriginalPath	src/extracted-path.hh	/^      inline value_type sInOriginalPath (const value_type& s) const$/;"	f	class:hpp::core::ExtractedPath
s_	src/path.cc	/^          value_type s_;$/;"	m	class:hpp::core::timeParameterization::Shift	file:
saturate	src/config-projector.cc	/^      bool saturate (const DevicePtr_t& robot, vectorIn_t q, Eigen::VectorXi& sat)$/;"	f	namespace:hpp::core::__anon16
saturate	src/dubins-path.cc	/^    inline value_type saturate (const value_type& v, const JointPtr_t& j,$/;"	f	namespace:hpp::core
saturate	src/reeds-shepp-path.cc	/^    inline value_type saturate (const value_type& v, const JointPtr_t& j, const size_type& i)$/;"	f	namespace:hpp::core
saturate	src/steering-method/constant-curvature.cc	/^      inline value_type saturate (const value_type& v, const JointPtr_t& j,$/;"	f	namespace:hpp::core::steeringMethod
sbf_traits	include/hpp/core/path/spline.hh	/^          typedef internal::sbf_traits<PolynomeBasis, Order> sbf_traits;$/;"	t	class:hpp::core::path::Spline
sbf_traits	include/hpp/core/path/spline.hh	/^        template <int SplineType, int Degree> struct sbf_traits {$/;"	s	namespace:hpp::core::path::internal
search	src/nearest-neighbor/basic.cc	/^      NodePtr_t Basic::search (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::nearestNeighbor::Basic
search	src/nearest-neighbor/basic.cc	/^      NodePtr_t Basic::search (const NodePtr_t& node,$/;"	f	class:hpp::core::nearestNeighbor::Basic
search	src/nearest-neighbor/k-d-tree.cc	/^    NodePtr_t KDTree::search (const ConfigurationPtr_t& configuration,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
search	src/nearest-neighbor/k-d-tree.cc	/^    NodePtr_t KDTree::search (const NodePtr_t& node,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
search	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::search (value_type boxDistance, value_type& minDistance,$/;"	f	class:hpp::core::nearestNeighbor::KDTree
segment_t	include/hpp/core/fwd.hh	/^    typedef constraints::segment_t segment_t;$/;"	t	namespace:hpp::core
segmentsMap_t	include/hpp/core/fwd.hh	/^    typedef std::map <std::string, segments_t> segmentsMap_t;$/;"	t	namespace:hpp::core
segments_t	include/hpp/core/fwd.hh	/^    typedef constraints::segments_t segments_t;$/;"	t	namespace:hpp::core
self	include/hpp/core/connected-component.hh	/^      ConnectedComponentPtr_t self ()$/;"	f	class:hpp::core::ConnectedComponent
set	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^            ConstraintSetPtr_t set;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedAbstract::SplineOptimizationData
setContinuityConstraint	src/path-optimization/spline-gradient-based-abstract.cc	/^      static inline void setContinuityConstraint (LinearConstraint& lc, const size_type& row,$/;"	f	namespace:hpp::core::pathOptimization
setParameter	include/hpp/core/path-validation-report.hh	/^      void setParameter (value_type p)$/;"	f	struct:hpp::core::PathValidationReport
setParameter	src/problem.cc	/^    void Problem::setParameter (const std::string& name, const boost::any& value)$/;"	f	class:hpp::core::Problem
setWeight	src/weighed-distance.cc	/^    void WeighedDistance::setWeight (std::size_t rank, value_type weight )$/;"	f	class:hpp::core::WeighedDistance
setWheelJoints	include/hpp/core/steering-method/car-like.hh	/^          void setWheelJoints (const std::vector<JointPtr_t> wheels)$/;"	f	class:hpp::core::steeringMethod::CarLike
setWheelJoints	src/dubins-path.cc	/^    void DubinsPath::setWheelJoints (const JointPtr_t rz,$/;"	f	class:hpp::core::DubinsPath
setWheelJoints	src/steering-method/constant-curvature.cc	/^      void ConstantCurvature::setWheelJoints$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
setupPath	src/reeds-shepp-path.cc	/^    void ReedsSheppPath::setupPath (const std::size_t& typeId, double t,$/;"	f	class:hpp::core::ReedsSheppPath
shoot	include/hpp/core/basic-configuration-shooter.hh	/^      virtual ConfigurationPtr_t shoot () const$/;"	f	class:hpp::core::BasicConfigurationShooter
shooter_	include/hpp/core/path-planner/k-prm-star.hh	/^        ConfigurationShooterPtr_t shooter_;$/;"	m	class:hpp::core::pathPlanner::kPrmStar
shouldFilter	include/hpp/core/path-optimization/config-optimization.hh	/^              shouldFilter;$/;"	m	struct:hpp::core::pathOptimization::ConfigOptimization::Parameters
shouldFilter	src/path-optimization/config-optimization.cc	/^      bool ConfigOptimizationTraits::shouldFilter (JointConstPtr_t joint,$/;"	f	class:hpp::core::pathOptimization::ConfigOptimizationTraits
sigma	include/hpp/core/path-projector/global.hh	/^            value_type sigma;$/;"	m	struct:hpp::core::pathProjector::Global::Data
sigma	src/config-projector.cc	/^    const value_type& ConfigProjector::sigma() const$/;"	f	class:hpp::core::ConfigProjector
size	include/hpp/core/weighed-distance.hh	/^      std::size_t size () const$/;"	f	class:hpp::core::WeighedDistance
size_type	include/hpp/core/fwd.hh	/^    typedef pinocchio::size_type size_type;$/;"	t	namespace:hpp::core
sm_	include/hpp/core/distance/reeds-shepp.hh	/^	steeringMethod::ReedsSheppPtr_t sm_;$/;"	m	class:hpp::core::distance::ReedsShepp
solution	src/astar.hh	/^      PathVectorPtr_t solution ()$/;"	f	class:hpp::core::Astar
solve	include/hpp/core/path-optimization/quadratic-program.hh	/^        void solve ()$/;"	f	struct:hpp::core::pathOptimization::QuadraticProgram
solve	src/path-optimization/quadratic-program.cc	/^      double QuadraticProgram::solve(const LinearConstraint& ce, const LinearConstraint& ci)$/;"	f	class:hpp::core::pathOptimization::QuadraticProgram
solve	src/path-optimization/spline-gradient-based-constraint.cc	/^          double solve(const LinearConstraint& ce, const LinearConstraint& ci)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
solve	src/path-optimization/spline-gradient-based-constraint.cc	/^          void solve ()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem
solve	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        double solve(const LinearConstraint& ce, const LinearConstraint& ci)$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
solve	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        void solve ()$/;"	f	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem
solve	src/path-planner.cc	/^    PathVectorPtr_t PathPlanner::solve ()$/;"	f	class:hpp::core::PathPlanner
solve	src/problem-solver.cc	/^    void ProblemSolver::solve ()$/;"	f	class:hpp::core::ProblemSolver
solveConstraints	src/path-optimization/gradient-based.cc	/^      bool GradientBased::solveConstraints$/;"	f	class:hpp::core::pathOptimization::GradientBased
solve_quadprog	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline double solve_quadprog(MatrixXd & G,  VectorXd & g0,$/;"	f	namespace:Eigen
solve_quadprog2	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline double solve_quadprog2(LLT<MatrixXd,Lower> &chol,  double c1, VectorXd & g0,$/;"	f	namespace:Eigen
solver	include/hpp/core/config-projector.hh	/^      const HybridSolver& solver () const$/;"	f	class:hpp::core::ConfigProjector
solverOneStep	src/config-projector.cc	/^    inline bool ConfigProjector::solverOneStep (ConfigurationOut_t config) const$/;"	f	class:hpp::core::ConfigProjector
solverSolve	src/config-projector.cc	/^    inline int ConfigProjector::solverSolve ($/;"	f	class:hpp::core::ConfigProjector
solver_	include/hpp/core/config-projector.hh	/^      HybridSolver* solver_;$/;"	m	class:hpp::core::ConfigProjector
splineIds	src/path-optimization/spline-gradient-based-constraint.cc	/^          std::vector<std::size_t> splineIds;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::CollisionFunctions	file:
splineIds	src/path-optimization/spline-gradient-based.cc	/^        std::vector<std::size_t> splineIds;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
splineIds	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        std::vector<std::size_t> splineIds;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::CollisionFunctions	file:
spline_basis_function	src/path/spline.cc	/^        template <int Degree> struct spline_basis_function <BernsteinBasis, Degree>$/;"	s	namespace:hpp::core::path::internal	file:
spline_basis_function	src/path/spline.cc	/^        template <int Degree> struct spline_basis_function <CanonicalPolynomeBasis, Degree>$/;"	s	namespace:hpp::core::path::internal	file:
split	src/nearest-neighbor/k-d-tree.cc	/^    void KDTree::split() {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
splitDim_	src/nearest-neighbor/k-d-tree.hh	/^      std::size_t splitDim_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
squaredNormBasisFunctionIntegral	include/hpp/core/path/spline.hh	/^          void squaredNormBasisFunctionIntegral (const size_type order, matrixOut_t res) const$/;"	f	class:hpp::core::path::Spline
squaredNormBasisFunctionIntegral	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::squaredNormBasisFunctionIntegral (const size_type order, BasisFunctionIntegralMatrix_t& Ic) const$/;"	f	class:hpp::core::path::Spline
squaredNormIntegral	src/path/spline.cc	/^      value_type Spline<_SplineType, _Order>::squaredNormIntegral (const size_type order) const$/;"	f	class:hpp::core::path::Spline
squaredNormIntegralDerivative	src/path/spline.cc	/^      void Spline<_SplineType, _Order>::squaredNormIntegralDerivative (const size_type order, vectorOut_t res) const$/;"	f	class:hpp::core::path::Spline
startComponent_	include/hpp/core/bi-rrt-planner.hh	/^      ConnectedComponentPtr_t startComponent_;$/;"	m	class:hpp::core::BiRRTPlanner
startSolve	src/bi-rrt-planner.cc	/^    void BiRRTPlanner::startSolve()$/;"	f	class:hpp::core::BiRRTPlanner
startSolve	src/path-planner.cc	/^    void PathPlanner::startSolve ()$/;"	f	class:hpp::core::PathPlanner
startSolve	src/path-planner/k-prm-star.cc	/^      void kPrmStar::startSolve ()$/;"	f	class:hpp::core::pathPlanner::kPrmStar
startSolve	src/plan-and-optimize.cc	/^    void PlanAndOptimize::startSolve ()$/;"	f	class:hpp::core::PlanAndOptimize
state_	include/hpp/core/path-planner/k-prm-star.hh	/^        STATE state_;$/;"	m	class:hpp::core::pathPlanner::kPrmStar
statistics	include/hpp/core/config-projector.hh	/^      ::hpp::statistics::SuccessStatistics& statistics()$/;"	f	class:hpp::core::ConfigProjector
statistics_	include/hpp/core/config-projector.hh	/^      ::hpp::statistics::SuccessStatistics statistics_;$/;"	m	class:hpp::core::ConfigProjector
steer	src/path-optimizer.cc	/^    PathPtr_t PathOptimizer::steer (ConfigurationIn_t q1,$/;"	f	class:hpp::core::PathOptimizer
steer	src/path-projector.cc	/^    PathPtr_t PathProjector::steer (ConfigurationIn_t q1,$/;"	f	class:hpp::core::PathProjector
steer	src/steering-method/spline.cc	/^      PathPtr_t Spline<_PB, _SO>::steer ($/;"	f	class:hpp::core::steeringMethod::Spline
steeringMethod	include/hpp/core/problem.hh	/^      SteeringMethodPtr_t steeringMethod () const {$/;"	f	class:hpp::core::Problem
steeringMethod	include/hpp/core/problem.hh	/^      void steeringMethod (const SteeringMethodPtr_t& sm) {$/;"	f	class:hpp::core::Problem
steeringMethod	include/hpp/core/steering-method/car-like.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/constant-curvature.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/dubins.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/fwd.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/hermite.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/interpolated-steering-method.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/reeds-shepp.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/snibud.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/spline.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	include/hpp/core/steering-method/straight.hh	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core
steeringMethod	src/steering-method/car-like.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethod	src/steering-method/constant-curvature.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethod	src/steering-method/dubins.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethod	src/steering-method/reeds-shepp.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethod	src/steering-method/snibud.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethod	src/steering-method/spline.cc	/^    namespace steeringMethod {$/;"	n	namespace:hpp::core	file:
steeringMethodType	include/hpp/core/problem-solver.hh	/^      const std::string& steeringMethodType () const {$/;"	f	class:hpp::core::ProblemSolver
steeringMethodType	src/problem-solver.cc	/^    void ProblemSolver::steeringMethodType (const std::string& type)$/;"	f	class:hpp::core::ProblemSolver
steeringMethodType_	include/hpp/core/problem-solver.hh	/^      std::string steeringMethodType_;$/;"	m	class:hpp::core::ProblemSolver
steeringMethod_	include/hpp/core/path-optimization/gradient-based.hh	/^        steeringMethod::StraightPtr_t steeringMethod_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
steeringMethod_	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          typename SSM_t::Ptr_t steeringMethod_;$/;"	m	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
steeringMethod_	include/hpp/core/path-projector.hh	/^	SteeringMethodPtr_t steeringMethod_;$/;"	m	class:hpp::core::PathProjector
steeringMethod_	include/hpp/core/problem.hh	/^      SteeringMethodPtr_t steeringMethod_;$/;"	m	class:hpp::core::Problem
steeringMethods	include/hpp/core/problem-solver.hh	/^      Container <SteeringMethodBuilder_t>       steeringMethods;$/;"	m	class:hpp::core::ProblemSolver
step	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::step$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
stepNormal_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable vector_t stepNormal_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
stepSize_	include/hpp/core/continuous-collision-checking.hh	/^      value_type stepSize_;$/;"	m	class:hpp::core::ContinuousCollisionChecking
stepSize_	include/hpp/core/discretized-path-validation.hh	/^      value_type stepSize_;$/;"	m	class:hpp::core::DiscretizedPathValidation
step_	include/hpp/core/path-projector/global.hh	/^          value_type step_;$/;"	m	class:hpp::core::pathProjector::Global
step_	include/hpp/core/path-projector/progressive.hh	/^          value_type step_;$/;"	m	class:hpp::core::pathProjector::Progressive
supChild_	src/nearest-neighbor/k-d-tree.hh	/^      KDTreePtr_t supChild_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
symSet	src/relative-motion.cc	/^      inline void symSet (RelativeMotion::matrix_type& m, size_type i0, size_type i1, RelativeMotion::RelativeMotionType t)$/;"	f	namespace:hpp::core::__anon26
t_	src/path.cc	/^          value_type t_;$/;"	m	class:hpp::core::timeParameterization::Shift	file:
target	include/hpp/core/problem.hh	/^      const ProblemTargetPtr_t& target () const$/;"	f	class:hpp::core::Problem
target	include/hpp/core/problem.hh	/^      void target (const ProblemTargetPtr_t& target)$/;"	f	class:hpp::core::Problem
target_	include/hpp/core/problem-solver.hh	/^      ProblemTargetPtr_t target_;$/;"	m	class:hpp::core::ProblemSolver
target_	include/hpp/core/problem.hh	/^      ProblemTargetPtr_t target_;$/;"	m	class:hpp::core::Problem
tauOmega	src/reeds-shepp-path.cc	/^    inline void tauOmega(value_type u, value_type v, value_type xi, value_type eta, value_type phi, value_type &tau, value_type &omega)$/;"	f	namespace:hpp::core
thresholdMin_	include/hpp/core/path-projector/global.hh	/^          const value_type thresholdMin_;$/;"	m	class:hpp::core::pathProjector::Global
thresholdMin_	include/hpp/core/path-projector/progressive.hh	/^          const value_type thresholdMin_;$/;"	m	class:hpp::core::pathProjector::Progressive
timeParam_	include/hpp/core/path.hh	/^      TimeParameterizationPtr_t timeParam_;$/;"	m	class:hpp::core::Path
timeParameterization	include/hpp/core/path.hh	/^      const TimeParameterizationPtr_t& timeParameterization() const$/;"	f	class:hpp::core::Path
timeParameterization	include/hpp/core/path.hh	/^      void timeParameterization (const TimeParameterizationPtr_t& tp,$/;"	f	class:hpp::core::Path
timeParameterization	include/hpp/core/time-parameterization/polynomial.hh	/^    namespace timeParameterization {$/;"	n	namespace:hpp::core
timeParameterization	src/path.cc	/^    namespace timeParameterization {$/;"	n	namespace:hpp::core	file:
timeRange	include/hpp/core/path.hh	/^      const interval_t& timeRange () const$/;"	f	class:hpp::core::Path
timeRange	include/hpp/core/path.hh	/^      void timeRange (const interval_t& timeRange)$/;"	f	class:hpp::core::Path
timeRange_	include/hpp/core/path.hh	/^      interval_t timeRange_;$/;"	m	class:hpp::core::Path
tmpJac_	include/hpp/core/explicit-relative-transformation.hh	/^      mutable matrix_t tmpJac_, J2_parent_minus_J1_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
to	include/hpp/core/edge.hh	/^      NodePtr_t to () const$/;"	f	class:hpp::core::Edge
toMinusFrom_	include/hpp/core/config-projector.hh	/^      mutable vector_t toMinusFrom_;$/;"	m	class:hpp::core::ConfigProjector
toString	src/continuous-collision-checking/intervals.hh	/^	std::string toString () const$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
tolerance	src/continuous-collision-checking/body-pair-collision.hh	/^	value_type tolerance () const$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
tolerance_	include/hpp/core/continuous-collision-checking.hh	/^      value_type tolerance_;$/;"	m	class:hpp::core::ContinuousCollisionChecking
tolerance_	src/continuous-collision-checking/body-pair-collision.hh	/^	value_type tolerance_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
tp_	src/path.cc	/^          TimeParameterizationPtr_t tp_;$/;"	m	class:hpp::core::timeParameterization::Shift	file:
trace	include/hpp/core/path-optimization/quadratic-program.hh	/^        value_type trace;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
trace	src/path-optimization/spline-gradient-based-constraint.cc	/^          value_type trace;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
trace	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        value_type trace;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
traits	src/path/spline.cc	/^          typedef sbf_traits<CanonicalPolynomeBasis, Degree> traits;$/;"	t	struct:hpp::core::path::internal::spline_basis_function	file:
trans	src/explicit-relative-transformation.cc	/^      inline ConstHalfJacobian_t trans(const JointJacobian_t& j) { return j.topRows<3>(); }$/;"	f	namespace:hpp::core::__anon23
trivialOrNotConfigProjectorIt_	include/hpp/core/constraint-set.hh	/^      Constraints_t::iterator trivialOrNotConfigProjectorIt_;$/;"	m	class:hpp::core::ConstraintSet
tryDirectPath	src/path-planner.cc	/^    void PathPlanner::tryDirectPath ()$/;"	f	class:hpp::core::PathPlanner
twopi	src/reeds-shepp-path.cc	/^      const value_type twopi = 2. * pi;$/;"	m	namespace:hpp::core::__anon24	file:
type	include/hpp/core/container.hh	/^      template <typename T> struct remove_pointer<boost::shared_ptr<T> > { typedef T type; };$/;"	t	struct:hpp::core::internal::remove_pointer
type	include/hpp/core/container.hh	/^      template <typename T> struct remove_pointer<const boost::shared_ptr<T> > { typedef T type; };$/;"	t	struct:hpp::core::internal::remove_pointer
typeDims_	src/nearest-neighbor/k-d-tree.hh	/^      vector_t typeDims_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
typeId_	include/hpp/core/dubins-path.hh	/^      std::size_t typeId_;$/;"	m	class:hpp::core::DubinsPath
typeId_	include/hpp/core/reeds-shepp-path.hh	/^      std::size_t typeId_;$/;"	m	class:hpp::core::ReedsSheppPath
types	src/reeds-shepp-path.cc	/^      const SegmentType types[18][5] = {$/;"	m	namespace:hpp::core::__anon24	file:
uncompressMatrix	src/config-projector.cc	/^    void ConfigProjector::uncompressMatrix (matrixIn_t small,$/;"	f	class:hpp::core::ConfigProjector
uncompressMatrix	src/constraint-set.cc	/^    void ConstraintSet::uncompressMatrix (matrixIn_t small,$/;"	f	class:hpp::core::ConstraintSet
uncompressVector	src/config-projector.cc	/^    void ConfigProjector::uncompressVector (vectorIn_t small,$/;"	f	class:hpp::core::ConfigProjector
uncompressVector	src/constraint-set.cc	/^    void ConstraintSet::uncompressVector (vectorIn_t small,$/;"	f	class:hpp::core::ConstraintSet
uncompressVector	src/path-optimization/gradient-based.cc	/^      void GradientBased::uncompressVector (vectorIn_t small,$/;"	f	class:hpp::core::pathOptimization::GradientBased
unionInterval	src/continuous-collision-checking/intervals.hh	/^	void unionInterval (const interval_t& interval)$/;"	f	class:hpp::core::continuousCollisionChecking::Intervals
unpack	src/path-optimization/partial-shortcut.cc	/^        void unpack (PathPtr_t path, PathVectorPtr_t out) {$/;"	f	namespace:hpp::core::pathOptimization::__anon13
updateConstraint	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       void updateConstraint (const Configuration_t& q)$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
updateProblemConstraints	src/path-optimization/gradient-based.cc	/^      void GradientBased::updateProblemConstraints (vectorIn_t x)$/;"	f	class:hpp::core::pathOptimization::GradientBased
updateRightHandSide	src/path-optimization/collision-constraints-result.hh	/^	void updateRightHandSide (const PathVectorPtr_t& path, vectorOut_t rhs)$/;"	f	struct:hpp::core::pathOptimization::CollisionConstraintsResult
updateRightHandSide	src/path-optimization/gradient-based.cc	/^      void GradientBased::updateRightHandSide$/;"	f	class:hpp::core::pathOptimization::GradientBased
updateSplines	src/path-optimization/spline-gradient-based-abstract.cc	/^      void SplineGradientBasedAbstract<_PB, _SO>::updateSplines$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
updateSplines	src/path-optimization/spline-gradient-based-constraint.cc	/^        void SplineGradientBasedConstraint<_PB, _SO>::updateSplines$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedConstraint
updateSplines	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^      void SplineGradientBased<_PB, _SO>::updateSplines$/;"	f	class:hpp::core::pathOptimization::SplineGradientBased
update_r	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline void update_r(const MatrixXd& R, VectorXd& r, const VectorXd& d, int iq)$/;"	f	namespace:Eigen
update_z	src/path-optimization/spline-gradient-based/eiquadprog_2011.hpp	/^    inline void update_z(VectorXd& z, const MatrixXd& J, const VectorXd& d,  int iq)$/;"	f	namespace:Eigen
upperBound_	include/hpp/core/joint-bound-validation.hh	/^      value_type upperBound_;$/;"	m	class:hpp::core::JointBoundValidationReport
upperBounds_	src/nearest-neighbor/k-d-tree.hh	/^      vector_t upperBounds_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
v0	include/hpp/core/path/hermite.hh	/^        vector_t v0 () const$/;"	f	class:hpp::core::path::Hermite
v0	include/hpp/core/path/hermite.hh	/^        void v0 (const vectorIn_t& speed)$/;"	f	class:hpp::core::path::Hermite
v1	include/hpp/core/path/hermite.hh	/^        vector_t v1 () const$/;"	f	class:hpp::core::path::Hermite
v1	include/hpp/core/path/hermite.hh	/^        void v1 (const vectorIn_t& speed)$/;"	f	class:hpp::core::path::Hermite
val	include/hpp/core/time-parameterization/polynomial.hh	/^          value_type val (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Polynomial
validInterval_	src/continuous-collision-checking/body-pair-collision.hh	/^        interval_set validInterval_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
valid_	src/continuous-collision-checking/body-pair-collision.hh	/^	bool valid_;$/;"	m	class:hpp::core::continuousCollisionChecking::BodyPairCollision
validate	src/collision-validation.cc	/^    bool CollisionValidation::validate (const Configuration_t& config,$/;"	f	class:hpp::core::CollisionValidation
validate	src/config-validations.cc	/^    bool ConfigValidations::validate (const Configuration_t& config,$/;"	f	class:hpp::core::ConfigValidations
validate	src/continuous-collision-checking.cc	/^    bool ContinuousCollisionChecking::validate$/;"	f	class:hpp::core::ContinuousCollisionChecking
validate	src/discretized-path-validation.cc	/^    bool DiscretizedPathValidation::validate$/;"	f	class:hpp::core::DiscretizedPathValidation
validate	src/joint-bound-validation.cc	/^    bool JointBoundValidation::validate$/;"	f	class:hpp::core::JointBoundValidation
validate	src/path-validations.cc	/^    bool PathValidations::validate$/;"	f	class:hpp::core::PathValidations
validateBounds	src/path-optimization/spline-gradient-based-abstract.cc	/^      SplineGradientBasedAbstract<_PB, _SO>::validateBounds$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
validateConfiguration	src/continuous-collision-checking.cc	/^    bool ContinuousCollisionChecking::validateConfiguration$/;"	f	class:hpp::core::ContinuousCollisionChecking
validateConfiguration	src/continuous-collision-checking/body-pair-collision.hh	/^	bool validateConfiguration (const value_type& t, interval_t& interval,$/;"	f	class:hpp::core::continuousCollisionChecking::BodyPairCollision
validatePath	src/path-optimization/gradient-based.cc	/^      bool validatePath (const PathValidationPtr_t& pathValidation,$/;"	f	namespace:hpp::core::pathOptimization
validatePath	src/path-optimization/spline-gradient-based-abstract.cc	/^      SplineGradientBasedAbstract<_PB, _SO>::validatePath$/;"	f	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
validateStraightPath	src/continuous-collision-checking/dichotomy.cc	/^      bool Dichotomy::validateStraightPath$/;"	f	class:hpp::core::continuousCollisionChecking::Dichotomy
validateStraightPath	src/continuous-collision-checking/progressive.cc	/^      bool Progressive::validateStraightPath$/;"	f	class:hpp::core::continuousCollisionChecking::Progressive
validations_	include/hpp/core/config-validations.hh	/^      std::vector <ConfigValidationPtr_t> validations_;$/;"	m	class:hpp::core::ConfigValidations
validations_	include/hpp/core/path-optimization/spline-gradient-based-abstract.hh	/^          std::vector<PathValidationPtr_t> validations_;$/;"	m	class:hpp::core::pathOptimization::SplineGradientBasedAbstract
validations_	include/hpp/core/path-validations.hh	/^      std::vector <PathValidationPtr_t> validations_;$/;"	m	class:hpp::core::PathValidations
value	include/hpp/core/numerical-constraint.hh	/^        vector_t& value ()$/;"	f	class:hpp::core::NumericalConstraint
value	include/hpp/core/steering-method/constant-curvature.hh	/^          value_type value; \/\/ Constant value of the wheel angle$/;"	m	struct:hpp::core::steeringMethod::ConstantCurvature::Wheels_t
value	include/hpp/core/time-parameterization/polynomial.hh	/^          value_type value (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Polynomial
value	src/implicit-function.hh	/^        const LiegroupElement& value (const LiegroupElement& qOut) const { return qOut; }$/;"	f	struct:hpp::core::ImplicitFunction::IdentityData
value	src/implicit-function.hh	/^        const LiegroupElement& value (const LiegroupElement&) const$/;"	f	struct:hpp::core::ImplicitFunction::GenericGData
value	src/path-optimization/spline-gradient-based/cost.hh	/^        void value (value_type& result, const Splines_t& splines) const$/;"	f	struct:hpp::core::pathOptimization::SquaredLength
value	src/path.cc	/^          value_type value (const value_type& t) const$/;"	f	class:hpp::core::timeParameterization::Shift
value_	include/hpp/core/joint-bound-validation.hh	/^      value_type value_;$/;"	m	class:hpp::core::JointBoundValidationReport
value_	include/hpp/core/numerical-constraint.hh	/^        vector_t value_;$/;"	m	class:hpp::core::NumericalConstraint
value_	include/hpp/core/path-optimization/gradient-based.hh	/^	mutable vector_t value_;$/;"	m	class:hpp::core::pathOptimization::GradientBased
value_	src/continuous-collision-checking/path-velocity.hh	/^	value_type value_;$/;"	m	struct:hpp::core::continuousCollisionChecking::CoefficientVelocity
value_type	include/hpp/core/container.hh	/^      typedef typename Map_t::value_type value_type;$/;"	t	struct:hpp::core::Container
value_type	include/hpp/core/fwd.hh	/^    typedef pinocchio::value_type value_type;$/;"	t	namespace:hpp::core
vector2_t	include/hpp/core/fwd.hh	/^    typedef Eigen::Matrix<value_type, 2, 1> vector2_t;$/;"	t	namespace:hpp::core
vector3_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::vector3_t vector3_t;$/;"	t	namespace:hpp::core
vector3_t	src/path-optimization/collision-constraints-result.hh	/^	typedef Eigen::Matrix <value_type, 3, 1> vector3_t;$/;"	t	namespace:hpp::core::pathOptimization::eigen
vector3_t	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^	typedef Eigen::Matrix <value_type, 3, 1> vector3_t;$/;"	t	namespace:hpp::core::pathOptimization::eigen
vectorIn_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::vectorIn_t vectorIn_t;$/;"	t	namespace:hpp::core
vectorOfBoolToIntervals	src/explicit-relative-transformation.cc	/^      BlockIndex::segments_t vectorOfBoolToIntervals (std::vector<bool>& v)$/;"	f	namespace:hpp::core::__anon23
vectorOut_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::vectorOut_t vectorOut_t;$/;"	t	namespace:hpp::core
vectorToPath	include/hpp/core/path-optimization/gradient-based.hh	/^	void vectorToPath (vectorIn_t x, const PathVectorPtr_t& result) const {$/;"	f	class:hpp::core::pathOptimization::GradientBased
vector_t	include/hpp/core/fwd.hh	/^    typedef pinocchio::vector_t vector_t;$/;"	t	namespace:hpp::core
velocity	src/path/hermite.cc	/^      vector_t Hermite::velocity (const value_type& param) const$/;"	f	class:hpp::core::path::Hermite
velocityBound	include/hpp/core/path.hh	/^      void velocityBound (vectorOut_t result, const value_type& t0, const value_type& t1) const$/;"	f	class:hpp::core::Path
velocity_	include/hpp/core/path/spline.hh	/^          mutable vector_t velocity_;$/;"	m	class:hpp::core::path::Spline
visibleFromCC	src/visibility-prm-planner.cc	/^    bool VisibilityPrmPlanner::visibleFromCC (const ConfigurationPtr_t q, $/;"	f	class:hpp::core::VisibilityPrmPlanner
weakPtr_	include/hpp/core/bi-rrt-planner.hh	/^      BiRRTPlannerWkPtr_t weakPtr_;$/;"	m	class:hpp::core::BiRRTPlanner
weakPtr_	include/hpp/core/configuration-shooter.hh	/^      ConfigurationShooterWkPtr_t weakPtr_;$/;"	m	class:hpp::core::ConfigurationShooter
weakPtr_	include/hpp/core/diffusing-planner.hh	/^      DiffusingPlannerWkPtr_t weakPtr_;$/;"	m	class:hpp::core::DiffusingPlanner
weakPtr_	include/hpp/core/path-planner.hh	/^      PathPlannerWkPtr_t weakPtr_;$/;"	m	class:hpp::core::PathPlanner
weakPtr_	include/hpp/core/problem-target.hh	/^      ProblemTargetWkPtr_t weakPtr_;$/;"	m	class:hpp::core::ProblemTarget
weakPtr_	include/hpp/core/visibility-prm-planner.hh	/^      VisibilityPrmPlannerWkPtr_t weakPtr_;$/;"	m	class:hpp::core::VisibilityPrmPlanner
weak_	include/hpp/core/basic-configuration-shooter.hh	/^      BasicConfigurationShooterWkPtr_t weak_;$/;"	m	class:hpp::core::BasicConfigurationShooter
weak_	include/hpp/core/config-projector.hh	/^      ConfigProjectorWkPtr_t weak_;$/;"	m	class:hpp::core::ConfigProjector
weak_	include/hpp/core/connected-component.hh	/^      ConnectedComponentWkPtr_t weak_;$/;"	m	class:hpp::core::ConnectedComponent
weak_	include/hpp/core/constraint-set.hh	/^      ConstraintSetWkPtr_t weak_;$/;"	m	class:hpp::core::ConstraintSet
weak_	include/hpp/core/constraint.hh	/^      ConstraintWkPtr_t weak_;$/;"	m	class:hpp::core::Constraint
weak_	include/hpp/core/distance/reeds-shepp.hh	/^	ReedsSheppWkPtr_t weak_;$/;"	m	class:hpp::core::distance::ReedsShepp
weak_	include/hpp/core/dubins-path.hh	/^      DubinsPathWkPtr_t weak_;$/;"	m	class:hpp::core::DubinsPath
weak_	include/hpp/core/equation.hh	/^	EquationWkPtr_t weak_;$/;"	m	class:hpp::core::Equation
weak_	include/hpp/core/explicit-numerical-constraint.hh	/^      ExplicitNumericalConstraintWkPtr_t weak_;$/;"	m	class:hpp::core::ExplicitNumericalConstraint
weak_	include/hpp/core/explicit-relative-transformation.hh	/^      ExplicitRelativeTransformationWkPtr_t weak_;$/;"	m	class:hpp::core::ExplicitRelativeTransformation
weak_	include/hpp/core/interpolated-path.hh	/^      InterpolatedPathWkPtr_t weak_;$/;"	m	class:hpp::core::InterpolatedPath
weak_	include/hpp/core/locked-joint.hh	/^      LockedJointWkPtr_t weak_;$/;"	m	class:hpp::core::LockedJoint
weak_	include/hpp/core/numerical-constraint.hh	/^	NumericalConstraintWkPtr_t weak_;$/;"	m	class:hpp::core::NumericalConstraint
weak_	include/hpp/core/path-planner/k-prm-star.hh	/^        kPrmStarWkPtr_t weak_;$/;"	m	class:hpp::core::pathPlanner::kPrmStar
weak_	include/hpp/core/path-vector.hh	/^      PathVectorWkPtr_t weak_;$/;"	m	class:hpp::core::PathVector
weak_	include/hpp/core/path.hh	/^      PathWkPtr_t weak_;$/;"	m	class:hpp::core::Path
weak_	include/hpp/core/path/hermite.hh	/^        HermiteWkPtr_t weak_;$/;"	m	class:hpp::core::path::Hermite
weak_	include/hpp/core/path/spline.hh	/^          WkPtr_t weak_;$/;"	m	class:hpp::core::path::Spline
weak_	include/hpp/core/reeds-shepp-path.hh	/^      ReedsSheppPathWkPtr_t weak_;$/;"	m	class:hpp::core::ReedsSheppPath
weak_	include/hpp/core/roadmap.hh	/^      RoadmapWkPtr_t weak_;$/;"	m	class:hpp::core::Roadmap
weak_	include/hpp/core/steering-method.hh	/^      SteeringMethodWkPtr_t weak_;$/;"	m	class:hpp::core::SteeringMethod
weak_	include/hpp/core/steering-method/car-like.hh	/^          CarLikeWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::CarLike
weak_	include/hpp/core/steering-method/constant-curvature.hh	/^        ConstantCurvatureWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
weak_	include/hpp/core/steering-method/dubins.hh	/^          DubinsWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Dubins
weak_	include/hpp/core/steering-method/hermite.hh	/^          HermiteWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Hermite
weak_	include/hpp/core/steering-method/interpolated-steering-method.hh	/^          InterpolatedWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Interpolated
weak_	include/hpp/core/steering-method/reeds-shepp.hh	/^          ReedsSheppWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::ReedsShepp
weak_	include/hpp/core/steering-method/snibud.hh	/^          SnibudWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Snibud
weak_	include/hpp/core/steering-method/spline.hh	/^          WkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Spline
weak_	include/hpp/core/steering-method/straight.hh	/^          StraightWkPtr_t weak_;$/;"	m	class:hpp::core::steeringMethod::Straight
weak_	include/hpp/core/straight-path.hh	/^      StraightPathWkPtr_t weak_;$/;"	m	class:hpp::core::StraightPath
weak_	include/hpp/core/subchain-path.hh	/^      SubchainPathWkPtr_t weak_;$/;"	m	class:hpp::core::SubchainPath
weak_	include/hpp/core/weighed-distance.hh	/^      WeighedDistanceWkPtr_t weak_;$/;"	m	class:hpp::core::WeighedDistance
weak_	src/extracted-path.hh	/^      ExtractedPathWkPtr_t weak_;$/;"	m	class:hpp::core::ExtractedPath
weights_	include/hpp/core/weighed-distance.hh	/^      std::vector <value_type> weights_;$/;"	m	class:hpp::core::WeighedDistance
weights_	src/nearest-neighbor/k-d-tree.hh	/^      vector_t weights_;$/;"	m	class:hpp::core::nearestNeighbor::KDTree
what	include/hpp/core/projection-error.hh	/^      virtual const char* what () const throw () { return msg_.c_str (); };$/;"	f	struct:hpp::core::projection_error
wheels_	include/hpp/core/dubins-path.hh	/^      std::vector<Wheels_t> wheels_;$/;"	m	class:hpp::core::DubinsPath
wheels_	include/hpp/core/steering-method/car-like.hh	/^          std::vector<JointPtr_t> wheels_;$/;"	m	class:hpp::core::steeringMethod::CarLike
wheels_	include/hpp/core/steering-method/constant-curvature.hh	/^        std::vector<Wheels_t> wheels_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
withHessianBound_	include/hpp/core/path-projector/progressive.hh	/^          const bool withHessianBound_;$/;"	m	class:hpp::core::pathProjector::Progressive
writeRoadmap	src/parser/roadmap-factory.cc	/^      void writeRoadmap (std::ostream& o, const ProblemPtr_t& problem,$/;"	f	namespace:hpp::core::parser
xSol	include/hpp/core/path-optimization/linear-constraint.hh	/^        vector_t xStar, xSol;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
xStar	include/hpp/core/path-optimization/linear-constraint.hh	/^        vector_t xStar, xSol;$/;"	m	struct:hpp::core::pathOptimization::LinearConstraint
xStar	include/hpp/core/path-optimization/quadratic-program.hh	/^        vector_t xStar;$/;"	m	struct:hpp::core::pathOptimization::QuadraticProgram
xStar	src/path-optimization/spline-gradient-based-constraint.cc	/^          vector_t xStar;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBasedConstraint::QuadraticProblem	file:
xStar	src/path-optimization/spline-gradient-based/spline-gradient-based.cc	/^        vector_t xStar;$/;"	m	struct:hpp::core::pathOptimization::SplineGradientBased::QuadraticProblem	file:
xyId_	include/hpp/core/dubins-path.hh	/^      const size_type xyId_,rzId_;$/;"	m	class:hpp::core::DubinsPath
xyId_	include/hpp/core/reeds-shepp-path.hh	/^      const size_type xyId_,rzId_;$/;"	m	class:hpp::core::ReedsSheppPath
xyId_	include/hpp/core/steering-method/car-like.hh	/^          size_type xyId_, rzId_;$/;"	m	class:hpp::core::steeringMethod::CarLike
xyId_	include/hpp/core/steering-method/constant-curvature.hh	/^        const size_type xyId_,rzId_;$/;"	m	class:hpp::core::steeringMethod::ConstantCurvature
xy_	include/hpp/core/steering-method/car-like.hh	/^          JointPtr_t xy_, rz_;$/;"	m	class:hpp::core::steeringMethod::CarLike
~Basic	src/nearest-neighbor/basic.hh	/^      ~Basic()$/;"	f	class:hpp::core::nearestNeighbor::Basic
~CarLike	include/hpp/core/steering-method/car-like.hh	/^	virtual ~CarLike () {}$/;"	f	class:hpp::core::steeringMethod::CarLike
~CollisionConstraint	src/path-optimization/collision-constraints-result.hh	/^       virtual ~CollisionConstraint () {}$/;"	f	class:hpp::core::pathOptimization::CollisionConstraint
~CollisionFunction	src/path-optimization/spline-gradient-based/collision-constraint.hh	/^       virtual ~CollisionFunction () {}$/;"	f	class:hpp::core::pathOptimization::CollisionFunction
~ConfigProjector	src/config-projector.cc	/^    ConfigProjector::~ConfigProjector ()$/;"	f	class:hpp::core::ConfigProjector
~ConfigValidation	include/hpp/core/config-validation.hh	/^      virtual ~ConfigValidation () {};$/;"	f	class:hpp::core::ConfigValidation
~ConfigurationShooter	include/hpp/core/configuration-shooter.hh	/^      virtual ~ConfigurationShooter () {};$/;"	f	class:hpp::core::ConfigurationShooter
~ConnectedComponent	include/hpp/core/connected-component.hh	/^      virtual ~ConnectedComponent() {}$/;"	f	class:hpp::core::ConnectedComponent
~ConstantCurvature	include/hpp/core/steering-method/constant-curvature.hh	/^        virtual ~ConstantCurvature () throw () {}$/;"	f	class:hpp::core::steeringMethod::ConstantCurvature
~Constraint	include/hpp/core/constraint.hh	/^      virtual ~Constraint () {};$/;"	f	class:hpp::core::Constraint
~ContinuousCollisionChecking	src/continuous-collision-checking.cc	/^    ContinuousCollisionChecking::~ContinuousCollisionChecking ()$/;"	f	class:hpp::core::ContinuousCollisionChecking
~Dichotomy	src/continuous-collision-checking/dichotomy.cc	/^      Dichotomy::~Dichotomy ()$/;"	f	class:hpp::core::continuousCollisionChecking::Dichotomy
~DiscretizedPathValidation	include/hpp/core/discretized-path-validation.hh	/^      virtual ~DiscretizedPathValidation () {};$/;"	f	class:hpp::core::DiscretizedPathValidation
~Distance	include/hpp/core/distance.hh	/^      virtual ~Distance () {};$/;"	f	class:hpp::core::Distance
~DubinsPath	include/hpp/core/dubins-path.hh	/^      virtual ~DubinsPath () throw () {}$/;"	f	class:hpp::core::DubinsPath
~Equation	include/hpp/core/equation.hh	/^        virtual ~Equation () {}$/;"	f	class:hpp::core::Equation
~ExtractedPath	src/extracted-path.hh	/^      virtual ~ExtractedPath () throw () {}$/;"	f	class:hpp::core::ExtractedPath
~Hermite	include/hpp/core/path/hermite.hh	/^        virtual ~Hermite () throw () {}$/;"	f	class:hpp::core::path::Hermite
~InterpolatedPath	include/hpp/core/interpolated-path.hh	/^      virtual ~InterpolatedPath () throw () {}$/;"	f	class:hpp::core::InterpolatedPath
~KDTree	src/nearest-neighbor/k-d-tree.cc	/^    KDTree::~KDTree() {$/;"	f	class:hpp::core::nearestNeighbor::KDTree
~LinearConstraint	src/path-optimization/linear-constraint.cc	/^      LinearConstraint::~LinearConstraint ()$/;"	f	class:hpp::core::pathOptimization::LinearConstraint
~NearestNeighbor	include/hpp/core/nearest-neighbor.hh	/^      virtual ~NearestNeighbor () {};$/;"	f	class:hpp::core::NearestNeighbor
~Node	include/hpp/core/node.hh	/^      virtual ~Node () {};$/;"	f	class:hpp::core::Node
~NumericalConstraint	include/hpp/core/numerical-constraint.hh	/^        virtual ~NumericalConstraint () {};$/;"	f	class:hpp::core::NumericalConstraint
~Path	include/hpp/core/path.hh	/^      virtual ~Path () throw () {}$/;"	f	class:hpp::core::Path
~PathOptimizer	include/hpp/core/path-optimizer.hh	/^      virtual ~PathOptimizer () {};$/;"	f	class:hpp::core::PathOptimizer
~PathPlanner	include/hpp/core/path-planner.hh	/^      virtual ~PathPlanner () {};$/;"	f	class:hpp::core::PathPlanner
~PathProjector	src/path-projector.cc	/^    PathProjector::~PathProjector ()$/;"	f	class:hpp::core::PathProjector
~PathValidation	include/hpp/core/path-validation.hh	/^      virtual ~PathValidation () {};$/;"	f	class:hpp::core::PathValidation
~PathValidationReport	include/hpp/core/path-validation-report.hh	/^      virtual ~PathValidationReport () {};$/;"	f	struct:hpp::core::PathValidationReport
~PathValidations	include/hpp/core/path-validations.hh	/^      virtual ~PathValidations () {};$/;"	f	class:hpp::core::PathValidations
~PathVector	include/hpp/core/path-vector.hh	/^      virtual ~PathVector () throw ()$/;"	f	class:hpp::core::PathVector
~Problem	src/problem.cc	/^    Problem::~Problem ()$/;"	f	class:hpp::core::Problem
~ProblemSolver	src/problem-solver.cc	/^    ProblemSolver::~ProblemSolver ()$/;"	f	class:hpp::core::ProblemSolver
~ProblemTarget	include/hpp/core/problem-target.hh	/^      virtual ~ProblemTarget () {};$/;"	f	class:hpp::core::ProblemTarget
~Progressive	src/continuous-collision-checking/progressive.cc	/^      Progressive::~Progressive ()$/;"	f	class:hpp::core::continuousCollisionChecking::Progressive
~QuadraticProgram	src/path-optimization/quadratic-program.cc	/^      QuadraticProgram::~QuadraticProgram ()$/;"	f	class:hpp::core::pathOptimization::QuadraticProgram
~ReedsSheppPath	include/hpp/core/reeds-shepp-path.hh	/^      virtual ~ReedsSheppPath () throw () {}$/;"	f	class:hpp::core::ReedsSheppPath
~Roadmap	src/roadmap.cc	/^    Roadmap::~Roadmap ()$/;"	f	class:hpp::core::Roadmap
~Spline	include/hpp/core/path/spline.hh	/^          virtual ~Spline () throw () {}$/;"	f	class:hpp::core::path::Spline
~SteeringMethod	include/hpp/core/steering-method.hh	/^      virtual ~SteeringMethod () {};$/;"	f	class:hpp::core::SteeringMethod
~StraightPath	include/hpp/core/straight-path.hh	/^      virtual ~StraightPath () throw () {}$/;"	f	class:hpp::core::StraightPath
~SubchainPath	include/hpp/core/subchain-path.hh	/^      virtual ~SubchainPath () throw () {}$/;"	f	class:hpp::core::SubchainPath
~ValidationReport	include/hpp/core/validation-report.hh	/^      virtual ~ValidationReport ()$/;"	f	class:hpp::core::ValidationReport
~projection_error	include/hpp/core/projection-error.hh	/^      virtual ~projection_error () throw () {};$/;"	f	struct:hpp::core::projection_error
